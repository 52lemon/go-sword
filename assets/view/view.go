// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/crud.html
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutCrudHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x04\x04\x00\x00\xff\xff\xb7\xef\xdc\x83\x01\x00\x00\x00")

func viewLayoutCrudHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutCrudHtml,
		"view/layout/crud.html",
	)
}

func viewLayoutCrudHtml() (*asset, error) {
	bytes, err := viewLayoutCrudHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/crud.html", size: 1, mode: os.FileMode(420), modTime: time.Unix(1587639591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x8f\xa3\x36\x14\xbe\xef\x5f\xf1\xea\x1e\x98\xa9\x86\x90\x9d\xee\xc9\x0d\xe9\xa1\xbd\x56\xaa\x56\xed\x69\xb5\xaa\x1c\xfc\x00\x6b\x8c\x8d\x6c\xc3\xcc\x34\xca\xff\x5e\xd9\x90\x04\x02\x24\x19\xa9\x3e\x44\xe4\xf3\xfb\xe5\xef\x7d\x3c\xbc\xb1\xee\x5d\x22\xd8\x4c\xd7\xc8\xb7\x9f\x00\x00\x56\x92\xbd\xeb\xc6\xc5\x8a\xb5\xb0\x0f\x88\x5f\xaf\x82\xbb\x92\xc2\x97\xe7\x75\xfd\xf6\xcb\x09\xad\x98\x29\x84\xa2\xb0\x06\xd6\x38\x7d\x89\xc7\x46\x14\xa5\xa3\x30\xf6\xc9\xb4\xd4\x86\xc2\x6b\x29\x1c\x76\xe8\xe1\xd3\x28\xb1\xd4\x85\x1e\x64\xde\x69\xc3\xd1\xc4\x86\x71\xd1\x58\x0a\x3f\x0f\x63\xe5\x52\x33\x47\x41\x62\xee\x8e\xa1\x36\x49\x38\xd2\xf6\xd3\xc6\x61\x55\x4b\xe6\xb0\x3b\xd6\x86\x8b\x76\x7b\x72\xdc\x88\xb8\xcb\x76\x86\x7a\xb8\x44\xc6\xd1\x00\x0d\x51\x52\xb2\xdf\xb1\xec\xa5\x30\xba\x51\x9c\x46\x3f\xae\xd7\xeb\xe8\x40\xc6\x3e\xbd\x5f\x85\xaa\x81\x4a\x73\x4c\x49\xa9\x8d\xf8\x57\x2b\xc7\x24\x01\x57\x62\x85\x29\xe1\xcc\xbc\x10\x60\x99\x13\x2d\xc6\x8a\x79\xe8\x33\xf9\x60\x92\x90\xa8\x7c\x86\x4c\x32\x6b\x53\x32\x60\x8b\x40\x1f\xa8\xe3\xb6\xa3\x96\x6c\xff\x12\x4e\xe2\x26\x29\x9f\x17\x62\x71\xd1\x5e\x04\x53\xac\x5d\x4a\x9c\x8c\xf8\x3b\xc3\xdd\xc9\x2f\x68\x4c\x8e\x3c\x4e\xe8\x9d\x63\xbd\xdf\xb2\xc2\x13\x5f\x0a\x8e\xb1\x33\xa2\x28\x86\x5d\x80\x12\x3b\x2d\x45\x9f\xd7\xeb\xb6\x8c\x9e\x46\x8c\xe5\x79\xbe\xcc\x58\xdf\x9a\xbe\x11\xd2\x87\x21\x9d\x9c\x53\xe2\x55\xbb\xe0\x17\x7c\x8f\x12\x82\x36\xce\xb5\x49\x89\x70\x58\x81\x50\xe0\x23\x5e\xf1\x1b\xe4\x8d\x83\x4b\x1b\x8b\x3c\x25\xee\xbd\x46\x9d\x3f\x78\x64\x65\x9b\xdd\x3f\x7e\xff\x11\xd2\x14\xa2\x46\x71\xcc\x85\x42\x1e\x11\xa0\x9d\x3c\x82\x95\x7f\xbc\x91\xa7\xcf\x25\x32\xad\x80\xfa\x0c\xbd\xab\x07\xc8\xd6\x77\xc2\x3f\xdd\x11\xc3\xe8\xc6\xa1\x89\xa5\x50\x2f\x40\x9d\x4e\x49\x81\xee\xab\xc7\xfe\x64\xae\x7c\x38\x95\xf3\x48\xc0\xb1\x22\x25\xb6\x66\x8a\x6c\xf7\xfb\xb0\xe1\xbc\xd2\x0e\x87\x4d\x32\x08\x72\x83\x9e\x64\xc0\xcf\x4d\x26\x6d\xb3\x0b\x4d\xbc\xc6\xe3\x0f\x63\x1e\xef\x38\xf1\xa9\xbb\x56\x6a\x97\x92\x70\x88\x3b\xfc\xe0\x3e\xc6\xc7\xd4\xdc\xae\x26\x19\xcf\xab\x1b\xd9\x87\xda\x0a\xd2\xb4\xcd\xce\x2b\x73\x44\xca\x49\x4c\xb6\xd9\xdd\xab\x25\xb8\xad\x85\x63\xb4\x4b\x29\x78\xfc\xe3\x4a\x80\x0f\xaa\x21\x39\xc9\xe1\xca\x8b\x7b\x83\xcc\xf9\xb1\x75\x0a\x2f\x26\x93\x0b\x86\xd3\xeb\x3c\x96\x6a\xc6\xb9\x50\x05\x85\x68\x0d\xcf\x5f\xea\xb7\xf0\xb3\x3c\x8a\x7a\x4e\x5a\x81\xaf\xdb\x13\x43\xe1\xdf\x6c\x1d\xb3\x5f\xa8\x19\xfc\x12\xeb\x67\xf5\x90\x84\x8d\xcd\x8c\xa8\xfb\xfd\x4a\xf3\x46\xe2\x0a\xdf\x6a\x6d\x9c\x85\x74\xf0\xb1\xe5\xcc\x31\x0a\x79\xa3\x32\x27\xb4\x82\x87\xc7\xc1\x9e\x5f\x06\x5d\x63\xd4\x05\xe8\x57\x92\x40\xa6\x55\x2e\x0a\x28\xa4\xde\x31\x19\x46\x24\x48\x61\xdd\xc4\xd4\xef\x50\xf8\x36\x8d\xe1\x97\x7f\x75\x28\x44\x42\xdb\xb8\x46\x5d\x4b\x8c\x9e\x66\xed\x82\xce\x28\x44\x7f\x68\x8e\x72\xc1\xc6\x6b\x94\x42\x54\x05\x93\x89\xc5\xe1\xe9\xff\xa9\xe0\xb7\xaf\x7f\xff\x7e\xbd\x80\xcc\x34\x7c\x26\xff\xf7\xa9\xd3\x84\xc5\xa0\x11\x3b\xb1\xeb\xe0\x45\x12\x6b\xe6\xef\x6a\xd1\x4f\x0b\x65\x19\xe4\xc2\x60\xe6\x28\xec\x47\x14\x4d\x87\xd4\xe1\x69\xa6\xd5\x70\x49\xed\x7c\x96\xbe\x88\xe4\x9a\x4d\x63\xa4\x37\x31\xa8\x38\x9a\x5f\xbd\x47\x9a\x74\x4a\x4e\x16\xbb\x76\xbd\xa2\xc0\xf5\xf5\x82\xae\x98\x5c\xa9\x67\xa9\x89\x23\xe8\xcc\xe0\xe1\x69\x70\xe1\xad\xea\xc6\x21\xa7\xb0\x1f\xa0\x15\xba\x52\x73\x4b\x2f\x8e\x33\x1c\xb4\xc3\x17\x31\xcc\xdb\x99\xa3\xb7\xcc\xf4\x6a\x80\x14\x5c\x29\xec\x6a\x41\x32\xb9\x36\xf0\xe0\xad\x85\xff\x4c\x74\x46\x73\x01\xfd\x12\x79\x97\xd0\xdf\x4d\x3a\xcb\x6f\xe2\xfb\x6a\xa9\x84\xe3\xea\x67\xc3\xd9\xc1\xf3\x37\x6b\x3d\x23\xb4\xa9\xc4\xbb\x68\x51\xb4\x44\xf0\xf9\xbe\xdf\x8d\xb6\xff\x02\x00\x00\xff\xff\x83\x3c\xc3\xa2\xcb\x0c\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3275, mode: os.FileMode(420), modTime: time.Unix(1587826511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x11\x03\xec\x00\xb1\x94\xe5\x61\x18\x54\xcb\xe8\xb0\x02\x7b\x69\x81\x0e\xdd\x9e\x82\xc2\x60\xa4\x93\xc5\x95\x22\x05\x92\xb2\xe3\x15\xfe\xee\x03\x29\xd9\x96\x64\x4a\x72\xba\x0d\xed\xf4\x10\xc8\x47\xde\x1f\xde\xfd\x7e\x77\x54\x96\x06\x8b\x92\x53\x83\xab\x1b\x00\x80\x65\xca\xb6\xf5\x9b\xfb\xc5\x16\x4a\xee\xce\xbf\x1b\x59\x22\x39\xe8\x92\x8a\x98\xfc\xf0\x40\xba\xab\xcd\x8e\x4c\xaa\x02\x22\x4e\x9f\x90\x2f\x76\x2c\x35\x79\x4c\x1e\xee\xef\x09\x14\x68\x72\x99\xc6\xa4\x94\xda\x78\x34\x5b\xda\x0b\x66\xb0\x00\x67\x21\x26\xef\xf6\x1f\x7e\x7b\x0b\x86\x3e\x71\x1c\xd0\x6a\x34\x69\x65\xe4\x22\x91\x45\xc9\xd1\x20\x44\x29\x35\x34\x26\x4e\x6f\xcd\x99\x36\x04\xb6\x8b\x42\xa6\xd6\x64\x2d\x14\xb4\x40\x32\x68\xf0\xe2\x29\x39\x4d\x30\x97\x3c\x45\x15\x93\x5f\x38\x4b\x3e\x81\x91\x90\xe4\x52\x6a\x84\x4e\x90\xcb\xb0\x17\xcc\xc0\x61\xc3\xd6\x69\xa7\xf3\x31\x7a\xf6\xa7\xca\x18\x29\xc0\xec\x4b\x8c\x49\xa9\x58\x41\xd5\x9e\xc0\xeb\xc4\x86\x69\x05\xb8\x65\xb8\x23\xab\xf7\xf5\x8b\xf5\x5c\x6b\x5c\x6f\x54\x57\x49\x82\x5a\x9f\x8d\x6e\x50\xa0\xa2\x06\xc9\xea\xd7\xe6\x6d\xca\xec\xc4\x81\x8f\xcb\x5e\x50\x51\x8e\xca\x34\xa1\x10\xd0\xb9\xdc\x2d\x58\x32\xe8\xc8\x02\x14\x34\x97\x26\x26\x29\xea\xc4\x96\xc4\x8a\xfc\x3e\x9d\xe9\x1e\xce\x43\x07\xf4\x16\x19\xc2\x1e\x1b\x26\xd9\xf1\x70\xef\x63\x47\xca\xb6\xa0\xcd\x9e\x63\x4c\x0c\x3e\x9b\x05\xe5\x6c\x23\x22\x50\x6c\x93\x8f\x70\xa2\x29\xc4\x31\xf3\x39\x15\x29\xc7\x0f\xc8\x31\x31\x3f\x73\x3e\x37\xaa\xc2\x5b\xb2\xaa\x05\x40\x39\x9f\x2c\xc4\xa4\xc9\x8c\x72\x6d\x6d\xfe\x21\xf4\x55\x56\x97\x61\xa7\x77\x9c\xc4\x4f\xca\x5b\x4d\x47\x14\x88\x12\xc9\xab\x42\xe8\x23\x21\x13\xc9\x49\x97\xb7\xf6\x9d\x80\xc2\x2c\x26\x75\x1c\x4c\x0a\x02\xaf\xa5\x58\x9c\x7e\x2e\x92\x9c\x8a\x0d\x1e\x35\x4e\xf2\x75\x2d\x1f\x4a\xea\xb1\xf3\x39\x94\x2c\x74\x22\x2d\xb0\x3e\x83\x92\xbb\x3b\x60\x22\xc5\x67\x38\x90\x06\x41\xb5\xe1\xfa\xe4\xe3\x1d\xa8\x43\x18\x26\x32\x49\x40\xb3\xbf\x2c\x79\x0a\xca\xf9\x99\x3a\xb2\x44\xf1\x4e\xa6\x94\xcf\x9d\xab\x5b\xb2\x7a\x83\x86\xb2\xc9\xba\x75\x23\xdf\x2e\x58\x16\x13\x25\x77\x01\xd3\xeb\x94\x65\x19\xc4\x31\xcc\xf6\xb3\x91\x18\x7d\x71\xee\xa8\x12\x4c\x6c\x46\x42\x7d\xc3\xb2\xac\x1b\xae\xf5\x76\x55\xb0\x61\x77\xc2\xbc\x64\xdd\xda\x77\xa9\xff\x02\x6a\x16\x36\xda\x73\xbf\x67\x7a\x6d\x3b\xc6\x3a\x75\x59\x5e\x3b\x29\x81\xc8\x30\x63\x89\xd8\x96\xae\x9d\x8c\x40\x33\xb7\x7e\xea\x93\x78\x59\x2a\x5c\x2d\x13\x99\xda\xf4\x5b\x06\xf7\xd4\x13\x29\x0c\x0a\x63\x1b\x8e\xdd\xb4\x5a\x86\x56\xa1\x13\xab\x8b\xad\x19\xb8\x35\x6b\xda\x59\x58\xea\x44\xb1\xf2\xd8\xe9\xac\x87\xf0\x4f\xba\xa5\xb5\xb4\x09\xa6\x90\x69\xc5\x31\xc0\xe7\x52\x2a\xa3\x21\x86\xcf\x27\x07\x96\x30\x11\x64\x95\x70\x1c\x80\xf9\x6d\x6b\xcd\x3e\x0a\x4d\xa5\x44\x4f\x68\x9f\xf3\x9c\x8c\xe0\xf1\xe3\xdd\xc0\xba\x1d\x99\x11\xcc\x66\x43\xeb\x89\xe4\x11\x3c\x7a\x4b\x7d\xe9\xf2\xa4\xba\x2f\xad\x51\x87\x2d\x8f\xe5\xe3\xe3\x4a\x12\xc1\x8f\xf7\xc3\x5b\x9a\x6e\x3a\x4b\x50\x18\x54\x33\xef\xbe\x83\x5f\x7d\x24\x3c\x8b\x88\x08\x66\x25\x35\xf9\x48\x78\x9f\x70\x1f\xc1\x2c\x63\x1c\xd7\x23\x3b\xbf\xd8\xbb\x2c\xed\x88\x65\x52\x8c\x84\x60\xdb\x55\x04\xdd\x7e\x35\x99\xcf\x87\xfb\x81\x84\xbe\x3c\xd4\xba\x8e\xa7\x0e\xfc\x55\x6a\x39\x08\xdd\x9a\x19\x3e\x68\xef\x28\x33\x4c\x6c\x6c\xe9\xb4\x7f\x87\xaf\x7f\x44\xe0\x66\xe4\xe5\x66\x5f\x3f\xf0\x73\xe6\xb2\xf1\xd8\x7d\x9d\x6d\x87\x1b\xcf\x59\xeb\x8b\xb4\x8e\x7a\xb5\xd8\xa0\xf9\xdd\x1e\xf5\xad\x23\xf1\x70\x0f\xb0\x0f\x47\x03\x26\xa7\x06\x62\x30\x39\xd3\x37\x97\x49\xcb\x99\x0e\xe8\x33\x93\xda\x9b\xf9\xc0\x5e\xe2\xe7\xb3\x90\x96\x2c\x74\xf1\x87\xe7\x06\x32\xbb\xf5\xab\x98\x1c\xc5\x5c\xa1\x2e\xa5\xd0\x08\xf1\x6a\x04\x4a\x2c\x83\xd3\xce\xc0\x56\x2e\x70\x2d\x37\x8e\x2d\x5c\x7d\xe7\xe9\x86\x4e\x4d\x70\x0e\x07\x62\xe8\x9a\x72\x7f\xec\xca\xa0\x95\x03\x20\xd7\x38\xe1\xc6\x5d\x1b\x7b\x51\x16\x7a\xe3\x3f\x3c\x74\x6a\xd9\x91\x76\x15\x7a\x90\xae\xef\x65\xae\xac\x6f\x7a\xad\xdd\x1c\x85\xbe\x7c\xb8\xf2\x9d\x81\x6f\xcb\x7c\xdc\x7e\xb1\x37\x91\x42\x4b\x8e\x81\xbd\xb0\xcc\x7b\x8a\xa3\xc1\x35\x9f\x15\xff\x18\x6b\xb6\xda\x2d\xbf\x76\xc8\x40\x1c\xc7\x40\xc8\x50\xa9\xeb\xdc\x93\xf7\x1c\xa9\x46\xdf\x37\xd8\xed\x2b\xaf\x5e\x3d\xfe\x2e\x96\x0e\xff\x02\xfe\x9b\x64\xcc\xee\xe0\x73\x7b\x56\xf6\xce\x75\xf8\x0f\xb9\x71\x3d\x39\x7a\xa8\x9a\x0f\xf0\x63\x04\xca\xdf\x0c\x41\x8e\x5f\xa1\x53\x20\x3c\x61\xac\xdd\xed\x03\x8e\x62\x63\x72\x97\xbb\xc1\xcc\x79\xb1\xe6\xd4\xbf\x23\xfe\xb3\x5c\x8f\xb2\x6f\x11\xf9\x7d\xba\xf6\xd7\x5f\xcc\x8c\x63\x89\x26\xa8\x71\x57\x0f\xe0\x8b\x22\x7d\x75\xca\x74\xfa\x63\xc7\xcc\xff\x81\x20\xfd\x6f\xcd\xa1\x61\xe1\xbb\xb6\x34\x10\x68\xcd\x83\x47\x67\xe4\x63\xe0\xee\xb9\xcd\xae\x2b\xec\xb9\xcb\xcd\x84\x35\x7b\x6b\xf6\x9b\xf2\x5d\xbf\xac\x31\x55\xe1\xf4\xec\x3c\xff\x4f\x43\x1b\x6a\x2a\x3d\x98\x80\xef\x15\x66\x3a\x38\xdd\x5e\x9b\xb7\x96\xe2\xab\x31\x67\xfe\xff\x3e\xcc\x95\xdc\x0d\x7b\x6c\xa3\x1c\x62\x78\xfc\x78\xb1\x2d\x93\x0a\xe6\x5b\xaa\x80\x01\x13\x30\x64\xcc\x6b\x30\x28\x2b\x9d\x3b\xff\x8f\xac\x95\x61\x4f\x7b\x38\x5c\x71\xe3\x94\x95\x30\x98\x8e\x35\x59\x17\x40\xfb\x0a\x3a\x3f\xc3\xb2\xb6\x79\xb8\x59\x86\xf5\x77\xec\xea\xef\x00\x00\x00\xff\xff\xbd\x63\xfd\x51\x79\x16\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5753, mode: os.FileMode(420), modTime: time.Unix(1587883976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/crud.html":    viewLayoutCrudHtml,
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"crud.html":    &bintree{viewLayoutCrudHtml, map[string]*bintree{}},
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
