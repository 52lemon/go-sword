// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x1a\xdb\x6e\xe3\xb8\xf5\x3d\x5f\x71\xca\x16\xb5\x03\x8c\x64\x4f\x80\x9d\x5d\x68\x2c\x63\x8b\x19\xa0\x2f\xbb\xc5\x16\xdb\x3e\x05\x81\xc1\x48\x47\x12\x77\x68\x52\x20\xe9\x38\xe9\x6c\xfe\xbd\x20\x75\xb1\x24\x53\x92\x33\xb3\x97\xe8\x61\x22\x1d\x1e\x9e\xfb\x8d\xf4\x6c\xb4\x79\xe2\xb8\xbd\xba\x02\x00\x08\xd9\xc3\x21\x30\xf4\x9e\x23\x84\x29\xee\x65\xf5\x1e\x30\x91\xc9\x20\x41\xce\x03\x41\xf7\x08\x9f\x1d\xae\x7d\xee\x69\xf2\x29\x57\xf2\x20\xd2\x20\x91\x5c\xaa\x08\xfe\x7a\x93\xde\x7f\x9b\x7d\xf3\xbe\x45\x69\xe0\x59\x96\x55\xc0\xe7\x0b\x59\xd1\x7c\x86\x53\x96\xbd\x7b\xb7\x5e\xff\x16\x9c\xd2\x54\xa1\xd6\xd3\xdc\xde\x7e\xf7\xed\x24\xab\xcd\xaa\x36\xe4\xc6\xe0\xbe\xe4\xd4\xe0\xd6\xad\x6c\x52\xf6\x00\x6e\x29\x26\x7b\xaa\x72\x26\x02\x23\xcb\x08\xbe\x59\x97\x8f\x64\xdb\x52\xdc\xb0\x40\xc9\xe3\xe9\xbb\x86\x25\x92\x83\x2e\xa9\x88\xc9\xdb\x1b\xd2\x5f\xad\x31\x32\xa9\xf6\x10\x71\x7a\x8f\x3c\x38\xb2\xd4\x14\x31\xb9\x59\xaf\x09\xec\xd1\x14\x32\x8d\x49\x29\xb5\xf1\xec\xec\xec\x0e\x98\xc1\x3d\x38\x0a\x31\xf9\xf1\xe9\xe7\x7f\xff\x00\xce\x42\x23\xbb\xea\x9d\xf4\x60\x64\x90\xc8\x7d\xc9\xd1\x20\x44\x29\x35\x34\x26\x6e\xdf\x8e\x33\x6d\x08\x3c\x04\x7b\x99\x5a\x92\x15\xd0\x46\x0e\x81\xef\xa5\x08\x34\x72\x4c\x4c\x4c\xaa\xbf\xff\xb1\xab\xcb\x6b\x32\xca\xeb\xec\x29\x39\x4d\xb0\x90\x3c\x45\x15\x93\x0f\x9c\x25\x9f\xa0\x40\x85\x10\x86\x21\xd9\x6e\x56\x03\xd1\x46\x54\x5f\x75\x74\x9f\xb7\xce\xa4\x25\xee\x0f\xc6\x48\x01\xe6\xa9\xc4\x98\x94\x8a\xed\xa9\x7a\x22\xf0\x7d\x62\x25\xb3\x00\x7c\x60\x78\x24\xdb\x9f\xaa\x17\xcb\xb9\xda\x71\x39\x51\x7d\x48\x12\xd4\xfa\x44\x34\x47\x81\x8a\x1a\x24\x10\xa5\x4c\x5b\x0b\xa6\x31\x61\x7a\xd7\x7c\xec\x1a\x84\xdd\xbd\x11\x64\xfb\xcf\xfa\x6b\x9c\xe1\x8c\x50\x33\xe6\x6a\x96\xbd\x01\x4a\x39\x2a\x53\x2b\x42\x40\x17\xf2\x18\xb0\x64\x94\x91\x0d\x76\xd0\x5c\x9a\x98\xa4\xa8\x13\xeb\x50\x0b\xf2\xf3\x74\xa4\x07\x39\xb3\x72\x49\xd3\x49\xac\xd5\x20\xb3\x66\x33\xed\x66\xed\xcb\xb4\x4e\x1a\x1b\x7c\x34\x01\xe5\x2c\x17\x11\x28\x96\x17\x13\xf9\xd5\x73\xe3\x91\x2a\xc1\x44\x7e\x72\x63\x41\x45\xca\xf1\x67\x97\x07\xcb\x45\xca\xb2\x6c\x71\x4d\xb6\xd5\x37\xd8\x4f\xc8\x18\x47\x3d\xeb\x9d\x01\x1f\x5b\xd9\xc6\x98\x08\x3c\x76\x78\x08\x3c\x7e\x19\x8b\xb3\x88\x3c\x57\xa5\xcf\xc9\x69\xf3\x77\xcb\xf0\x72\x56\x3e\xda\xff\xe0\x7c\x69\xd4\x01\x4f\x94\x29\xe7\x5f\x4f\x32\xa3\x5c\x5b\x9a\xff\x15\xfa\x22\xaa\x9b\x55\xca\x1e\x3c\xe0\x7b\xe5\xcd\x81\xaa\xfb\x44\x89\xe4\x87\xbd\xd0\x4d\x49\x4c\x24\x27\xfd\xca\x69\xdf\x09\x28\xcc\x9a\xea\xc8\xa4\x98\xa8\x8c\xa7\x6a\xca\xa4\x08\x92\x82\x8a\x1c\x1b\x52\x2d\x7c\x57\xc1\xc7\x62\xb4\xe9\x56\x2e\xe9\x02\x9d\x48\xeb\xde\xcf\xa0\xe4\xf1\x0d\x30\x91\xe2\x23\x3c\x93\x3a\x21\x2b\xc2\x95\x49\xa6\x9b\x83\x27\x1c\x35\xfb\x9f\x8d\x9b\x3d\xe5\xfc\x14\x35\xb2\x44\xf1\xa3\x4c\x29\x5f\x3a\x56\xd7\x64\xfb\x11\x0d\x65\xb3\x0e\xed\x4b\xfe\x10\xb0\x2c\x26\x4a\x1e\x43\x57\x02\xb3\x6c\x42\x38\x9f\x80\x6d\x5e\x8e\xca\xf8\x91\x65\x59\x5f\x4e\xcb\xe6\x22\x29\x57\xfd\x71\xe0\xc5\xeb\x2f\xf0\x4f\xe5\xf2\x29\xcf\x7c\x28\x30\xf9\x74\x2f\x1f\x4f\xcd\x59\x33\x91\xdb\x56\xdf\xac\x6c\x56\xcd\xdb\xcb\xe5\xb5\xf6\x70\x31\xf2\x05\x25\x79\x6f\xad\x7b\x12\x8b\xe9\x9d\xed\x14\xbb\xd4\x85\xc3\xce\x41\x09\x44\x86\x19\x5b\x80\xbb\xd0\x9d\x83\x11\xa8\x67\x9f\xef\x86\xc5\x7b\x53\x2a\x1b\x21\x05\xcb\x0b\x6e\x6b\xf5\x2f\x7a\xb0\x3f\x91\xc2\xa0\x30\x64\xbb\x49\x64\x8a\xdb\xcd\xaa\xfe\x53\x2a\xec\x8b\xec\x44\xbc\x48\x68\x96\x65\x67\x22\xb7\xb0\x59\x81\x2d\xff\xc0\xd5\xcb\x48\xf2\x34\xd0\x46\x31\x91\xc7\xc4\xd6\xe9\x9d\xe4\x69\x2b\x30\x44\x02\x8f\xfd\x65\x81\xc7\xce\xb2\x7b\x7b\x34\x31\x79\xbb\x26\x2b\xaf\x2e\xd5\x84\x5a\xd5\xb2\xae\x67\x37\x3a\x51\xac\x6c\xba\xb6\x25\xb2\xfa\x85\x3e\xd0\x0a\x5a\xcb\xbb\x97\xe9\x81\x63\x88\x8f\xa5\x54\x46\x43\xdc\x19\x9f\x6d\x19\x8b\x20\x3b\x08\x57\x80\x60\x79\xdd\x59\xb3\x8f\x42\x73\x50\x62\x00\xb4\xcf\x50\xc7\x08\x08\x79\xe3\xc7\xea\xa8\xea\xc7\x3a\xf7\x46\x04\xae\xcc\x9f\xa3\x0e\x9d\xe3\x27\x78\x1a\x6e\x23\xb8\xbd\x1b\x5b\xb7\x73\x6e\x04\x8b\xc5\xd8\x7a\x22\x79\x04\xb7\xde\xdc\x3a\xb7\x47\xbb\xf5\xa9\xb4\x44\x5d\xbe\x7b\x28\x37\x8f\x0b\xa9\x08\xde\xad\xc7\x51\xea\xb1\x65\x91\xa0\x30\xa8\x16\x5e\xbc\x67\xff\xf6\x09\xf1\x2a\xa3\x2d\x4a\x6a\x8a\x09\xf1\x3e\xe1\x53\x04\x0b\xe7\xbd\x09\xcc\x2f\xe6\x2e\x4b\x3b\xe4\x32\x29\x26\x44\xb0\x85\x32\x82\x7e\x27\x9b\xb5\xe7\xcd\x7a\xc4\xa0\x2f\x17\xb5\xf2\x63\xdb\x9b\xff\x14\x5f\x8e\x86\x6e\x95\xb6\xbe\xd0\x3e\x52\x66\x98\xc8\xdd\xa8\xe8\xc7\xf0\x15\xec\xf1\x7c\xf3\xd4\x5f\x7f\xce\x9c\x57\x7a\x3f\xde\xd8\xd9\x27\x02\x3b\x2c\xf6\xf1\x9f\xaf\x3c\xc6\xa9\x8e\xcb\x3a\x1a\x38\x2f\xc7\xea\x80\xfa\x83\xcb\xfa\xf1\x8a\x66\x1f\x8e\x06\x4c\x41\x0d\xc4\x60\x0a\xa6\xaf\xce\xad\x5c\x30\x1d\xd2\x47\x26\xb5\xd7\x55\xa1\x3d\xaa\x2f\x17\x2b\x5a\xb2\x95\x53\x78\x75\xaa\x38\x8b\x6b\xff\x16\x53\xa0\x58\x2a\xd4\xa5\x14\x1a\x21\xde\x4e\xc4\x1e\xcb\xa0\xc5\x0c\xad\xab\x43\xdb\x68\x20\x8e\x6d\x7c\xfb\xf4\xe9\x8b\x4e\x4d\x78\x12\x07\x62\xe8\x93\x72\xff\xd8\x95\x51\x2a\xcf\x80\x5c\xe3\x0c\x1b\x77\xa0\x1b\x48\xb9\xd7\xb9\x5f\x79\xe8\xf9\xb2\x07\xed\x6f\x18\xe4\x40\x35\xfb\x3b\xb7\x7e\x1c\x34\x2a\xd3\x00\x7d\xf6\xc8\xa4\x82\x25\x03\x26\x60\x12\x0d\x6a\x5b\xb7\x48\xb7\xec\xce\x0e\xa6\x02\x8f\x53\x56\xee\xa2\xdf\x2e\x12\xe4\xfc\x03\xa7\x5a\xff\x8b\xee\x71\x71\x67\xbb\x6b\x5b\x37\x23\x58\x8c\xde\xcd\x2d\x9e\xdf\xfb\x2d\x52\x59\xdf\x27\x97\x6d\x7e\xbf\xaf\x60\x34\x1f\x97\xeb\x0c\x7a\x0e\x71\x69\x73\xaa\x50\x36\xbd\x1a\x91\xce\x70\x13\x29\xb4\xe4\x18\x5a\xe6\xcb\xc1\xc6\xc9\xa0\xa8\xaf\x69\xbe\x3a\xc7\x9d\x85\x4f\x7c\xdd\x7d\x69\x1c\xc7\x40\xc8\x98\x8d\xab\x98\x27\x3f\x71\xa4\x1a\x21\x29\xa4\xd4\x08\xdd\x6b\xb8\x6b\xbf\xe9\xaa\x21\xca\x63\xbf\xaf\xaf\x3b\xb5\x31\x16\x6f\xe0\x73\x77\xa8\x19\xe8\xf5\xfc\x3b\xd6\xa4\xcb\x8b\xd2\x20\x9b\x97\x23\x75\x69\xbc\x84\xb4\x94\xc6\x7a\x08\xc4\x55\x1f\xf3\xbb\x01\x5e\x55\x6d\x6b\xe4\x9e\x8b\xe3\x36\x4c\xbb\x9d\x3d\xe4\x28\x72\x53\x38\xf3\x8f\x1a\xdf\x1b\xae\x6e\xfb\x5f\x88\x5f\x97\xcb\x03\xf5\x35\x26\xcf\x30\xe3\x87\xeb\x2f\x4e\xae\xc6\x45\x33\xd9\xf5\x06\xea\x69\xeb\xcc\x4d\x7f\x7a\xde\xf5\x8a\x6c\x8f\xcc\x44\x30\xbf\x9a\x14\x19\xde\x39\x79\x64\x72\x26\xf7\x0d\xa9\x75\x10\x74\x9a\xca\xad\x23\x72\x17\xba\x26\x58\x63\x5d\x40\xcf\x8d\xb2\x33\xd4\x6c\x4b\xf5\x93\xf2\x0d\xdb\x96\x98\x3a\xe0\x9c\xe6\xc3\x9b\xac\x31\xed\x87\x67\xec\xaf\xd1\x7c\x78\xaa\x9f\xa1\xd5\xc1\x9c\x51\xbf\x3d\xb6\xfb\x94\x3f\x19\x7e\x70\xba\x7f\xa9\xd9\xbd\xe3\x63\x7d\xd3\xad\x0d\x35\x07\x3d\x6a\x45\xff\x35\xb3\xbf\xf0\x55\xa4\xaa\x7a\xe7\x2e\x31\xc7\xd2\x30\x93\x6a\xf9\x40\x15\xb8\x51\x74\xa8\xca\x54\xee\xb2\x6c\x38\x12\x5d\x38\x02\xb6\xfa\xfc\x4d\x61\xa6\xc3\xf6\xf8\x1a\x1a\x99\xe7\xad\x2d\xd8\x8b\xf3\xf4\xd2\x9e\xd0\x35\x8d\xc0\xe3\x1f\x68\x99\x99\xa1\xfd\x35\x19\xa6\xfe\xcd\xe5\x8f\x35\x0e\xfc\xfa\xeb\x79\x32\xbd\xb6\x98\xea\x7d\x8d\x27\xb3\x4d\xd0\x99\x7c\x1e\xca\xaa\x87\x1b\xdf\x5f\x4d\x71\xf3\xff\x32\xb3\x54\xf2\x38\xce\xb2\xdb\xf9\x21\x86\xdb\x3b\xff\xb9\xb4\xf5\xec\x18\x31\x2f\xc1\xb0\x3c\xe8\xc2\xf1\xb7\x5e\x6b\xcb\x9f\x67\x68\x9a\xb4\x62\xef\x97\x7c\x0f\xef\xde\xc0\x70\x73\xee\xd2\xa6\xaa\x8f\x8d\xdf\xe7\x8d\xcd\x7b\x85\x23\x0f\xc2\x60\x3a\x35\xfa\x3a\x46\xdd\x3b\x9d\xe5\x49\x98\x8a\xa6\xfb\x8f\x1c\xee\x9a\x7b\xfb\xff\x00\x00\x00\xff\xff\x05\x25\x9e\x22\x1a\x23\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 8986, mode: os.FileMode(420), modTime: time.Unix(1587985372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
