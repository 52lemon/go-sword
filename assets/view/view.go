// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\x5f\xe2\x0b\xd8\x01\x62\xd9\x0b\xb0\x61\x50\x2d\xa3\xc3\x0a\xec\xa5\x05\x3a\x74\x7b\x0a\x0a\x83\x91\x4e\x16\x5b\x8a\x14\x48\xda\x8e\x17\xf8\x7f\x1f\x48\x49\xb6\x24\x53\x92\xd3\x6d\x68\xf4\xd0\x5a\xc7\xfb\xc5\xbb\xfb\xdc\x9d\xb2\x34\x98\x17\x9c\x1a\x5c\xdd\x00\x00\x2c\x13\xb6\x03\x6d\x0e\x1c\x23\x92\x53\xb5\x61\x62\x66\x64\x11\xc2\x8f\x8b\xe2\x89\x94\x2c\x8e\x8d\xcd\x94\xdc\x9f\xdf\x2b\x5a\x2c\x39\xe8\x82\x8a\x88\xfc\x70\x4f\xda\xa7\x15\x47\x2a\x55\x0e\x21\xa7\x8f\xc8\x67\x7b\x96\x98\x2c\x22\xf7\x8b\x05\x81\x1c\x4d\x26\x93\x88\x14\x52\x1b\x8f\x64\x43\x7a\xc6\x0c\xe6\xe0\x34\x44\xe4\xc3\xe1\xd3\xef\xef\xc1\xd0\x47\x8e\x3d\x52\x95\x24\xdd\x1a\x39\x8b\x65\x5e\x70\x34\x08\x61\x42\x0d\x8d\x88\x93\x5b\x73\xa6\x0d\x81\xdd\x2c\x97\x89\x55\x59\x12\x05\xcd\x91\xf4\x2a\xbc\x78\x0a\x4e\x63\xcc\x24\x4f\x50\x45\xe4\x57\xce\xe2\xaf\x90\xa1\x42\x08\x82\x80\xac\x96\xf3\x8e\xfd\x9e\xfb\xcd\x1b\x17\x1c\x0f\xc1\xe0\x75\x1f\xb7\xc6\x48\x01\xe6\x50\x60\x44\x0a\xc5\x72\xaa\x0e\x04\xde\xc6\xd6\x33\x4b\xc0\x1d\xc3\x3d\x59\x7d\x2c\x7f\x58\xcb\xa5\xc4\xf5\x4a\xf5\x36\x8e\x51\xeb\xb3\xd2\x0d\x0a\x54\xd4\x20\x81\x30\x61\xda\x06\x31\x89\x08\xd3\xeb\xfa\x65\x5d\x33\xac\x1f\x8d\x20\xab\xdf\xaa\xb7\x31\xdb\x23\x51\xa9\x8f\xbd\xc5\x46\x39\x2a\x53\xf9\x4b\x40\x67\x72\x3f\x63\x71\xaf\x21\x5b\xb8\xa0\xb9\x34\x11\x49\x50\xc7\x36\x6f\x96\xe4\xb7\xe9\x54\x77\xea\x7f\xee\x00\xd0\x00\xc9\xbc\x83\x92\x51\xd4\xdc\x2f\x7c\xa8\x69\x40\xd2\xe0\x93\x99\x51\xce\x36\x22\x04\xc5\x36\xd9\x00\x56\xaa\x6c\xd5\xe9\xc9\xa8\x48\x38\x7e\x42\x8e\xb1\xf9\x85\xf3\xa9\x51\x5b\xbc\x25\xab\x92\x00\x94\xf3\xd1\x44\x8c\xaa\x4c\x29\xd7\x56\xe7\x9f\x42\x5f\xa5\x75\x39\x4f\xd8\xce\x43\x7e\x54\xde\x6c\x3a\x60\x42\x18\x4b\xbe\xcd\x85\xae\x81\x1a\x4b\x4e\xda\x78\xb6\xbf\x09\x28\x4c\x23\x52\xfa\xc1\xa4\x20\xf0\x56\x8a\xd9\xe9\x75\x16\x67\x54\x6c\xb0\x96\x38\xd1\xd7\x25\xbd\x2f\xa8\x75\xab\x74\x55\x32\xd3\xb1\xb4\x85\xf5\x0c\x4a\xee\xef\x80\x89\x04\x9f\xe0\x48\xaa\x0a\x2a\x15\x97\x37\x1f\xee\x4c\x2d\x54\x31\x91\x4a\x02\x9a\xfd\x65\x11\x96\x53\xce\xcf\xf8\x92\x05\x8a\x0f\x32\xa1\x7c\xea\x4c\xdd\x92\xd5\x3b\x34\x94\x8d\xe6\xad\xed\xf9\x6e\xc6\xd2\x88\x28\xb9\x0f\x1c\x34\xd3\x14\xa2\x08\x26\x87\xc9\x80\x8f\x3e\x3f\xf7\x54\x09\x26\x36\x03\xae\xbe\x63\x69\xda\x76\xd7\x5a\xbb\xca\xd9\x79\x7b\x24\xbd\xe4\xdc\xea\x77\xa1\xff\x06\x68\xe6\xd6\xdb\xf3\x1c\x60\x7a\x6d\x3b\xc6\x3a\x71\x51\x5e\x3b\x2a\x81\xd0\x30\x63\x81\xd8\xa4\xae\x1d\x8d\x40\x35\xcf\x7e\xee\x82\x78\x59\x28\x1b\xf8\x8c\x6d\x32\x6e\x31\xfb\x45\x77\xe4\x63\x29\x0c\x0a\x43\x56\xcb\x58\x26\xb8\x5a\xce\xab\xff\x0a\x85\x6d\x97\x9d\x8b\xd5\xa0\x2e\xc1\xd3\x0c\xc6\x52\xc7\x8a\x15\x75\xc3\xb3\xad\x62\xfe\x85\xee\x68\x49\xad\x7c\xca\x65\xb2\xe5\x18\xe0\x53\x21\x95\xd1\x10\xc1\xf3\xc9\x80\xc5\x4d\x08\xe9\x56\x38\x28\xc0\xf4\xb6\x71\x66\x1f\x85\x66\xab\x44\x87\x68\x9f\xf3\x18\x0d\xe1\xe1\xf3\x5d\xcf\xb9\x9d\xa8\x21\x4c\x26\x7d\xe7\xb1\xe4\x21\x3c\x78\x33\x7e\x69\xf2\x24\x7a\x28\xac\x52\x57\x62\x1e\xcd\xf5\xe3\x32\x13\xc2\x4f\x8b\x7e\x96\xaa\xa9\x4e\x62\x14\x06\xd5\xc4\xcb\x77\xf4\x8b\x0f\xb8\x67\x0b\x23\x84\x49\x41\x4d\x36\xe0\xde\x57\x3c\x84\x30\x49\x19\xc7\xf5\x00\xe7\x37\x5b\x97\x85\x9d\xb4\x4c\x8a\x01\x17\x6c\xd7\x0a\xa1\xdd\xb6\x46\xe3\x79\xbf\xe8\x09\xe8\xcb\x5d\x2d\xf3\x78\x6a\xc4\xdf\x25\x97\xbd\xa5\x5b\x22\xc3\x57\xda\x7b\xca\x0c\x13\x1b\x9b\x3a\xed\xe7\xf0\xb5\x91\x10\xdc\xa8\xbc\x64\xf6\x75\x05\x3f\x66\x2e\xfb\x8f\x9f\xaf\x6f\x01\x0b\xed\xfc\x6f\xb3\x1f\x6f\x3c\xb1\x29\xf7\x72\x1d\x76\x72\xb7\x41\xf3\x87\x55\xfa\xde\x81\xbe\xbf\x67\xd8\x87\xa3\x01\x93\x51\x03\x11\x98\x8c\xe9\x9b\xcb\x20\x67\x4c\x07\x7d\x8e\x5a\x29\xb5\xc5\x1e\x29\xfa\xc4\xa4\xf6\xe6\x37\xb0\x5f\x12\xd3\xc9\x9c\x16\x6c\xee\xa2\x34\x3f\xb7\xa9\xc9\xad\x5f\xc4\x64\x28\xa6\x0a\x75\x21\x85\x46\x88\x56\x03\x05\xcb\x52\x38\x71\x06\xb6\x3e\x02\xdb\xb3\xed\x30\xbd\x5f\x2c\x7c\x51\x68\xbb\x4e\x4d\x70\x76\x07\x22\x68\xab\x72\xff\xd8\x93\x5e\x2d\x47\x40\xae\x71\xc4\x8c\xdb\x51\x3b\x5e\xe6\x7a\xe3\xbf\x3c\xb4\x2a\xa0\x45\x6d\x0b\x74\x80\x53\x2e\x81\xae\x18\xde\x75\x06\x88\xa9\x89\xbe\x78\xb8\xf4\x9d\xe1\x65\xd3\x5c\xb3\x5f\xf0\xc6\x52\x68\xc9\x31\xb0\xdb\xd1\xb4\x23\x38\xe8\x5c\xf5\xa1\xf3\x8f\x2b\xd4\x66\xbb\x61\xd7\x8e\x32\x88\xa2\x08\x08\xe9\x4b\x75\x19\x7b\xf2\x91\x23\xd5\x08\x71\x26\xa5\x46\x68\x7e\xad\xde\xbe\xf1\xca\x95\x43\xf6\xe2\xe8\xf8\x2f\xd4\x7f\x15\x8c\xc9\x1d\x3c\x37\x27\x72\xe7\x5e\xc7\xff\x10\x1b\xd7\x83\xa3\x53\x55\xd3\x1e\x7c\xf4\x97\xf2\x49\xd3\x40\x5f\x71\x4d\xd8\x9f\x06\x78\x55\x18\xab\xfd\x1e\xab\xe3\x53\x99\x36\xc7\x52\xc0\x51\x6c\x4c\xe6\xc2\xdf\x1b\x7c\x6f\xb9\x3a\xf1\xff\x11\xff\x5d\xae\x2f\xd4\xd7\x08\x9e\x2e\xe2\xbb\xe7\x2f\x06\x57\x9d\xa2\x11\x74\xdd\x95\x9b\xc2\x45\x92\xbe\x3b\xea\x5a\x2d\xb6\xa5\x66\xa0\x94\x5f\x0d\x40\xba\xdf\xc6\x7d\xf3\xc6\xb7\x5f\x55\x25\xd0\x18\x29\x0f\x4e\xc9\xe7\xc0\x2d\xe4\x15\xd7\x15\xfa\xdc\x16\x36\xa2\xcd\xae\xf7\xbd\xfb\xcf\xc5\x9e\x58\xef\x3e\x03\x37\xef\xfe\x0d\x46\x1b\x6a\xb6\xba\x37\x00\xff\x57\x98\xea\xe0\xb4\x66\x57\xbf\x1a\x82\x6f\x86\x8c\xf9\xff\x5a\x32\x55\x72\xdf\x6f\xb1\x59\xe5\x10\xc1\xc3\xe7\x0b\xb6\x54\x2a\x98\xee\xa8\x02\x06\x4c\x40\x9f\x32\xaf\xc2\xa0\xd8\xea\xcc\xd9\x7f\x60\x8d\x08\x7b\xda\xc3\xf1\x8a\x55\x57\x6e\x85\xc1\x64\xa8\xc9\x3a\x07\x9a\xbb\xef\xf4\x5c\x96\xa5\xce\xe3\xcd\x72\x5e\x7e\x70\xaf\xfe\x0e\x00\x00\xff\xff\xb7\x48\x96\x67\x5a\x17\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5978, mode: os.FileMode(420), modTime: time.Unix(1587976612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
