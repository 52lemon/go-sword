// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/crud.html
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutCrudHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x04\x04\x00\x00\xff\xff\xb7\xef\xdc\x83\x01\x00\x00\x00")

func viewLayoutCrudHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutCrudHtml,
		"view/layout/crud.html",
	)
}

func viewLayoutCrudHtml() (*asset, error) {
	bytes, err := viewLayoutCrudHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/crud.html", size: 1, mode: os.FileMode(420), modTime: time.Unix(1587639591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x8f\xa3\x36\x14\xbe\xef\x5f\xf1\xea\x1e\x98\xa9\x86\x90\x9d\xee\xc9\x0d\xe9\xa1\xbd\x56\xaa\x56\xed\x69\xb5\xaa\x1c\xfc\x00\x6b\x8c\x8d\x6c\xc3\xcc\x34\xca\xff\x5e\xd9\x90\x04\x02\x24\x19\xa9\x3e\x44\xe4\xf3\xfb\xe5\xef\x7d\x3c\xbc\xb1\xee\x5d\x22\xd8\x4c\xd7\xc8\xb7\x9f\x00\x00\x56\x92\xbd\xeb\xc6\xc5\x8a\xb5\xb0\x0f\x88\x5f\xaf\x82\xbb\x92\xc2\x97\xe7\x75\xfd\xf6\xcb\x09\xad\x98\x29\x84\xa2\xb0\x06\xd6\x38\x7d\x89\xc7\x46\x14\xa5\xa3\x30\xf6\xc9\xb4\xd4\x86\xc2\x6b\x29\x1c\x76\xe8\xe1\xd3\x28\xb1\xd4\x85\x1e\x64\xde\x69\xc3\xd1\xc4\x86\x71\xd1\x58\x0a\x3f\x0f\x63\xe5\x52\x33\x47\x41\x62\xee\x8e\xa1\x36\x49\x38\xd2\xf6\xd3\xc6\x61\x55\x4b\xe6\xb0\x3b\xd6\x86\x8b\x76\x7b\x72\xdc\x88\xb8\xcb\x76\x86\x7a\xb8\x44\xc6\xd1\x00\x0d\x51\x52\xb2\xdf\xb1\xec\xa5\x30\xba\x51\x9c\x46\x3f\xae\xd7\xeb\xe8\x40\xc6\x3e\xbd\x5f\x85\xaa\x81\x4a\x73\x4c\x49\xa9\x8d\xf8\x57\x2b\xc7\x24\x01\x57\x62\x85\x29\xe1\xcc\xbc\x10\x60\x99\x13\x2d\xc6\x8a\x79\xe8\x33\xf9\x60\x92\x90\xa8\x7c\x86\x4c\x32\x6b\x53\x32\x60\x8b\x40\x1f\xa8\xe3\xb6\xa3\x96\x6c\xff\x12\x4e\xe2\x26\x29\x9f\x17\x62\x71\xd1\x5e\x04\x53\xac\x5d\x4a\x9c\x8c\xf8\x3b\xc3\xdd\xc9\x2f\x68\x4c\x8e\x3c\x4e\xe8\x9d\x63\xbd\xdf\xb2\xc2\x13\x5f\x0a\x8e\xb1\x33\xa2\x28\x86\x5d\x80\x12\x3b\x2d\x45\x9f\xd7\xeb\xb6\x8c\x9e\x46\x8c\xe5\x79\xbe\xcc\x58\xdf\x9a\xbe\x11\xd2\x87\x21\x9d\x9c\x53\xe2\x55\xbb\xe0\x17\x7c\x8f\x12\x82\x36\xce\xb5\x49\x89\x70\x58\x81\x50\xe0\x23\x5e\xf1\x1b\xe4\x8d\x83\x4b\x1b\x8b\x3c\x25\xee\xbd\x46\x9d\x3f\x78\x64\x65\x9b\xdd\x3f\x7e\xff\x11\xd2\x14\xa2\x46\x71\xcc\x85\x42\x1e\x11\xa0\x9d\x3c\x82\x95\x7f\xbc\x91\xa7\xcf\x25\x32\xad\x80\xfa\x0c\xbd\xab\x07\xc8\xd6\x77\xc2\x3f\xdd\x11\xc3\xe8\xc6\xa1\x89\xa5\x50\x2f\x40\x9d\x4e\x49\x81\xee\xab\xc7\xfe\x64\xae\x7c\x38\x95\xf3\x48\xc0\xb1\x22\x25\xb6\x66\x8a\x6c\xf7\xfb\xb0\xe1\xbc\xd2\x0e\x87\x4d\x32\x08\x72\x83\x9e\x64\xc0\xcf\x4d\x26\x6d\xb3\x0b\x4d\xbc\xc6\xe3\x0f\x63\x1e\xef\x38\xf1\xa9\xbb\x56\x6a\x97\x92\x70\x88\x3b\xfc\xe0\x3e\xc6\xc7\xd4\xdc\xae\x26\x19\xcf\xab\x1b\xd9\x87\xda\x0a\xd2\xb4\xcd\xce\x2b\x73\x44\xca\x49\x4c\xb6\xd9\xdd\xab\x25\xb8\xad\x85\x63\xb4\x4b\x29\x78\xfc\xe3\x4a\x80\x0f\xaa\x21\x39\xc9\xe1\xca\x8b\x7b\x83\xcc\xf9\xb1\x75\x0a\x2f\x26\x93\x0b\x86\xd3\xeb\x3c\x96\x6a\xc6\xb9\x50\x05\x85\x68\x0d\xcf\x5f\xea\xb7\xf0\xb3\x3c\x8a\x7a\x4e\x5a\x81\xaf\xdb\x13\x43\xe1\xdf\x6c\x1d\xb3\x5f\xa8\x19\xfc\x12\xeb\x67\xf5\x90\x84\x8d\xcd\x8c\xa8\xfb\xfd\x4a\xf3\x46\xe2\x0a\xdf\x6a\x6d\x9c\x85\x74\xf0\xb1\xe5\xcc\x31\x0a\x79\xa3\x32\x27\xb4\x82\x87\xc7\xc1\x9e\x5f\x06\x5d\x63\xd4\x05\xe8\x57\x92\x40\xa6\x55\x2e\x0a\x28\xa4\xde\x31\x19\x46\x24\x48\x61\xdd\xc4\xd4\xef\x50\xf8\x36\x8d\xe1\x97\x7f\x75\x28\x44\x42\xdb\xb8\x46\x5d\x4b\x8c\x9e\x66\xed\x82\xce\x28\x44\x7f\x68\x8e\x72\xc1\xc6\x6b\x94\x42\x54\x05\x93\x89\xc5\xe1\xe9\xff\xa9\xe0\xb7\xaf\x7f\xff\x7e\xbd\x80\xcc\x34\x7c\x26\xff\xf7\xa9\xd3\x84\xc5\xa0\x11\x3b\xb1\xeb\xe0\x45\x12\x6b\xe6\xef\x6a\xd1\x4f\x0b\x65\x19\xe4\xc2\x60\xe6\x28\xec\x47\x14\x4d\x87\xd4\xe1\x69\xa6\xd5\x70\x49\xed\x7c\x96\xbe\x88\xe4\x9a\x4d\x63\xa4\x37\x31\xa8\x38\x9a\x5f\xbd\x47\x9a\x74\x4a\x4e\x16\xbb\x76\xbd\xa2\xc0\xf5\xf5\x82\xae\x98\x5c\xa9\x67\xa9\x89\x23\xe8\xcc\xe0\xe1\x69\x70\xe1\xad\xea\xc6\x21\xa7\xb0\x1f\xa0\x15\xba\x52\x73\x4b\x2f\x8e\x33\x1c\xb4\xc3\x17\x31\xcc\xdb\x99\xa3\xb7\xcc\xf4\x6a\x80\x14\x5c\x29\xec\x6a\x41\x32\xb9\x36\xf0\xe0\xad\x85\xff\x4c\x74\x46\x73\x01\xfd\x12\x79\x97\xd0\xdf\x4d\x3a\xcb\x6f\xe2\xfb\x6a\xa9\x84\xe3\xea\x67\xc3\xd9\xc1\xf3\x37\x6b\x3d\x23\xb4\xa9\xc4\xbb\x68\x51\xb4\x44\xf0\xf9\xbe\xdf\x8d\xb6\xff\x02\x00\x00\xff\xff\x83\x3c\xc3\xa2\xcb\x0c\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3275, mode: os.FileMode(420), modTime: time.Unix(1587826511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x8b\xe3\x36\x10\x7f\xdf\x4f\x31\x88\x82\xb3\x70\x89\xb7\xfb\x50\x8a\x2f\x0e\x57\x7a\xd0\x97\x3b\xb8\x72\xed\xd3\xb2\x04\xad\x3d\x8e\xd5\x93\x25\x23\xc9\xc9\xa6\x47\xbe\x7b\x91\x6c\x27\xfe\x23\x3b\x7b\x6d\xa1\x5b\x3f\x04\x67\xa4\xf9\xcd\x68\xe6\x37\xa3\xf1\xda\x60\x51\x72\x6a\x70\x73\x03\x00\xb0\x4e\xd9\xbe\x79\x63\x4b\x25\x0f\xf5\x7b\xf3\x3f\x91\x1c\x74\x49\x45\x4c\xbe\xbf\x27\x97\x95\x66\x35\x93\xaa\x80\x88\xd3\x27\xe4\xcb\x03\x4b\x4d\x1e\x93\xfb\xbb\x3b\x02\x05\x9a\x5c\xa6\x31\x29\xa5\x36\x03\xad\x8e\xe6\x92\x19\x2c\xc0\x69\xc7\xe4\xe3\xf1\xf3\xaf\x1f\xc0\xd0\x27\x8e\x1e\x8d\x46\x8b\x56\x46\x2e\x13\x59\x94\x1c\x0d\x42\x94\x52\x43\x63\xe2\x74\xb6\x9c\x69\x43\x60\xbf\x2c\x64\x6a\xe1\x6a\xa1\xa0\x05\x12\x2f\xd8\xe8\x29\x39\x4d\x30\x97\x3c\x45\x15\x93\x9f\x39\x4b\xbe\x80\x91\x90\xe4\x52\x6a\x84\x9e\x73\xeb\x70\xe0\x88\xe7\x80\x61\xe7\x84\xf3\xe7\x9f\x3c\xeb\x53\x65\x8c\x14\x60\x8e\x25\xc6\xa4\x54\xac\xa0\xea\x48\xe0\x5d\x62\x5d\xb3\x02\xdc\x33\x3c\x90\xcd\xa7\xfa\xc5\x5a\xac\x35\x5e\x06\xa8\xab\x24\x41\xad\x2f\x80\x3b\x14\xa8\xa8\x41\xb2\xf9\xa5\x79\x9b\x83\x9c\x39\x60\xbb\x34\x22\x0b\xe5\xa8\x4c\x63\x9e\x80\xce\xe5\x61\xc9\x12\x2f\xb8\x25\x1c\x68\x2e\x4d\x4c\x52\xd4\x89\x0d\xb9\x15\x8d\xed\x38\xc8\x0e\x5f\x43\x47\xd8\x86\xcc\x61\x87\xcd\xb3\xcc\xbe\xbf\x1b\x32\x3b\x65\x7b\xd0\xe6\xc8\x31\x26\x06\x9f\xcd\x92\x72\xb6\x13\x11\x28\xb6\xcb\x27\xf8\xdc\x04\xb7\x8d\x66\x4e\x45\xca\xf1\x33\x72\x4c\xcc\x4f\x9c\x2f\x8c\xaa\xf0\x96\x6c\x6a\x01\x50\xce\x67\x83\x7b\x15\x2e\xa3\x5c\x5b\xbc\xdf\x85\xbe\x8a\xb8\x0e\xcf\xf5\x7d\x16\x3d\xa9\x51\x76\x1c\xb9\x21\x4a\x24\xaf\x0a\xa1\xdb\x02\x4a\x24\x27\xfd\x3a\xb3\xef\x04\x14\x66\x31\xa9\x6d\x33\x29\x26\x4a\xec\x9d\x14\xcb\xf3\x9e\x65\x92\x53\xb1\xc3\x16\xe6\x2c\xdf\xd6\x72\x5f\x54\xdb\x36\xe5\xa8\xb0\xd4\x89\xb4\xcc\xf9\x0a\x4a\x1e\xde\x00\x13\x29\x3e\xc3\x89\x34\x34\xa9\x41\xeb\xe3\x4f\xb7\x8f\x5e\x05\x30\x91\x49\x02\x9a\xfd\x69\xab\xa1\xa0\x9c\x5f\x6a\x41\x96\x28\x3e\xca\x94\xf2\x85\x33\x73\x4b\x36\xef\xd1\x50\x36\x9b\xb4\xbe\xc7\xfb\x25\xcb\x62\xa2\xe4\x61\xc5\xf4\x36\x65\x59\x06\x71\x0c\xc1\x31\x98\xf0\xcd\xe7\xdf\x81\x2a\xc1\xc4\x6e\xc6\xc5\xf7\x2c\xcb\xfa\x6e\x5a\x4b\x57\x9d\x0c\xfb\xed\xff\x25\x6b\x16\xd3\x85\xf8\x85\xb5\x56\x58\xaf\x2e\xcd\x98\xe9\xad\x2d\xf7\x6d\xea\xa2\xb8\x75\x52\x02\x91\x61\xc6\x56\x58\x57\xba\x75\x32\x02\xcd\x65\xf2\x63\xb7\x32\xd7\xa5\xc2\xcd\x3a\x91\xa9\x0d\xaf\x2d\xcb\x81\x6a\x22\x85\x41\x61\x6c\xb7\xb0\x9b\x36\xeb\xd0\x2a\x9c\xfd\x73\x3e\xb5\x7f\x5d\x49\x74\x4f\xbb\xd6\x89\x62\x65\xdb\x9e\x2c\x7a\xf8\x07\xdd\xd3\x5a\xda\x38\x51\xc8\xb4\xe2\xb8\xc2\xe7\x52\x2a\xa3\x21\x86\xaf\x67\xdf\x6c\x55\x44\x90\x55\xc2\x71\x7a\x71\xdb\x59\xb2\x8f\x42\x53\x29\x31\x10\xda\xe7\x72\x77\x45\xf0\xf0\xf8\x66\x62\xdd\x5e\x63\x51\x10\x4c\x2d\x27\x92\x47\xf0\xe0\x4d\xf6\xd8\xe2\x59\xf5\x58\x62\x04\x81\x63\x8e\x07\xb9\x7d\x5c\x22\x22\xf8\xe1\x6e\x7a\x4b\xd3\x1c\x83\x04\x85\x41\x15\x78\xf7\x9d\xfc\xea\x33\xee\x59\x1e\x44\x10\x94\xd4\xe4\x33\xee\x7d\xc1\x63\x04\x41\xc6\x38\x6e\x67\x76\xfe\x6d\xeb\xb2\xb4\x37\x21\x93\x62\xc6\x05\xdb\x80\x22\xe8\x77\xa0\xab\xf1\xbc\xbf\x9b\x08\xe8\xb7\xbb\x5a\xe7\xf1\xdc\x4f\xff\x93\x5c\x4e\x32\xd7\xd5\x85\x8f\xd8\x07\xca\x0c\x13\x3b\x9b\x39\xed\xa7\xbe\xaf\x69\x44\xee\xe2\x1b\xef\xf5\xf5\x01\x6f\xc1\x8c\x7b\x4d\x14\xf4\x4f\x79\xba\xf1\x9c\xb3\x9e\x67\x75\x34\xc8\xc3\x0e\xcd\x6f\xf6\x98\x1f\x5c\xfd\x4e\x56\xbf\x7d\x38\x1a\x30\x39\x35\x10\x83\xc9\x99\xbe\x19\xc7\x2b\x67\x7a\x45\x9f\x99\xd4\xde\xa0\xaf\xec\x28\xbd\x08\x42\x5a\xb2\xd0\x79\x1f\x5e\x5a\x47\x70\xeb\x57\x31\x39\x8a\x85\x42\x5d\x4a\xa1\x11\xe2\xcd\x0c\x8b\x58\x06\xe7\x9d\x2b\x9b\xb4\x95\xeb\xb3\x71\x6c\x99\xea\x3b\x4f\xdf\x75\x6a\x56\x17\x77\x20\x86\x3e\x94\xfb\xb1\x2b\x93\x28\x27\xe4\x1a\xaf\x58\x71\xb3\xde\xc0\xc9\x42\xef\xfc\x67\x87\x5e\x26\x7b\xd2\xbe\xc2\x80\xcc\xf5\xa0\xe5\x92\xfa\xde\x52\xf7\x9c\x53\xd3\x8a\x7c\xc1\x70\xb9\xbb\x10\xde\xe6\xb8\xdd\x3e\xda\x9b\x48\xa1\x25\xc7\x95\x1d\x3f\x16\x03\xc5\x59\xd7\x9a\x89\x3f\xfa\x67\x34\xb3\x89\xee\x58\xb5\x37\x8b\xcd\x32\x21\x53\x49\xae\xc3\x4e\x3e\x71\xa4\x1a\x7d\xdf\x43\xb7\x6f\xbd\x7a\xf5\x95\x37\x5a\x3a\xfd\x0b\xcc\x6f\x22\x11\xbc\xf9\xda\xb9\x1e\x07\x87\x3a\xbd\x86\x9a\x18\xb0\x69\x31\x51\x16\x33\x14\x7e\x2d\x75\xd1\x7e\x1d\x7e\x1b\xfb\xc6\x41\xf9\xc6\x4c\xb7\x66\x5f\x75\xaa\x7b\x15\xdd\x43\xf9\x1f\x24\x76\xf8\xa9\x33\xd5\xdd\x7c\x37\x6c\x93\xe6\x4e\x03\x7b\x70\x20\x8f\x2b\x37\x90\x35\xbb\x5e\x80\xe7\x2e\xe2\x2b\x68\x76\xbc\xf3\x43\xf9\x06\x05\x0b\xa6\x2a\xbc\xde\xea\x2f\xdf\xd4\xda\x50\x53\xe9\xc9\x00\x7c\xa7\x30\xd3\xab\xf3\x98\xd5\xbc\x75\x14\xdf\xce\x19\xf3\x7f\xf4\x2e\x94\x3c\x4c\x5b\xec\x8e\x48\x10\xc3\xc3\xe3\x68\x5b\x26\x15\x2c\xf6\x54\x01\x03\x26\x60\x0a\xcc\x0b\xb8\x2a\x2b\x9d\x3b\xfb\x0f\xec\x71\x65\x83\xeb\xe9\xe3\xa7\x17\x4c\x46\xb2\x12\x06\xd3\x99\xe9\xc7\x99\xee\x4e\x4a\x8b\x0b\x21\x6b\xc8\xd3\xcd\x3a\xac\x3f\xb4\x36\x7f\x05\x00\x00\xff\xff\xae\x62\x60\xf9\x9b\x14\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5275, mode: os.FileMode(420), modTime: time.Unix(1587883297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/crud.html":    viewLayoutCrudHtml,
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"crud.html":    &bintree{viewLayoutCrudHtml, map[string]*bintree{}},
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
