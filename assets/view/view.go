// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x8f\xdb\x38\x0e\x7e\x9f\x5f\xc1\x13\x0e\x48\x06\x18\x3b\xe9\x00\x77\x38\xb8\x71\xd0\xc3\x16\xd8\x97\x16\xe8\xa2\xbb\x4f\x83\x22\xd0\xd8\x74\xac\x56\x96\x0c\x49\x49\x66\xb6\xc8\x7f\x5f\x48\xb6\x13\xdb\x91\xed\x4c\xbb\x8b\xd6\x0f\x33\x0e\x45\x52\x14\xc9\x8f\xa4\xbc\x32\x58\x94\x9c\x1a\x5c\xdf\x00\x00\xac\x52\xb6\x07\x6d\x9e\x39\xc6\xa4\xa0\x6a\xcb\x44\x60\x64\x19\xc1\x7f\x96\xe5\x13\xa9\x58\x1c\x1b\x0b\x94\x3c\x9c\x7f\xd7\xb4\x44\x72\xd0\x25\x15\x31\x79\x75\x4f\xba\xab\x35\x47\x26\x55\x01\x11\xa7\x8f\xc8\x83\x03\x4b\x4d\x1e\x93\xfb\xe5\x92\x40\x81\x26\x97\x69\x4c\x4a\xa9\x8d\x47\xb2\x25\x1d\x30\x83\x05\x38\x0d\x31\x79\xff\xfc\xf1\xb7\x77\x60\xe8\x23\xc7\x01\xa9\x5a\x92\xee\x8c\x0c\x12\x59\x94\x1c\x0d\x42\x94\x52\x43\x63\xe2\xe4\x36\x9c\x69\x43\x60\x1f\x14\x32\xb5\x2a\x2b\xa2\xa0\x05\x92\x41\x85\x17\x4f\xc9\x69\x82\xb9\xe4\x29\xaa\x98\xfc\xc2\x59\xf2\x05\x72\x54\x08\x61\x18\x92\xf5\x6a\xd1\xdb\x7f\xe0\x7c\x8b\xd6\x01\xa7\x5d\x30\x7a\xdc\xc7\x9d\x31\x52\x80\x79\x2e\x31\x26\xa5\x62\x05\x55\xcf\x04\xde\x24\xd6\x32\x4b\xc0\x3d\xc3\x03\x59\x7f\xa8\x5e\xec\xce\x95\xc4\xf5\x4a\xf5\x2e\x49\x50\xeb\xb3\xd2\x2d\x0a\x54\xd4\x20\x81\x28\x65\xda\x3a\x31\x8d\x09\xd3\x9b\xe6\xc7\xa6\x61\xd8\x3c\x1a\x41\xd6\xbf\xd6\xbf\x86\x37\x9c\x30\x6a\xc2\x5d\xcd\xb2\x37\x0b\x29\x47\x65\xea\x83\x10\xd0\xb9\x3c\x04\x2c\x19\xdc\xc8\x66\x34\x68\x2e\x4d\x4c\x52\xd4\x89\x0d\xa8\x25\xf9\xf7\x74\xaa\x7b\xc0\x58\x38\x64\xb4\xd0\xb3\xe8\xc1\x67\x12\x4e\xf7\x4b\x1f\x9c\x5a\x58\x35\xf8\x64\x02\xca\xd9\x56\x44\xa0\xd8\x36\x1f\x01\x51\x1d\xc6\x26\x6e\x39\x15\x29\xc7\x8f\xc8\x31\x31\xff\xe7\x7c\x6e\xd4\x0e\x6f\xc9\xba\x22\x00\xe5\x7c\x32\x10\x93\x2a\x33\xca\xb5\xd5\xf9\x87\xd0\x57\x69\x5d\x2d\x52\xb6\xf7\x90\x1f\x95\x37\x9a\x0e\xb1\x10\x25\x92\xef\x0a\xa1\x1b\x04\x27\x92\x93\x2e\xd0\xed\x3b\x01\x85\x59\x4c\x2a\x3b\x98\x14\x23\x18\x7f\x23\x45\x70\xe2\x0b\x92\x9c\x8a\x2d\x36\xaa\x4e\xf4\x4d\x45\x1f\xf2\x76\x53\x5c\x5d\xfa\x04\x3a\x91\x36\xe3\xbe\x82\x92\x87\x3b\x60\x22\xc5\x27\x38\x92\x3a\xb5\x2a\xc5\x95\x4b\xc6\x6b\x59\x07\x87\x4c\x64\x92\x80\x66\x7f\x5a\x4c\x16\x94\xf3\x33\x22\x65\x89\xe2\xbd\x4c\x29\x9f\xbb\xad\x6e\xc9\xfa\x2d\x1a\xca\x26\x03\xda\xb5\x7c\x1f\xb0\x2c\x26\x4a\x1e\x42\x07\xe6\x2c\x1b\x31\xce\x67\xe0\x81\x2a\xc1\xc4\x76\xc4\xc6\xb7\x2c\xcb\xba\x76\xda\x6d\xae\xb2\x72\xd1\xed\x5e\x2f\x59\xb7\xfa\x9d\xcf\xbf\x01\xac\x85\xb5\xf6\xdc\x32\x98\xde\xd8\x1a\xb2\x49\x9d\x7b\x37\x8e\x4a\x20\x32\xcc\x58\x68\xb6\xa9\x1b\x47\x23\x50\xb7\xbe\xff\xf5\x61\xbd\x2a\x95\xf5\x78\xce\xb6\x39\xb7\x28\xfe\xac\x7b\xf2\x89\x14\x06\x85\x21\xeb\x55\x22\x53\x5c\xaf\x16\xf5\xbf\x52\x61\xd7\x64\x67\xe2\x55\x46\xb3\x2c\xbb\x30\xf9\x44\x9b\x34\xd8\xee\x1f\x58\x7e\x88\x24\x4f\x03\x6d\x14\x13\xdb\x98\x64\x8c\xe3\x46\xf2\xf4\x64\x30\x44\x02\x0f\xdd\x65\x81\x87\xd6\xb2\x7b\x7b\x32\x31\x79\xb5\x24\x0b\xef\x59\xaa\x01\xa5\xaa\x0d\xed\xc8\xae\x74\xa2\x58\xd9\xd4\x73\xab\x64\xf1\x99\xee\x69\x45\xad\xed\x2d\x64\xba\xe3\x18\xe2\x53\x29\x95\xd1\x10\xc3\xd7\xd3\x0e\xb6\x2c\x44\x90\xed\x84\x03\x34\xcc\x6f\x5b\x6b\xf6\x51\x68\x76\x4a\xf4\x88\xf6\xe9\x9f\x31\x02\x42\xee\xfc\x5c\xad\xa3\xfa\xb9\x2e\xa3\x11\x81\x2b\x9b\x97\xac\xfd\xe0\x44\x3e\x7d\xe7\xd1\x26\x82\x87\x4f\x43\xeb\x76\xca\x89\x60\x36\x1b\x5a\x4f\x24\x8f\xe0\xc1\x0b\xad\x4b\x77\x9c\x44\x9f\x4b\xab\xd4\x61\xd9\xa3\xb9\x79\x5c\x46\x45\xf0\xdf\xe5\x30\x4b\xdd\xcf\x66\x09\x0a\x83\x6a\xe6\xe5\x3b\xfa\xc5\x47\xcc\x73\x3e\x83\x59\x49\x4d\x3e\x62\xde\x17\x7c\x8e\x60\xe6\x82\x37\xc2\xf9\xcd\xbb\xcb\xd2\x4e\x3f\x4c\x8a\x11\x13\x6c\x5f\x88\xa0\xdb\x18\x26\xfd\x79\xbf\x1c\x70\xe8\xcb\x4d\xad\xe2\x78\x6a\x75\x3f\x24\x96\x83\xa9\x5b\xa1\xd6\x97\xda\x07\xca\x0c\x13\x5b\x1b\x3a\xed\xe7\xf0\xd5\xeb\x61\xb8\x79\xca\xaf\x1f\x33\x97\x85\xde\xcf\x37\x34\x14\x47\x60\x67\xaf\x2e\xff\xf1\xc6\xe3\x9c\xea\xb2\xa4\xa3\x5e\xf0\xb6\x68\x7e\xb7\x5a\xdf\x39\xd4\x0f\x17\x34\xfb\x70\x34\x60\x72\x6a\x20\x06\x93\x33\x7d\x73\xe9\xe5\x9c\xe9\x70\xc8\x52\x2b\xa5\x76\x38\x20\x45\x9f\x98\xd4\xde\x00\x87\xf6\x7a\x37\x9f\x2d\x68\xc9\x16\xce\x4d\x8b\x73\x9d\x9a\xdd\xfa\x45\x4c\x8e\x62\xae\x50\x97\x52\x68\x84\x78\x3d\x92\xb1\x2c\x83\x13\x67\x68\x13\x24\xb4\xdd\x09\xe2\xd8\xa2\xc2\xe7\x85\xae\xe9\xd4\x84\x67\x73\x20\x86\xae\x2a\xf7\xc7\xae\x0c\x6a\x39\x02\x72\x8d\x13\xdb\xb8\xfb\x41\xcf\xca\x42\x6f\xfd\x87\x87\x4e\x06\x74\xa8\x5d\x81\x1e\x72\xaa\x01\xdc\x25\xc3\xdb\x5e\x77\x33\x0d\xd1\xe7\x0f\x17\xbe\x33\xbe\x6c\x98\x1b\xf6\x0b\xde\x44\x0a\x2d\x39\x86\x76\x00\x9d\xf7\x04\x47\x8d\xab\x6f\x9f\xdf\x9d\xa1\x36\xda\xad\x7d\x6d\x2f\x83\x38\x8e\x81\x90\xa1\x50\x57\xbe\x27\x1f\x38\x52\x8d\x90\xe4\x52\x6a\x84\xf6\x27\x84\xdb\xd7\x5e\xb9\x6a\x02\xb8\x58\x3a\xfe\x0d\xf9\x5f\x3b\x63\x76\x07\x5f\xdb\x2d\xb9\x77\xae\xe3\x3f\x88\x8d\xeb\xc1\xd1\xcb\xaa\xf9\x00\x3e\x86\x53\xf9\xa4\x69\xa4\xae\xb8\x2a\xec\x0f\x03\xfc\x54\x18\x6b\xec\x9e\xca\xe3\x53\x9a\xb6\xfb\x52\xc8\x51\x6c\x4d\xee\xdc\x3f\xe8\x7c\x6f\xba\x3a\xf1\x7f\x11\xff\x59\xae\x4f\xd4\x9f\x11\x3c\x7d\xc4\xf7\xd7\x5f\x0c\xae\x26\x44\x13\xe8\xba\x83\x7a\x56\xb8\x08\xd3\x0f\xc7\x5d\xa7\xc8\x76\xd4\x8c\x24\xf3\x4f\x03\x91\xfe\x07\x88\xa1\x8e\xe3\x1b\xb1\xea\x24\x68\x35\x95\x07\xa7\xe4\x53\xe8\x66\xf2\x9a\xeb\x0a\x7d\x6e\x10\x9b\xd0\x66\x27\xfc\xc1\x09\xe8\x62\x54\x6c\xa6\x9f\x89\x93\xf7\x3f\x6b\x0c\x9d\xbe\x7f\x41\xfc\x9e\x93\xf7\xaf\xa4\x13\xba\x5a\x9c\x13\xc7\x3f\xdd\x39\x7d\x87\x3f\x3b\xbe\x77\x35\x7d\xa9\xdb\xbd\x63\xcc\xf9\x3b\xa2\x36\xd4\xec\xf4\xa0\x23\xff\xad\x30\xd3\xe1\xe9\xbe\x52\xbf\xb5\x04\x5f\x8f\x6d\xe6\xff\xb0\x37\x57\xf2\x30\xbc\x63\xbb\x56\x40\x0c\x0f\x9f\x2e\x6f\xff\x52\xc1\x7c\x4f\x15\x30\x60\x02\x86\x94\x79\x15\x86\xe5\x4e\xe7\x6e\xff\x07\xd6\x72\x98\xa7\xcc\x1e\xaf\xb8\x32\xc8\x9d\x30\x98\x8e\x35\x2b\x67\x40\xfb\x0e\x31\x3f\x83\xbb\xd2\x79\xbc\x59\x2d\xaa\xaf\x2a\xeb\xbf\x02\x00\x00\xff\xff\x4a\x71\x9e\x31\x37\x1a\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 6711, mode: os.FileMode(420), modTime: time.Unix(1587979582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
