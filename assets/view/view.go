// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x8f\xdb\x38\x0e\x7e\x9f\x5f\xc1\x13\x0e\x48\x06\x18\x3b\xe9\x00\x77\x38\xb8\x71\xd0\xc3\x16\xd8\x97\x16\xe8\xa2\xbb\x4f\x83\x22\xd0\xd8\x74\xac\x56\x96\x0c\x49\x99\x4c\xb6\xc8\x7f\x5f\x48\xb6\x13\xdb\x91\xed\x4c\xbb\x8b\xd6\x0f\x33\x0e\x45\x52\x14\xc9\x8f\xa4\xbc\x32\x58\x94\x9c\x1a\x5c\xdf\x00\x00\xac\x52\xf6\x04\xda\x1c\x38\xc6\xa4\xa0\x6a\xcb\x44\x60\x64\x19\xc1\x7f\x96\xe5\x33\xa9\x58\x1c\x1b\x0b\x94\xdc\x9f\x7f\xd7\xb4\x44\x72\xd0\x25\x15\x31\x79\x75\x4f\xba\xab\x35\x47\x26\x55\x01\x11\xa7\x8f\xc8\x83\x3d\x4b\x4d\x1e\x93\xfb\xe5\x92\x40\x81\x26\x97\x69\x4c\x4a\xa9\x8d\x47\xb2\x25\x1d\x30\x83\x05\x38\x0d\x31\x79\x7f\xf8\xf8\xdb\x3b\x30\xf4\x91\xe3\x80\x54\x2d\x49\x77\x46\x06\x89\x2c\x4a\x8e\x06\x21\x4a\xa9\xa1\x31\x71\x72\x1b\xce\xb4\x21\xf0\x14\x14\x32\xb5\x2a\x2b\xa2\xa0\x05\x92\x41\x85\x17\x4f\xc9\x69\x82\xb9\xe4\x29\xaa\x98\xfc\xc2\x59\xf2\x05\x72\x54\x08\x61\x18\x92\xf5\x6a\xd1\xdb\x7f\xe0\x7c\x8b\xd6\x01\xa7\x5d\x30\x7a\xdc\xc7\x9d\x31\x52\x80\x39\x94\x18\x93\x52\xb1\x82\xaa\x03\x81\x37\x89\xb5\xcc\x12\xf0\x89\xe1\x9e\xac\x3f\x54\x2f\x76\xe7\x4a\xe2\x7a\xa5\x7a\x97\x24\xa8\xf5\x59\xe9\x16\x05\x2a\x6a\x90\x40\x94\x32\x6d\x9d\x98\xc6\x84\xe9\x4d\xf3\x63\xd3\x30\x6c\x1e\x8d\x20\xeb\x5f\xeb\x5f\xc3\x1b\x4e\x18\x35\xe1\xae\x66\xd9\x9b\x85\x94\xa3\x32\xf5\x41\x08\xe8\x5c\xee\x03\x96\x0c\x6e\x64\x33\x1a\x34\x97\x26\x26\x29\xea\xc4\x06\xd4\x92\xfc\x7b\x3a\xd5\x3d\x60\x2c\x1c\x32\x5a\xe8\x59\xf4\xe0\x33\x09\xa7\xfb\xa5\x0f\x4e\x2d\xac\x1a\x7c\x36\x01\xe5\x6c\x2b\x22\x50\x6c\x9b\x8f\x80\xa8\x0e\x63\x13\xb7\x9c\x8a\x94\xe3\x47\xe4\x98\x98\xff\x73\x3e\x37\x6a\x87\xb7\x64\x5d\x11\x80\x72\x3e\x19\x88\x49\x95\x19\xe5\xda\xea\xfc\x43\xe8\xab\xb4\xae\x16\x29\x7b\xf2\x90\x1f\x95\x37\x9a\x0e\xb1\x10\x25\x92\xef\x0a\xa1\x1b\x04\x27\x92\x93\x2e\xd0\xed\x3b\x01\x85\x59\x4c\x2a\x3b\x98\x14\x23\x18\x7f\x23\x45\x70\xe2\x0b\x92\x9c\x8a\x2d\x36\xaa\x4e\xf4\x4d\x45\x1f\xf2\x76\x53\x5c\x5d\xfa\x04\x3a\x91\x36\xe3\xbe\x82\x92\xfb\x3b\x60\x22\xc5\x67\x38\x92\x3a\xb5\x2a\xc5\x95\x4b\xc6\x6b\x59\x07\x87\x4c\x64\x92\x80\x66\x7f\x5a\x4c\x16\x94\xf3\x33\x22\x65\x89\xe2\xbd\x4c\x29\x9f\xbb\xad\x6e\xc9\xfa\x2d\x1a\xca\x26\x03\xda\xb5\xfc\x29\x60\x59\x4c\x94\xdc\x87\x0e\xcc\x59\x06\x71\x0c\xb3\xc3\x6c\xc4\x46\x9f\x9d\x7b\xaa\x04\x13\xdb\x11\x53\xdf\xb2\x2c\xeb\x9a\x6b\x77\xbb\xca\xd8\x45\xb7\x89\xbd\x64\xdd\xea\x77\xae\xff\x06\xcc\x16\xd6\xda\x73\xe7\x60\x7a\x63\x4b\xc9\x26\x75\x5e\xde\x38\x2a\x81\xc8\x30\x63\x11\xda\xa6\x6e\x1c\x8d\x40\xdd\x01\xff\xd7\x47\xf7\xaa\x54\xd6\xf1\x39\xdb\xe6\xdc\x82\xf9\xb3\xee\xc9\x27\x52\x18\x14\x86\xac\x57\x89\x4c\x71\xbd\x5a\xd4\xff\x4a\x85\x5d\x93\x9d\x89\x57\x19\xcd\xb2\xec\xc2\xe4\x13\x6d\xd2\x60\xbb\x7f\xe0\xb2\x23\x92\x3c\x0d\xb4\x51\x4c\x6c\x63\x92\x31\x8e\x1b\xc9\xd3\x93\xc1\x10\x09\xdc\x77\x97\x05\xee\x5b\xcb\xee\xed\xd9\xc4\xe4\xd5\x92\x2c\xbc\x67\xa9\xe6\x94\xaa\x44\xb4\x23\xbb\xd2\x89\x62\x65\x53\xd6\xad\x92\xc5\x67\xfa\x44\x2b\x6a\x6d\x6f\x21\xd3\x1d\xc7\x10\x9f\x4b\xa9\x8c\x86\x18\xbe\x9e\x76\xb0\xd5\x21\x82\x6c\x27\x1c\xae\x61\x7e\xdb\x5a\xb3\x8f\x42\xb3\x53\xa2\x47\xb4\x4f\xff\x8c\x11\x10\x72\xe7\xe7\x6a\x1d\xd5\xcf\x75\x19\x8d\x08\x5c\xf5\xbc\x64\xed\x07\x27\xf2\xe9\x3b\x4f\x38\x11\x3c\x7c\x1a\x5a\xb7\xc3\x4e\x04\xb3\xd9\xd0\x7a\x22\x79\x04\x0f\x5e\x68\x5d\xba\xe3\x24\x7a\x28\xad\x52\x87\x65\x8f\xe6\xe6\x71\x19\x15\xc1\x7f\x97\xc3\x2c\x75\x5b\x9b\x25\x28\x0c\xaa\x99\x97\xef\xe8\x17\x1f\x31\xcf\xf9\x0c\x66\x25\x35\xf9\x88\x79\x5f\xf0\x10\xc1\xcc\x05\x6f\x84\xf3\x9b\x77\x97\xa5\x1d\x82\x98\x14\x23\x26\xd8\xf6\x10\x41\xb7\x3f\x4c\xfa\xf3\x7e\x39\xe0\xd0\x97\x9b\x5a\xc5\xf1\xd4\xf1\x7e\x48\x2c\x07\x53\xb7\x42\xad\x2f\xb5\xf7\x94\x19\x26\xb6\x36\x74\xda\xcf\xe1\xab\xd7\xc3\x70\xf3\x94\x5f\x3f\x66\x2e\x0b\xbd\x9f\x6f\x68\x36\x8e\xc0\x8e\x60\x5d\xfe\xe3\x8d\xc7\x39\xd5\x9d\x49\x47\xbd\xe0\x6d\xd1\xfc\x6e\xb5\xbe\x73\xa8\x1f\x2e\x68\xf6\xe1\x68\xc0\xe4\xd4\x40\x0c\x26\x67\xfa\xe6\xd2\xcb\x39\xd3\xe1\x90\xa5\x56\x4a\xed\x70\x40\x8a\x3e\x33\xa9\xbd\x01\x0e\xed\x2d\x6f\x3e\x5b\xd0\x92\x2d\x9c\x9b\x16\xe7\x3a\x35\xbb\xf5\x8b\x98\x1c\xc5\x5c\xa1\x2e\xa5\xd0\x08\xf1\x7a\x24\x63\x59\x06\x27\xce\xd0\x26\x48\x68\xbb\x93\x1d\x5b\xee\x97\x4b\x9f\x17\xba\xa6\x53\x13\x9e\xcd\x81\x18\xba\xaa\xdc\x1f\xbb\x32\xa8\xe5\x08\xc8\x35\x4e\x6c\xe3\xae\x09\x3d\x2b\x0b\xbd\xf5\x1f\x1e\x3a\x19\xd0\xa1\x76\x05\x7a\xc8\xa9\xe6\x70\x97\x0c\x6f\x7b\xdd\xcd\x34\x44\x9f\x3f\x5c\xf8\xce\xf8\xb2\x61\x6e\xd8\x2f\x78\x13\x29\xb4\xe4\x18\xda\x39\x74\xde\x13\x1c\x35\xae\xbe\x84\x7e\x77\x86\xda\x68\xb7\xf6\xb5\xbd\x0c\xe2\x38\x06\x42\x86\x42\x5d\xf9\x9e\x7c\xe0\x48\x35\x42\x92\x4b\xa9\x11\xda\x5f\x12\x6e\x5f\x7b\xe5\xaa\x09\xe0\x62\xe9\xf8\x37\xe4\x7f\xed\x8c\xd9\x1d\x7c\x6d\xb7\xe4\xde\xb9\x8e\xff\x20\x36\xae\x07\x47\x2f\xab\xe6\x03\xf8\x18\x4e\xe5\x93\xa6\x91\xba\xe2\xaa\xb0\x3f\x0c\xf0\x53\x61\xac\xb1\x7b\x2a\x8f\x4f\x69\xda\xee\x4b\x21\x47\xb1\x35\xb9\x73\xff\xa0\xf3\xbd\xe9\xea\xc4\xff\x45\xfc\x67\xb9\x3e\x51\x7f\x46\xf0\xf4\x11\xdf\x5f\x7f\x31\xb8\x9a\x10\x4d\xa0\xeb\x0e\xea\x59\xe1\x22\x4c\x3f\x1c\x77\x9d\x22\xdb\x51\x33\x92\xcc\x3f\x0d\x44\xfa\xdf\x21\x86\x3a\x8e\x6f\xc4\xaa\x93\xa0\xd5\x54\x1e\x9c\x92\x4f\xa1\x9b\xc9\x6b\xae\x2b\xf4\xb9\x41\x6c\x42\x9b\x9d\xf0\x07\x27\xa0\x8b\x51\xb1\x99\x7e\x26\x4e\xde\xff\xac\x31\x74\xfa\xfe\x05\xf1\x7b\x4e\xde\xbf\x92\x82\x45\xf4\xc4\xc9\x4e\xd7\x49\xdf\xb9\xce\x3e\xed\xdd\x3a\x5f\xea\x51\xef\x84\x72\xfe\x52\xa8\x0d\x35\x3b\x3d\xe8\xa3\x7f\x2b\xcc\x74\x78\xba\x8a\xd4\x6f\x2d\xc1\xd7\x63\x9b\xf9\x3f\xdd\xcd\x95\xdc\x0f\xef\xd8\x2e\x03\x10\xc3\xc3\xa7\xcb\x8b\xbd\x54\x30\x7f\xa2\x0a\x18\x30\x01\x43\xca\xbc\x0a\xc3\x72\xa7\x73\xb7\xff\x03\x6b\x39\xcc\x53\x41\x8f\x57\xdc\x06\xe4\x4e\x18\x4c\xc7\xfa\x90\x33\xa0\x7d\x3d\x98\x9f\x71\x5b\xe9\x3c\xde\xac\x16\xd5\x07\x93\xf5\x5f\x01\x00\x00\xff\xff\x93\x5f\xb6\xc1\x19\x1a\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 6681, mode: os.FileMode(420), modTime: time.Unix(1587977938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
