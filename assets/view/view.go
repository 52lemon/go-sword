// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x6f\xdc\xb8\x11\x7f\xcf\x5f\x31\x65\x0f\xdd\x35\x10\x69\x1d\x03\x97\x3b\x28\xab\xc5\x15\x09\xda\x97\x4b\x71\xc5\xb5\x4f\x46\xb0\xa0\xa5\x91\xc4\x0b\x97\x14\x44\xee\xae\x5d\x9f\xff\xf7\x82\xd4\xb7\x44\x49\xeb\xe4\x3e\xac\x07\x5b\x22\x87\x33\xc3\xdf\x7c\x92\xf6\x56\xe9\x07\x8e\xbb\x57\xaf\x00\x00\x7c\x76\x3a\x7a\x9a\xde\x71\x04\x3f\xc6\x83\x2c\xdf\x3d\x26\x12\xe9\x45\xc8\xb9\x27\xe8\x01\xe1\xd1\xd2\x9a\xe7\x8e\x46\x9f\xd3\x42\x1e\x45\xec\x45\x92\xcb\x22\x80\xbf\xde\xc4\x77\xdf\x25\xdf\xbe\x6b\x48\xea\xf1\x24\x49\xca\xc1\xa7\x0b\x45\xd1\x74\x41\x52\x92\xbc\x7d\x7b\x7d\xfd\x5b\x48\x8a\xe3\x02\x95\x9a\x97\xf6\xe6\xfb\xef\x66\x45\x6d\x37\x15\x90\x5b\x8d\x87\x9c\x53\x8d\x3b\x3b\xb3\x8d\xd9\x09\xec\x54\x48\x0e\xb4\x48\x99\xf0\xb4\xcc\x03\xf8\xf6\x3a\xbf\x27\xbb\x86\xe3\x96\x79\x85\x3c\xb7\xdf\xd5\x58\x24\x39\xa8\x9c\x8a\x90\xbc\xb9\x21\xfd\xd9\x8a\x22\x91\xc5\x01\x02\x4e\xef\x90\x7b\x67\x16\xeb\x2c\x24\x37\xd7\xd7\x04\x0e\xa8\x33\x19\x87\x24\x97\x4a\x3b\x56\x76\x56\x7b\x4c\xe3\x01\x2c\x87\x90\x7c\x7c\xf8\xf9\xdf\x3f\x82\x45\x68\x62\x55\xb5\x92\x1e\xb5\xf4\x22\x79\xc8\x39\x6a\x84\x20\xa6\x9a\x86\xc4\xae\xdb\x73\xa6\x34\x81\x93\x77\x90\xb1\x61\x59\x0e\x1a\xcf\x21\xf0\x83\x14\x9e\x42\x8e\x91\x0e\x49\xf9\xfb\x3f\x66\x76\x7d\x45\x26\x65\x8d\x9e\x9c\xd3\x08\x33\xc9\x63\x2c\x42\xf2\x9e\xb3\xe8\x33\x64\x58\x20\xf8\xbe\x4f\x76\xdb\xcd\x40\xb5\x89\xad\x6f\x3a\x7b\x5f\x46\x67\x16\x89\xbb\xa3\xd6\x52\x80\x7e\xc8\x31\x24\x79\xc1\x0e\xb4\x78\x20\xf0\x43\x64\x34\x33\x03\x78\x62\x78\x26\xbb\x9f\xca\x17\x23\xb9\x5c\x71\x39\x53\x75\x8c\x22\x54\xaa\x65\x9a\xa2\xc0\x82\x6a\x24\x10\xc4\x4c\x19\x04\xe3\x90\x30\xb5\xaf\x3f\xf6\x35\xc1\xfe\x4e\x0b\xb2\xfb\x67\xf5\x35\x2d\x70\x41\xa9\x05\xb8\xea\x69\xa7\x83\x52\x8e\x85\x1e\x6e\x44\x65\xf2\xec\xb1\x48\x0a\x38\x99\x95\x21\xb1\x3e\xc8\x04\x58\xea\xbd\xf1\xa6\x09\xf7\xfb\x07\xe3\x08\x51\x81\x54\x23\x54\xec\x02\x78\x7c\x34\xeb\xfd\x84\x71\xdc\xe7\x54\x67\x4f\x4f\x4e\x1d\x2d\xf3\x41\x8c\x6d\x6c\x90\x75\x02\x71\x33\x88\xc4\xc5\xc8\xbc\xb9\x76\x45\x66\x27\xec\x35\xde\x6b\x8f\x72\x96\x8a\x00\x0a\x96\x66\x33\xf1\xd8\x33\xfb\x99\x16\x82\x89\xb4\x35\x7b\x46\x45\xcc\xf1\x67\x1b\x37\xeb\x55\xcc\x92\x64\x75\x45\x76\xe5\x37\x98\x4f\x30\x08\xa8\x45\x6b\x0e\xe4\x98\x4c\x38\x25\x44\xe0\xb9\x23\x43\xe0\xf9\xcb\x44\x8c\x3c\x78\xbc\x95\xbe\x24\xbb\x9b\xbf\x19\x81\x97\x8b\x72\xf1\xfe\x3b\xe7\x6b\x5d\x1c\xb1\xe5\x4c\x39\xff\x7a\x96\x09\xe5\xca\xf0\xfc\xaf\x50\x17\x71\xdd\x6e\x62\x76\x72\x0c\xdf\x15\xce\x98\x29\xab\x55\x10\x49\x7e\x3c\x08\x55\xa7\xd0\x48\x72\xd2\xcf\xb4\x36\x4e\xa0\xc0\xa4\xce\xa6\x4c\x8a\x99\x4c\xda\x66\x5f\x26\x85\x17\x65\x54\xa4\x58\xb3\x6a\xc6\xf7\xe5\xf8\x94\x8f\xd6\xd5\x0d\x14\x97\xda\x53\x91\x34\xe6\x7d\x84\x42\x9e\x5f\x03\x13\x31\xde\xc3\x13\xb1\x73\x35\xe3\x12\x92\xf9\x62\xe2\x70\x47\xc5\xfe\x67\xfc\xe6\x40\x39\x6f\xbd\x46\xe6\x28\x3e\xca\x98\xf2\xb5\x15\x75\x45\x76\x1f\x50\x53\xb6\x68\xd0\xbe\xe6\x27\x8f\x25\x21\x29\xe4\xd9\xb7\x29\x33\x49\x66\x94\x73\x29\xd8\xc4\xe5\xa4\x8e\x1f\x58\x92\xf4\xf5\x34\x62\x2e\xd2\x72\xd3\x6f\x1f\x9e\x3d\xff\x0c\xfb\x94\x26\x9f\xb3\xcc\xfb\x0c\xa3\xcf\x77\xf2\xbe\x2d\xe6\x8a\x89\xd4\xb4\x06\xf5\xcc\x76\x53\xbf\x3d\x5f\x5f\x83\x87\xf5\x91\x2f\x48\xc9\x07\x83\x6e\xab\x16\x53\x7b\x53\x52\xf6\xb1\x75\x87\xbd\x1d\x25\x10\x68\xa6\x4d\x02\xee\x8e\xee\xed\x18\x81\xaa\x57\xfa\x7e\x98\xbc\xb7\x79\x61\x3c\x24\x63\x69\xc6\x4d\xae\xfe\x45\x0d\xd6\x47\x52\x68\x14\x9a\xec\xb6\x91\x8c\x71\xb7\xdd\x54\xbf\xf2\x02\xfb\x2a\x5b\x15\x2f\x52\x9a\x25\xc9\x48\xe5\x66\x6c\x51\x61\x23\xdf\xb3\xf9\x32\x90\x3c\xf6\x94\x2e\x98\x48\x43\x62\x8b\xa1\xe4\x71\xa3\x30\x04\x02\xcf\xfd\x69\x81\xe7\xce\xb4\x7d\xbb\xd7\x21\x79\x73\x4d\x36\xce\xbd\x94\x1d\x6d\x99\xcb\xba\x96\xdd\xaa\xa8\x60\x79\x5d\xe5\x0d\x93\xcd\x2f\xf4\x44\xcb\xd1\x4a\xdf\x83\x8c\x8f\x1c\x7d\xbc\xcf\x65\xa1\x15\x84\x9d\x76\xdb\xa4\xb1\x00\x92\xa3\xb0\x09\x08\xd6\x57\x9d\x39\xf3\x14\xa8\x8f\x85\x18\x0c\x9a\x67\xb8\xc7\x00\x08\x79\xed\xa6\xea\x6c\xd5\x4d\x35\xb6\x46\x00\x36\xcd\x8f\x49\x87\xc6\x71\x33\x6c\x9b\xe1\x00\x6e\x3f\x4d\xcd\x9b\xbe\x38\x80\xd5\x6a\x6a\x3e\x92\x3c\x80\x5b\x67\x6c\x8d\xf1\x68\x96\x3e\xe4\x86\xa9\x8d\x77\x07\xe7\xfa\xb1\x2e\x15\xc0\xdb\xeb\x69\x92\xaa\x6d\x59\x45\x28\x34\x16\x2b\x27\xdd\x93\x7b\xf9\x8c\x7a\x25\x68\x2b\xd3\xaa\xcd\xa8\xf7\x19\x1f\x02\x58\x35\x4d\xdd\x04\xe5\x17\x4b\x97\xb9\x69\x8a\x99\x14\x33\x2a\x98\x44\x19\x40\xbf\x92\x2d\xe2\x79\x73\x3d\x01\xe8\xf3\x55\x2d\xed\xd8\xd4\xe6\x3f\xc5\x96\x93\xae\x5b\x86\xad\xcb\xb5\xcf\x94\x69\x26\x52\xdb\x2a\xba\x29\x5c\x09\x7b\x3a\xde\x1c\xf9\xd7\x1d\x33\xe3\x4c\xef\xa6\x9b\x3a\x2b\x05\x60\x9a\xc5\x31\x7d\x7b\x2c\x09\x6e\x3f\xf5\x66\xdb\x93\x46\x07\xba\xf2\xf0\x6d\x0e\x26\x3d\xda\x14\xcb\xe3\xee\x8f\x36\x27\x4c\xe7\x3b\xf3\x70\xd4\xa0\x33\xaa\x21\x04\x9d\x31\xf5\x6a\x6c\x83\x8c\x29\x9f\xde\x33\xa9\x9c\x86\xf4\xcd\xc1\x7f\xbd\xda\xd0\x9c\x6d\x2c\x1c\x9b\x36\x1f\xad\xae\xdc\x4b\x74\x86\x62\x5d\xa0\xca\xa5\x50\x08\xe1\x6e\xc6\x33\x59\x02\x0d\xa5\x6f\x70\xf1\x4d\x19\x82\x30\x34\xde\xef\xda\x4f\x5f\x75\xaa\xfd\x56\x1d\x08\xa1\xcf\xca\xfe\x30\x33\x93\x5c\x9e\x00\xb9\xc2\x05\x31\xd6\x68\x03\x2d\x0f\x2a\x75\x6f\x1e\x7a\xb6\xec\x8d\xf6\x17\x0c\x22\xa4\x3c\x19\x58\xb3\x7e\x18\x94\x31\x5d\x0f\xba\xf0\x48\x64\x01\x6b\x66\x8e\xbc\xb3\x64\x50\x61\xdd\x10\xdd\xb2\x4f\xa6\x6d\x15\x78\x9e\x43\xb9\x4b\x7e\xbb\x8a\x90\xf3\xf7\x9c\x2a\xf5\x2f\x7a\xc0\xd5\x27\x53\x7b\x9b\xac\x1a\xc0\x6a\xf2\xa6\x6f\xf5\xf4\xce\x8d\x48\x89\xbe\x4b\x2f\x53\x1a\x7f\x5f\xc5\x68\x3a\xad\xd7\x68\x74\x3c\x62\xc3\xa6\xcd\x5f\x26\xbc\x6a\x95\x46\xb4\x91\x14\x4a\x72\xf4\x8d\xf0\xf5\x60\xe1\xac\x53\x54\x97\x3e\x5f\x1d\xe3\x16\xe1\x56\xae\xbd\x7d\x0d\xc3\x10\x08\x99\xc2\xb8\xf4\x79\xf2\x13\x47\xaa\x10\xa2\x4c\x4a\x85\xd0\xbd\xd4\xbb\x72\x43\x57\xb6\x58\x0e\xfc\xbe\x3e\xef\x54\x60\xac\x5e\xc3\x63\xb7\xe5\x19\xec\xeb\xe9\x77\xcc\x49\x97\x27\xa5\x41\x34\xaf\x27\xf2\xd2\x74\x0a\x69\x38\x4d\x55\x18\x08\xcb\x2a\xe7\x36\x03\xbc\xa8\xdc\x56\xeb\xbd\xe4\xc7\x8d\x9b\x76\xeb\xbe\xcf\x51\xa4\x3a\xb3\xf0\x4f\x82\xef\x74\x57\xbb\xfc\x2f\xc4\xbd\x97\xcb\x1d\xf5\x25\x06\xcf\x30\xe2\x87\xf3\xcf\x0e\xae\xda\x44\x0b\xd1\xf5\x1a\xaa\x5e\x6c\x64\xa6\x3f\x3d\xee\x0c\x24\x5f\xd8\x05\x40\x59\x47\xd7\x70\xa2\x05\xd8\x5a\x6a\x83\x73\x41\x20\xd4\x38\x7f\xf3\x11\x95\xa2\x29\xfa\xd5\xed\xe4\xda\xac\x36\x75\xac\xa9\x41\xf3\x71\xee\x0e\x29\x78\x51\x21\x3c\xbc\x31\x73\xe8\x64\xb1\x70\xb5\xd8\x95\x93\x76\x8a\xde\xad\x65\x52\x01\x54\x51\x5d\xc0\xcf\x36\xe2\x0b\xdc\x0c\xdc\x6e\x56\xae\xa3\x82\x61\x56\x1c\x71\x69\xe7\xc3\x7b\xb8\xa9\xdd\x0f\x6f\x08\xbe\x66\xe7\xc3\x3b\x89\x05\x5e\x1d\xca\x85\xed\x37\x97\x0e\xae\xcd\xb7\xc0\x0f\xee\x26\x9e\x0b\xbb\xb3\xbd\xad\xee\xe9\x95\xa6\xfa\xa8\x26\x51\x74\x5f\x92\xbb\x13\x73\xc9\xaa\xcc\xc7\xf6\x0a\x76\x2a\x6a\x4d\x7c\x37\xe1\x3d\xdc\xca\x5c\xa8\xb3\x64\xd8\xb2\x5d\xd8\xa2\x36\xfb\xf9\xa6\xc0\x44\xf9\xcd\xe1\xdb\xd7\x32\x4d\x1b\x2c\xd8\xb3\xe3\xf4\xd2\x9a\xd5\x85\x46\xe0\xf9\x0f\x44\x66\xe1\x50\xf1\x92\x80\xa9\xfe\x62\xf4\xc7\x82\x03\xbf\xfe\x3a\x0e\xa6\x97\xe6\x53\xbd\xaf\xe9\x60\x36\x01\xba\x10\xcf\x43\x5d\xd5\x70\xe1\xbb\x57\x73\xd2\xdc\x7f\x57\x5a\x17\xf2\x3c\x2d\xb2\xdb\x99\x40\x08\x83\xbb\x16\xa8\xcf\xcd\x8d\x65\xa7\x98\x39\x19\xfa\xf9\x51\x65\x56\x7e\xbf\xc8\x8f\x9b\xba\x59\x14\x7b\xff\xb7\xe0\x90\xdd\x3b\x35\xde\x8c\x4d\x5a\x67\xf5\xa9\xe3\xc1\xb8\xb0\x39\xaf\x98\xe4\x51\x68\x8c\xe7\x5a\x73\x2b\xa8\x7b\xe7\xb4\x6e\x95\x29\x79\xda\x7f\x5b\xb1\x97\xf4\xbb\xff\x07\x00\x00\xff\xff\xba\x3b\x5a\x60\x08\x24\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 9224, mode: os.FileMode(420), modTime: time.Unix(1587986289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
