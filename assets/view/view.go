// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x41\x6f\xeb\x36\x0c\xbe\xf7\x57\x70\x1a\x30\xb7\x43\x1d\x67\xdd\x3b\xa9\x71\x76\x7c\xd7\x61\xd7\x87\x87\x41\xb1\x68\x5b\xab\x2c\x19\x12\x9d\xb6\x0b\xf2\xdf\x1f\x64\x3b\x89\x1d\xdb\xe9\xab\x0e\x45\x4a\x91\x1f\xc9\x8f\x14\xe9\x8d\xa7\x77\x8d\xe0\x33\x5b\xa3\xdc\xde\x01\x00\xac\xb4\x78\xb7\x0d\xc5\x46\xec\xe1\xd0\x4a\xc2\x79\x55\x92\x4a\x0e\x5f\x9e\xd6\xf5\xdb\xf3\x59\x5a\x09\x57\x28\xc3\x61\x0d\xa2\x21\x7b\x2d\x8f\x9d\x2a\x4a\xe2\x30\xb6\xc9\xac\xb6\x8e\xc3\x6b\xa9\x08\x3b\xe9\xf1\x6e\xe4\x58\xdb\xc2\x0e\x3c\xef\xac\x93\xe8\x62\x27\xa4\x6a\x3c\x87\x3f\x87\x58\xb9\xb6\x82\x38\x68\xcc\xe9\x04\x15\xfe\x8e\xe0\x72\x6b\x09\x5d\x9c\xa1\x21\x74\x03\x5c\xc2\x37\x8a\x85\x56\x85\xe1\xd0\x5d\x5e\x70\x6b\xeb\x15\x29\x6b\x38\x38\xd4\x82\xd4\x1e\x9f\x07\xf1\x10\xd9\x8a\xc3\x39\xa9\xe3\xdd\x26\x69\x69\xdc\xde\x6d\x08\xab\x5a\x0b\xc2\x8e\xca\x8d\x8a\xbb\x20\xb6\x67\xeb\x8d\x8a\x4b\x14\x12\x1d\xf0\xd6\x26\x65\x87\x9d\xc8\x5e\x0a\x67\x1b\x23\x79\xf4\xeb\x7a\xbd\x8e\x8e\xec\xa2\xdf\xdb\x54\x68\x1a\xa8\xac\xc4\x94\x95\xd6\xa9\xff\xad\x21\xa1\x19\x50\x89\x15\xa6\x4c\x0a\xf7\xc2\x40\x64\x21\xd0\xd8\x88\x20\xfa\x83\x7d\xc2\x41\xeb\xa4\x7c\x82\x4c\x0b\xef\x53\x36\xa8\x03\x83\x1e\xa4\xab\x5a\x57\x34\xb6\xfd\x6a\x63\xff\x6a\x9d\xdc\x24\xe5\xd3\x0c\x94\x54\xfb\x2b\x2c\x23\xf6\x73\x3e\x13\xa9\xf6\x57\xb9\x26\x5d\xb2\x03\xc6\x92\x13\x65\x23\x16\xaf\x89\xed\xc5\x5e\x05\x6e\x4b\x25\x31\x26\xa7\x8a\x02\x1d\xec\x1c\x8a\x97\xda\x2a\x43\x29\xab\xe4\x12\x2f\x79\x9e\xcf\xf3\xd2\x93\xdf\x53\xad\x43\x4b\xb3\xee\x39\xa4\x2c\x74\xfd\x8c\x4d\x6b\x77\x6a\x05\xd8\xc7\xb9\x75\x29\x53\x84\x15\x28\x03\x01\x6d\xc1\x66\xe0\x2f\x6e\xd5\xf7\xb1\xca\x53\x46\xef\x35\xda\xfc\x3e\x48\x56\xbe\xd9\xfd\x1b\xee\x1f\x20\x4d\x21\x6a\x8c\xc4\x5c\x19\x94\x11\x03\xde\x15\xbe\xd5\x0a\x3f\x6f\xf8\xe8\xfd\xa8\xcc\x1a\xe0\x01\xbd\x37\x0b\x02\xb6\x0d\x84\x87\x5f\x1f\xd8\x3b\xdb\x84\x77\xa5\x95\x79\x01\x4e\x36\x65\x05\xd2\x3f\x41\xf6\xb7\xa0\xf2\xfe\x1c\xc6\x03\x03\x12\x45\xca\x7c\x2d\x0c\xdb\x1e\x0e\xed\x05\x29\xd2\x78\x3c\x6e\x92\x01\xc8\x0d\x4a\x92\x01\x27\x37\x99\xf3\xcd\xae\x2d\xd6\x2d\xde\x7e\x19\xf3\xf6\x41\x96\xe7\x2a\x7a\x6d\x29\x65\x6d\xe0\x1f\xd8\xfc\x24\xbb\x63\x2a\x6e\x47\x91\x8c\xe7\xca\x0d\xaf\xc3\xde\x69\xdb\xce\x37\xbb\xd0\x75\x23\x12\xce\xcd\xe2\x9b\xdd\xcf\xf4\x0a\x7c\x5c\xef\x13\xd2\x75\xb9\x83\xfc\x73\xd5\x86\x4f\x54\x3c\x39\x97\x7c\xe1\x11\xde\x20\x6e\x3a\x69\xce\x90\x6a\x34\x6c\x7a\x66\x33\x6b\x08\x0d\x5d\xc6\x47\x2d\xa4\x54\xa6\xe0\x10\xad\xe1\xe9\x4b\xfd\xd6\xfe\x99\x9f\x21\x7d\xe2\x7b\x85\xaf\xdb\x33\x0d\xed\x7f\x13\xe7\xbd\x9b\xf1\xfc\x9b\xd9\x22\xdd\x5a\xbb\x1a\xb3\xa3\x5d\x77\x19\xd3\xf0\x5b\x66\xeb\xf7\x67\x80\x92\xa8\xf6\x3c\x49\x0a\x45\x65\xb3\x5b\x65\xb6\x4a\x7c\x63\x7c\xa9\x0c\xee\x93\xe2\xa4\x2d\x1a\x2a\xad\xe3\xff\x89\x77\xdf\x98\xe0\xbe\x83\xed\x77\xda\x20\x9c\x21\xbd\x1b\x9f\x39\x55\xf7\x31\x56\x56\x36\x1a\x57\xf8\x56\x5b\x47\x1e\xd2\xc1\xda\x95\x82\x04\x87\xbc\x31\x59\x58\xb0\x70\xff\x30\xb8\x0b\xc7\x21\x35\xce\x5c\x09\xc3\x49\x12\xc8\xac\xc9\x55\x01\x85\xb6\x3b\xa1\xdb\x41\x0a\x5a\x79\x9a\xa8\x86\x1b\x0e\xdf\xa6\x18\xe1\x84\xc7\xc7\x21\x52\xd6\xc7\x35\xda\x5a\x63\xf4\x38\xab\xd7\x76\x2d\x87\xe8\x2b\x1a\x74\x82\x96\xd4\x42\xd3\x73\x88\xc2\x6e\xd6\xd1\x44\xe3\xf8\x7d\x6a\x35\x49\xa4\xed\x07\x3f\xd1\xeb\xc4\x8b\x79\xd4\x22\x7c\x90\x45\xbf\x2f\xc4\xe5\x50\x2a\x87\x19\x71\x38\x8c\x42\x9c\x4e\x9a\xe3\xe3\x0c\xdb\x93\xd4\xe6\xbd\xf4\x41\x24\xb7\x74\x1a\xa7\x83\x8a\x43\x23\xd1\xfd\x15\x2c\xd2\xa4\xeb\xa0\x64\x91\xb5\x91\xe8\x12\xf2\xf1\x71\xf0\x19\x59\xd5\x0d\xa1\xe4\x70\x18\x48\x2b\xa4\xd2\x4a\xcf\xaf\x32\x1a\x8e\xaa\x61\xf3\xb5\x13\x6b\x26\xfb\xbd\x70\x3d\xfd\x90\x02\x95\xca\xaf\x16\x6a\x94\x5b\x07\xf7\x41\x5b\x85\x21\xdb\x29\xcd\x01\x86\xa3\xf2\xce\x61\xd8\xdc\x9d\xe6\x37\xf5\x7d\xb5\x14\xc2\xe9\xf4\xef\xe1\x62\x10\x08\x9c\xd5\x9e\xa9\xec\xb4\xa7\x3a\xb4\x28\x5a\x22\xf8\xf2\x45\xdb\x3d\xe7\x1f\x01\x00\x00\xff\xff\x1a\xa0\x48\x1b\x21\x0c\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3105, mode: os.FileMode(420), modTime: time.Unix(1587988105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xc7\x5b\x9c\x1d\x5c\x25\xbb\x01\xb6\x5b\x28\x96\xb1\x87\x16\xb8\x97\xed\x61\x0f\x7b\xf7\x14\x14\x06\x23\x8d\x24\x6e\x69\x52\x10\x69\x3b\xb9\x6e\xfe\xf7\x03\xa9\x0f\xeb\x83\x92\x9c\x76\x77\x1b\x3d\x24\x12\x39\x9c\x19\xfe\xe6\x93\x4c\x36\x4a\x3f\x72\xdc\x5e\x5d\x01\x00\xf8\xec\x78\xf0\x34\xbd\xe7\x08\x7e\x8c\x7b\x59\xbe\x7b\x4c\x24\xd2\x8b\x90\x73\x4f\xd0\x3d\xc2\x67\x4b\x6b\x9e\x7b\x1a\x7d\x4a\x0b\x79\x10\xb1\x17\x49\x2e\x8b\x00\xfe\x7a\x13\xdf\xff\x90\x7c\x7f\xdb\x90\xd4\xe3\x49\x92\x94\x83\x4f\x17\x8a\xa2\xe9\x8c\xa4\x24\x79\xf3\x66\xbd\xfe\x3d\x24\xc5\x71\x81\x4a\x4d\x4b\x7b\xfd\xf6\x87\x49\x51\x9b\x55\x05\xe4\x46\xe3\x3e\xe7\x54\xe3\xd6\xce\x6c\x98\xc7\xe9\xa3\x3c\x68\xb0\xf3\x21\xc9\x69\x1c\x33\x91\x06\xdf\xaf\xf3\x07\x58\xdf\x66\xc8\xd2\x4c\x07\xf0\x76\x7d\xcc\x6e\xc9\xb6\x11\xb1\x61\x5e\x21\x4f\xe7\xef\x6a\x2c\x92\x1c\x54\x4e\x45\x48\x5e\xdf\x90\xee\x6c\x45\x91\xc8\x62\x0f\x01\xa7\xf7\xc8\xbd\x13\x8b\x75\x16\x92\x9b\xf5\x9a\xc0\x1e\x75\x26\xe3\x90\xe4\x52\x69\xc7\xca\xd6\x6a\x8f\x69\xdc\x83\xe5\x10\x92\x0f\x8f\xbf\xfc\xfb\x27\xb0\x90\x8d\xac\xaa\x56\xd2\x83\x96\x5e\x24\xf7\x39\x47\x8d\x10\xc4\x54\xd3\x90\xd8\x75\x3b\xce\x94\x26\x70\xf4\xf6\x32\x36\x2c\xcb\x41\xe3\x4a\x04\x7e\x94\xc2\x53\xc8\x31\xd2\x21\x29\x7f\xff\xc7\xcc\x2e\xaf\xc9\xa8\xac\xc1\x93\x73\x1a\x61\x26\x79\x8c\x45\x48\xde\x71\x16\x7d\x82\x0c\x0b\x04\xdf\xf7\xc9\x76\xb3\xea\xa9\x36\xb2\xf5\x55\x6b\xef\xf3\xe8\x4c\x22\x71\x7f\xd0\x5a\x0a\xd0\x8f\xb9\x31\x77\xc1\xf6\xb4\x78\x24\xf0\x63\x64\x34\x33\x03\x78\x64\x78\x22\xdb\x9f\xcb\x17\x23\xb9\x5c\x71\x39\x53\x75\x88\x22\x54\xea\xcc\x34\x45\x81\x05\xd5\x48\x20\x88\x99\x32\x08\xc6\x21\x61\x6a\x57\x7f\xec\x6a\x82\xdd\xbd\x16\x64\xfb\xcf\xea\x6b\x5c\xe0\x8c\x52\x33\x70\xd5\xd3\x3d\xf7\x5d\x59\xff\x6d\xf9\xf8\xaa\xe7\xe4\xb3\x4e\x7f\xb3\x76\x39\x7d\xcc\x8e\x75\x74\x69\x7c\xd0\x1e\xe5\x2c\x15\x01\x14\x26\xb2\xc6\x5d\xbd\x83\xe8\x89\x16\x82\x89\xf4\x8c\x68\x46\x45\xcc\xf1\x17\xeb\x92\xcb\x45\xcc\x92\x64\x71\x4d\xb6\xe5\x37\x98\x4f\x48\x18\x47\x35\x0b\x54\x4f\x8e\xc9\x3a\x63\x42\x04\x9e\x5a\x32\x04\x9e\xbe\x4c\xc4\xc0\x39\x86\x5b\xe9\x4a\xb2\xbb\xf9\x9b\x11\x78\xb9\x28\x17\xef\x7f\x70\xbe\xd4\xc5\x01\xcf\x9c\x29\xe7\x5f\xcf\x32\xa1\x5c\x19\x9e\xff\x15\xea\x22\xae\x9b\x55\xcc\x8e\x8e\xe1\xfb\xc2\x99\x2f\xcb\xca\x10\x44\x92\x1f\xf6\x42\xd5\xd9\x29\x92\x9c\x74\x93\x98\x79\x27\x50\x60\x52\x27\x2a\x26\xc5\x44\x92\x3a\x27\x36\x26\x85\x17\x65\x54\xa4\x58\xb3\x6a\xc6\x77\xe5\xf8\x98\x8f\xd6\x95\x04\x14\x97\xda\x53\x91\x34\xe6\xfd\x0c\x85\x3c\xbd\x02\x26\x62\x7c\x80\x27\x62\xe7\x6a\xc6\x25\x24\xd3\x79\xda\xe1\x8e\x8a\xfd\xcf\xf8\xcd\x9e\x72\x7e\xf6\x1a\x99\xa3\xf8\x20\x63\xca\x97\x56\xd4\x35\xd9\xbe\x47\x4d\xd9\xac\x41\xbb\x9a\x1f\x3d\x96\x84\xa4\x90\x27\xdf\x66\xa3\x24\x99\x50\xce\xa5\x60\x13\x97\xa3\x3a\xbe\x67\x49\xd2\xd5\xd3\x88\xb9\x48\xcb\x55\xb7\x54\x3f\x7b\xfe\x19\xf6\x29\x4d\x3e\x65\x99\x77\x19\x46\x9f\xee\xe5\xc3\xb9\x4e\x2a\x26\x52\x53\x75\xeb\x99\xcd\xaa\x7e\x7b\xbe\xbe\x06\x0f\xeb\x23\x5f\x90\x92\xf7\x06\xdd\xb3\x5a\x4c\xed\x54\x26\x4f\xbb\xd8\xba\xc3\xce\x8e\x12\x08\x34\xd3\x26\x01\xb7\x47\x77\x76\x8c\x40\xd5\x86\xbc\xed\x27\xef\x4d\x5e\x18\x0f\xc9\x58\x9a\x71\x93\xab\x7f\x55\xbd\xf5\x91\x14\x1a\x85\x26\xdb\x4d\x24\x63\xdc\x6e\x56\xd5\xaf\xbc\xc0\xae\xca\x56\xc5\x8b\x94\x66\x49\x32\x50\xb9\x19\x9b\x55\xd8\xc8\xf7\x6c\xbe\x0c\x24\x8f\x3d\xa5\x0b\x26\xd2\x90\x98\x3c\xbd\x93\x3c\x6e\x14\x86\x40\xe0\xa9\x3b\x2d\xf0\xd4\x9a\xb6\x6f\x0f\x3a\x24\xaf\xd7\x64\xe5\xdc\xcb\x55\xfd\x5d\xb6\x8f\xdb\xab\xb6\x79\x37\x2a\x2a\x58\xae\xab\x20\x31\x9c\x56\xbf\xd2\x23\x2d\x47\x2b\xa5\xf7\x32\x3e\x70\xf4\xf1\x21\x97\x85\x56\x10\xb6\xfa\x5b\x93\xcb\x02\x48\x0e\xc2\x66\x21\x58\x5e\xb7\xe6\xcc\x53\xa0\x3e\x14\xa2\x37\x68\x9e\xfe\x46\x03\x20\xe4\x95\x9b\xaa\xb5\x5f\x37\xd5\xd0\x24\x01\xd8\x5c\x3f\x24\xed\x5b\xc8\xcd\xf0\xdc\x6c\x06\x70\xf7\x71\x6c\xde\xf4\x9d\x01\x2c\x16\x63\xf3\x91\xe4\x01\xdc\x39\x03\x6c\x88\x47\xb3\xf4\x31\x37\x4c\x6d\xd0\x3b\x38\xd7\x8f\xf5\xab\x00\xde\xac\xc7\x49\xaa\xde\x65\x11\xa1\xd0\x58\x2c\x9c\x74\x4f\xee\xe5\x13\xea\x95\xa0\x2d\x72\xaa\xb3\x09\xf5\x3e\xe1\x63\x00\x0b\x6b\xbd\x09\xca\x2f\x96\x2e\x73\xd3\x74\x32\x29\x26\x54\x30\xd9\x32\x80\x6e\x39\x9b\xc5\xf3\x66\x3d\x02\xe8\xf3\x55\x2d\xed\xd8\x14\xe8\x6f\x62\xcb\x51\xd7\x2d\xc3\xd6\xe5\xda\x27\xca\x34\x13\xa9\xed\x17\xdd\x14\xae\xac\x3d\x1e\x6f\x8e\x24\xec\x8e\x99\x61\xba\x77\xd3\x8d\x9d\x45\x02\x30\x1d\x63\x97\xfe\xe9\xca\x01\x4e\x79\x7c\x55\x41\xcf\x78\x29\x96\x07\xc6\x9f\x6c\xd4\x8f\x67\x34\xf3\x70\xd4\xa0\x33\xaa\x21\x04\x9d\x31\x75\x35\x44\x39\x63\xca\xa7\x0f\x4c\x2a\xa7\xa9\x7c\x73\x74\x5e\x2e\x56\x34\x67\x2b\xbb\xe1\xd5\x39\xe3\x2c\xae\xdd\x4b\x74\x86\x62\x59\xa0\xca\xa5\x50\x08\xe1\x76\xc2\xf7\x58\x02\x0d\xa5\x6f\x4c\xed\x9b\x6a\x03\x61\x68\xfc\xdb\xb5\x9f\xae\xea\x54\xfb\x67\x75\x20\x84\x2e\x2b\xfb\xc3\xcc\x8c\x72\x79\x02\xe4\x0a\x67\xc4\x50\x8e\x85\xee\x69\xb9\x57\xa9\x7b\xf3\xd0\xb1\x65\x67\xb4\xbb\xa0\x17\x03\xe5\x01\xc0\x9a\xf5\x7d\xaf\x50\xe9\x7a\xd0\x85\x47\x22\x0b\x58\x32\x60\x02\x26\xc9\xa0\xc2\xba\x21\xba\x63\x1f\x4d\x77\x2a\xf0\x34\x85\x72\x9b\xfc\x6e\x11\x21\xe7\xef\x38\x55\xea\x5f\x74\x8f\x8b\x8f\xa6\xba\x36\x79\x33\x80\xc5\xe8\xe5\xd9\xe2\xe9\xd6\x8d\x48\x89\xbe\x4b\x2f\x53\xfc\xfe\x58\xc5\x68\x3a\xae\xd7\x60\x74\x38\x62\xc3\xe6\x9c\xa1\x4c\x78\xd5\x2a\x0d\x68\x23\x29\x94\xe4\xe8\x1b\xe1\xcb\xde\xc2\x49\xa7\xa8\xae\x4d\xbe\x3a\xc6\x2d\xc2\x67\xb9\xf6\x42\x33\x0c\x43\x20\x64\x0c\xe3\xd2\xe7\xc9\xcf\x1c\xa9\x42\x88\x32\x29\x15\x42\xfb\x5a\xec\xda\x0d\x5d\xd9\x44\x39\xf0\xfb\xfa\xbc\x53\x81\xb1\x78\x05\x9f\xdb\x4d\x4d\x6f\x5f\x4f\x7f\x60\x4e\xba\x3c\x29\xf5\xa2\x79\x39\x92\x97\xc6\x53\x48\xc3\x69\xac\x86\x40\x58\xd6\x31\xb7\x19\xe0\x45\xe5\xb6\x5a\xef\x39\x3f\x6e\xdc\xb4\x5d\xd9\x7d\x8e\x22\xd5\x99\x85\x7f\x14\x7c\xa7\xbb\xda\xe5\x7f\x21\xee\xbd\x5c\xee\xa8\x2f\x31\x78\xfa\x11\xdf\x9f\x7f\x76\x70\xd5\x26\x9a\x89\xae\x57\x50\x75\x5b\x03\x33\x7d\xf3\xb8\x33\x90\x7c\x61\x17\x00\x75\x1d\x3d\xd2\x02\x6c\x2d\xb5\xc1\x39\x23\x10\x6a\x9c\xbf\xfb\x80\x4a\xd1\x14\xfd\xea\x12\x72\x49\xea\xab\x66\xa8\x46\x02\x02\x7f\xb7\x3c\x4d\x75\x6b\x2a\xd3\x74\xf4\xbb\x03\x0d\x5e\x54\x60\xf7\xaf\xcb\x1c\x3a\x59\x84\x5c\xad\x75\xe5\xba\xad\x52\x78\x67\x99\x54\x00\x55\x54\x17\xf0\xb3\x0d\xf8\x0c\x37\x03\xb7\x9b\x95\xeb\x88\x60\x98\x15\x07\x9c\xdb\x79\xff\x12\x6e\x6c\xf7\xfd\x9b\x81\xaf\xd9\x79\xff\x2e\x62\x86\x57\x8b\x72\x66\xfb\xcd\x65\x83\x6b\xf3\x67\xe0\x7b\x77\x12\xcf\x85\xdd\xd9\xf4\x56\x97\xf4\x4a\x53\x7d\x50\xa3\x28\xba\x6f\xc8\xdd\xe9\xba\x64\x55\x66\x69\x7b\xff\x3a\x16\xcb\xdd\xa8\xef\xef\x65\x2a\x03\xf4\xaa\x42\x7c\x79\xeb\xda\xec\xe8\xbb\x02\x13\xe5\x37\xc7\x6e\x5f\xcb\x34\x6d\xd0\x60\xcf\x8e\xd4\x4b\x6b\x59\x1b\x1c\x81\xa7\x3f\x15\x9b\x99\xe3\xc6\x4b\x82\xa6\xfa\x93\xd1\x9f\x0d\x0f\xfc\xf6\xdb\x30\xa4\x5e\x9a\x5f\x75\xbe\xc6\x43\xda\x84\xe9\x4c\x54\xf7\x75\x55\xfd\x85\xb7\x57\x53\xd2\xdc\x7f\x5a\x5a\x16\xf2\x34\x2e\xb2\xdd\xb5\x40\x08\x77\x1f\xdd\x67\xea\xc6\xb4\x63\xcc\x9c\x0c\xfd\xfc\xa0\x32\x2b\xbf\x5b\xea\x87\x0d\xdf\x24\x8a\x9d\xff\x0a\x70\xc8\xee\x9c\x28\x6f\x86\x26\xad\x73\xfb\xd8\xd1\x61\x58\xde\x9c\xd7\x4f\xf2\x20\x34\xc6\x53\x6d\xbb\x15\xd4\xbe\x8f\x5a\x9e\x95\x29\x79\xda\xff\x12\xb1\x57\xf4\xdb\xff\x07\x00\x00\xff\xff\xc9\x39\x15\xf6\x77\x23\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 9079, mode: os.FileMode(420), modTime: time.Unix(1587988372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
