// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/crud.html
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutCrudHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x04\x04\x00\x00\xff\xff\xb7\xef\xdc\x83\x01\x00\x00\x00")

func viewLayoutCrudHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutCrudHtml,
		"view/layout/crud.html",
	)
}

func viewLayoutCrudHtml() (*asset, error) {
	bytes, err := viewLayoutCrudHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/crud.html", size: 1, mode: os.FileMode(420), modTime: time.Unix(1587639591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x8f\xa3\x36\x14\xbe\xef\x5f\xf1\xea\x1e\x98\xa9\x86\x90\x9d\xee\xc9\x0d\xe9\xa1\xbd\x56\xaa\x56\xed\x69\xb5\xaa\x1c\xfc\x00\x6b\x8c\x8d\x6c\xc3\xcc\x34\xca\xff\x5e\xd9\x90\x04\x02\x24\x19\xa9\x3e\x44\xe4\xf3\xfb\xe5\xef\x7d\x3c\xbc\xb1\xee\x5d\x22\xd8\x4c\xd7\xc8\xb7\x9f\x00\x00\x56\x92\xbd\xeb\xc6\xc5\x8a\xb5\xb0\x0f\x88\x5f\xaf\x82\xbb\x92\xc2\x97\xe7\x75\xfd\xf6\xcb\x09\xad\x98\x29\x84\xa2\xb0\x06\xd6\x38\x7d\x89\xc7\x46\x14\xa5\xa3\x30\xf6\xc9\xb4\xd4\x86\xc2\x6b\x29\x1c\x76\xe8\xe1\xd3\x28\xb1\xd4\x85\x1e\x64\xde\x69\xc3\xd1\xc4\x86\x71\xd1\x58\x0a\x3f\x0f\x63\xe5\x52\x33\x47\x41\x62\xee\x8e\xa1\x36\x49\x38\xd2\xf6\xd3\xc6\x61\x55\x4b\xe6\xb0\x3b\xd6\x86\x8b\x76\x7b\x72\xdc\x88\xb8\xcb\x76\x86\x7a\xb8\x44\xc6\xd1\x00\x0d\x51\x52\xb2\xdf\xb1\xec\xa5\x30\xba\x51\x9c\x46\x3f\xae\xd7\xeb\xe8\x40\xc6\x3e\xbd\x5f\x85\xaa\x81\x4a\x73\x4c\x49\xa9\x8d\xf8\x57\x2b\xc7\x24\x01\x57\x62\x85\x29\xe1\xcc\xbc\x10\x60\x99\x13\x2d\xc6\x8a\x79\xe8\x33\xf9\x60\x92\x90\xa8\x7c\x86\x4c\x32\x6b\x53\x32\x60\x8b\x40\x1f\xa8\xe3\xb6\xa3\x96\x6c\xff\x12\x4e\xe2\x26\x29\x9f\x17\x62\x71\xd1\x5e\x04\x53\xac\x5d\x4a\x9c\x8c\xf8\x3b\xc3\xdd\xc9\x2f\x68\x4c\x8e\x3c\x4e\xe8\x9d\x63\xbd\xdf\xb2\xc2\x13\x5f\x0a\x8e\xb1\x33\xa2\x28\x86\x5d\x80\x12\x3b\x2d\x45\x9f\xd7\xeb\xb6\x8c\x9e\x46\x8c\xe5\x79\xbe\xcc\x58\xdf\x9a\xbe\x11\xd2\x87\x21\x9d\x9c\x53\xe2\x55\xbb\xe0\x17\x7c\x8f\x12\x82\x36\xce\xb5\x49\x89\x70\x58\x81\x50\xe0\x23\x5e\xf1\x1b\xe4\x8d\x83\x4b\x1b\x8b\x3c\x25\xee\xbd\x46\x9d\x3f\x78\x64\x65\x9b\xdd\x3f\x7e\xff\x11\xd2\x14\xa2\x46\x71\xcc\x85\x42\x1e\x11\xa0\x9d\x3c\x82\x95\x7f\xbc\x91\xa7\xcf\x25\x32\xad\x80\xfa\x0c\xbd\xab\x07\xc8\xd6\x77\xc2\x3f\xdd\x11\xc3\xe8\xc6\xa1\x89\xa5\x50\x2f\x40\x9d\x4e\x49\x81\xee\xab\xc7\xfe\x64\xae\x7c\x38\x95\xf3\x48\xc0\xb1\x22\x25\xb6\x66\x8a\x6c\xf7\xfb\xb0\xe1\xbc\xd2\x0e\x87\x4d\x32\x08\x72\x83\x9e\x64\xc0\xcf\x4d\x26\x6d\xb3\x0b\x4d\xbc\xc6\xe3\x0f\x63\x1e\xef\x38\xf1\xa9\xbb\x56\x6a\x97\x92\x70\x88\x3b\xfc\xe0\x3e\xc6\xc7\xd4\xdc\xae\x26\x19\xcf\xab\x1b\xd9\x87\xda\x0a\xd2\xb4\xcd\xce\x2b\x73\x44\xca\x49\x4c\xb6\xd9\xdd\xab\x25\xb8\xad\x85\x63\xb4\x4b\x29\x78\xfc\xe3\x4a\x80\x0f\xaa\x21\x39\xc9\xe1\xca\x8b\x7b\x83\xcc\xf9\xb1\x75\x0a\x2f\x26\x93\x0b\x86\xd3\xeb\x3c\x96\x6a\xc6\xb9\x50\x05\x85\x68\x0d\xcf\x5f\xea\xb7\xf0\xb3\x3c\x8a\x7a\x4e\x5a\x81\xaf\xdb\x13\x43\xe1\xdf\x6c\x1d\xb3\x5f\xa8\x19\xfc\x12\xeb\x67\xf5\x90\x84\x8d\xcd\x8c\xa8\xfb\xfd\x4a\xf3\x46\xe2\x0a\xdf\x6a\x6d\x9c\x85\x74\xf0\xb1\xe5\xcc\x31\x0a\x79\xa3\x32\x27\xb4\x82\x87\xc7\xc1\x9e\x5f\x06\x5d\x63\xd4\x05\xe8\x57\x92\x40\xa6\x55\x2e\x0a\x28\xa4\xde\x31\x19\x46\x24\x48\x61\xdd\xc4\xd4\xef\x50\xf8\x36\x8d\xe1\x97\x7f\x75\x28\x44\x42\xdb\xb8\x46\x5d\x4b\x8c\x9e\x66\xed\x82\xce\x28\x44\x7f\x68\x8e\x72\xc1\xc6\x6b\x94\x42\x54\x05\x93\x89\xc5\xe1\xe9\xff\xa9\xe0\xb7\xaf\x7f\xff\x7e\xbd\x80\xcc\x34\x7c\x26\xff\xf7\xa9\xd3\x84\xc5\xa0\x11\x3b\xb1\xeb\xe0\x45\x12\x6b\xe6\xef\x6a\xd1\x4f\x0b\x65\x19\xe4\xc2\x60\xe6\x28\xec\x47\x14\x4d\x87\xd4\xe1\x69\xa6\xd5\x70\x49\xed\x7c\x96\xbe\x88\xe4\x9a\x4d\x63\xa4\x37\x31\xa8\x38\x9a\x5f\xbd\x47\x9a\x74\x4a\x4e\x16\xbb\x76\xbd\xa2\xc0\xf5\xf5\x82\xae\x98\x5c\xa9\x67\xa9\x89\x23\xe8\xcc\xe0\xe1\x69\x70\xe1\xad\xea\xc6\x21\xa7\xb0\x1f\xa0\x15\xba\x52\x73\x4b\x2f\x8e\x33\x1c\xb4\xc3\x17\x31\xcc\xdb\x99\xa3\xb7\xcc\xf4\x6a\x80\x14\x5c\x29\xec\x6a\x41\x32\xb9\x36\xf0\xe0\xad\x85\xff\x4c\x74\x46\x73\x01\xfd\x12\x79\x97\xd0\xdf\x4d\x3a\xcb\x6f\xe2\xfb\x6a\xa9\x84\xe3\xea\x67\xc3\xd9\xc1\xf3\x37\x6b\x3d\x23\xb4\xa9\xc4\xbb\x68\x51\xb4\x44\xf0\xf9\xbe\xdf\x8d\xb6\xff\x02\x00\x00\xff\xff\x83\x3c\xc3\xa2\xcb\x0c\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3275, mode: os.FileMode(420), modTime: time.Unix(1587826511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\xcc\x4b\xbc\x80\x1d\x60\x2d\xa5\x39\x14\x85\xd6\x32\xb6\xe8\x02\xbd\xec\x02\x5b\x6c\x7b\x0a\x02\x83\x91\x46\x16\xbb\x14\x29\x90\x94\x1d\x37\xf0\x7f\x2f\x48\xc9\xb6\x24\x53\x92\xb3\x6d\xd1\xad\x0e\x81\x3c\x9c\x2f\xce\x3c\xcf\x90\xca\xd2\x60\x51\x72\x6a\x70\x75\x03\x00\xb0\x4c\xd9\xb6\x7e\x73\xbf\xd8\x42\xc9\xdd\xf9\x77\x23\x4b\x24\x07\x5d\x52\x11\x93\xef\xee\x49\x77\xb5\xd1\xc8\xa4\x2a\x20\xe2\xf4\x09\xf9\x62\xc7\x52\x93\xc7\xe4\xfe\xee\x8e\x40\x81\x26\x97\x69\x4c\x4a\xa9\x8d\xc7\xb2\x65\xbd\x60\x06\x0b\x70\x1e\x62\xf2\x71\xff\xf9\x97\x0f\x60\xe8\x13\xc7\x01\xab\xc6\x92\x56\x46\x2e\x12\x59\x94\x1c\x0d\x42\x94\x52\x43\x63\xe2\xec\xd6\x9c\x69\x43\x60\xbb\x28\x64\x6a\x5d\xd6\x42\x41\x0b\x24\x83\x0e\x2f\x9e\x92\xd3\x04\x73\xc9\x53\x54\x31\xf9\x89\xb3\xe4\x0b\x18\x09\x49\x2e\xa5\x46\xe8\x24\xb9\x0c\x7b\xc9\x0c\x6c\x36\x6c\xed\x76\xba\x1e\xa3\x7b\x7f\xaa\x8c\x91\x02\xcc\xbe\xc4\x98\x94\x8a\x15\x54\xed\x09\xbc\x4b\x6c\x9a\x56\x80\x5b\x86\x3b\xb2\xfa\x54\xbf\xd8\xc8\xb5\xc5\xf5\x4e\x75\x95\x24\xa8\xf5\xd9\xe9\x06\x05\x2a\x6a\x90\xac\x7e\x6e\xde\xa6\xdc\x4e\x6c\xf8\xb8\xec\x05\x15\xe5\xa8\x4c\x93\x0a\x01\x9d\xcb\xdd\x82\x25\x83\x81\x2c\x40\x41\x73\x69\x62\x92\xa2\x4e\x6c\x4b\xac\xc8\x1f\xd3\xb9\xee\xe1\x3c\x74\x40\x6f\x91\x21\xec\xb1\x61\x92\x1d\xf7\x77\x3e\x76\xa4\x6c\x0b\xda\xec\x39\xc6\xc4\xe0\xb3\x59\x50\xce\x36\x22\x02\xc5\x36\xf9\x08\x27\x9a\x46\x1c\x2b\x9f\x53\x91\x72\xfc\x8c\x1c\x13\xf3\x23\xe7\x73\xa3\x2a\xbc\x25\xab\x5a\x00\x94\xf3\xc9\x46\x4c\xba\xcc\x28\xd7\xd6\xe7\x6f\x42\x5f\xe5\x75\x19\x76\x66\xc7\x49\xfc\xa4\xbc\xdd\x74\x44\x81\x28\x91\xbc\x2a\x84\x3e\x12\x32\x91\x9c\x74\x79\x6b\xdf\x09\x28\xcc\x62\x52\xe7\xc1\xa4\x20\xf0\x4e\x8a\xc5\xe9\xe7\x22\xc9\xa9\xd8\xe0\xd1\xe2\x24\x5f\xd7\xf2\xa1\xa2\x1e\x27\x9f\x43\xc9\x42\x27\xd2\x02\xeb\x05\x94\xdc\xbd\x01\x26\x52\x7c\x86\x03\x69\x10\x54\x3b\xae\x77\x3e\x3e\x81\x3a\x84\x61\x22\x93\x04\x34\xfb\xc3\x92\xa7\xa0\x9c\x9f\xa9\x23\x4b\x14\x1f\x65\x4a\xf9\xdc\x85\xba\x25\xab\xf7\x68\x28\x9b\xec\x5b\x37\xf3\xed\x82\x65\x31\x51\x72\x17\x30\xbd\x4e\x59\x96\x41\x1c\xc3\x6c\x3f\x1b\xc9\xd1\x97\xe7\x8e\x2a\xc1\xc4\x66\x24\xd5\xf7\x2c\xcb\xba\xe9\xda\x68\x57\x25\x1b\x76\x4f\x98\xd7\xac\x5b\xff\xae\xf4\x5f\x41\xcd\xc2\x66\x7b\x9e\xf7\x4c\xaf\xed\xc4\x58\xa7\xae\xca\x6b\x27\x25\x10\x19\x66\x2c\x11\xdb\xd2\xb5\x93\x11\x68\xce\xad\x1f\xfa\x24\x5e\x96\x0a\x57\xcb\x44\xa6\xb6\xfc\x96\xc1\x3d\xf3\x44\x0a\x83\xc2\xd8\x81\x63\x95\x56\xcb\xd0\x1a\x74\x72\x75\xb9\x35\x07\x6e\xcd\x9a\x76\x15\x96\x3a\x51\xac\x3c\x4e\x3a\x1b\x21\xfc\x9d\x6e\x69\x2d\x6d\x92\x29\x64\x5a\x71\x0c\xf0\xb9\x94\xca\x68\x88\xe1\xe5\x14\xc0\x12\x26\x82\xac\x12\x8e\x03\x30\xbf\x6d\xad\xd9\x47\xa1\xa9\x94\xe8\x09\xed\x73\x3e\x27\x23\x78\x78\x7c\x33\xb0\x6e\x8f\xcc\x08\x66\xb3\xa1\xf5\x44\xf2\x08\x1e\xbc\xad\xbe\x0c\x79\x32\xdd\x97\xd6\xa9\xc3\x96\xc7\xf3\xf1\x71\x2d\x89\xe0\xfb\xbb\x61\x95\x66\x9a\xce\x12\x14\x06\xd5\xcc\xab\x77\xf0\x9b\x8f\xa4\x67\x11\x11\xc1\xac\xa4\x26\x1f\x49\xef\x0b\xee\x23\x98\x65\x8c\xe3\x7a\x44\xf3\xab\xa3\xcb\xd2\x1e\xb1\x4c\x8a\x91\x14\xec\xb8\x8a\xa0\x3b\xaf\x26\xeb\x79\x7f\x37\x50\xd0\xd7\xa7\x5a\xf7\xf1\x34\x81\xff\x95\x5e\x0e\x42\xb7\x66\x86\x0f\xda\x3b\xca\x0c\x13\x1b\xdb\x3a\xed\xd7\xf0\xcd\x8f\x08\xdc\x19\x79\xa9\xec\x9b\x07\x7e\xce\x5c\x0e\x1e\xab\xd7\x51\x3b\xdc\x78\xf6\x5a\x5f\xa4\x75\xd4\xeb\xc5\x06\xcd\xaf\x76\xab\x1f\x1c\x89\x87\x67\x80\x7d\x38\x1a\x30\x39\x35\x10\x83\xc9\x99\xbe\xb9\x2c\x5a\xce\x74\x40\x9f\x99\xd4\xde\xca\x07\xf6\x12\x3f\x9f\x85\xb4\x64\xa1\xcb\x3f\x3c\x0f\x90\xd9\xad\xdf\xc4\xe4\x28\xe6\x0a\x75\x29\x85\x46\x88\x57\x23\x50\x62\x19\x9c\x34\x03\xdb\xb9\xc0\x8d\xdc\x38\xb6\x70\xf5\xed\xa7\x9b\x3a\x35\xc1\x39\x1d\x88\xa1\xeb\xca\xfd\xb1\x2b\x83\x5e\x0e\x80\x5c\xe3\x44\x18\x77\x6d\xec\x65\x59\xe8\x8d\x7f\xf3\xd0\xe9\x65\x47\xda\x35\xe8\x41\xba\xbe\x97\xb9\xb6\xbe\xef\x8d\x76\x73\x14\xfa\xea\xe1\xda\x77\x06\xbe\x6d\xf3\x51\xfd\x42\x37\x91\x42\x4b\x8e\x81\xbd\xb0\xcc\x7b\x86\xa3\xc9\x35\x9f\x15\x7f\x19\x6b\xb6\xdb\xad\xb8\xf6\x90\xb1\xad\x26\x64\xa8\xd3\x75\xe9\xc9\x27\x8e\x54\xa3\xef\x13\xec\xf6\xad\xd7\xae\x3e\xfd\x2e\x96\x0e\x7f\x03\xfc\x9b\x5a\xcc\xde\xc0\x4b\xfb\xa8\xec\x6d\xeb\xf0\x0f\x52\xe3\x7a\x6e\xf4\x40\x35\x1f\xa0\xc7\x08\x92\xbf\x19\x7e\x1c\x3f\x42\xa7\x30\x78\x82\x58\x7b\xd8\x07\x1c\xc5\xc6\xe4\xae\x76\x83\x95\xf3\x62\xcd\x99\xff\x8f\xf8\xf7\x72\x3d\xca\xfa\xcc\xe8\xaf\xbf\x1a\x85\xc7\x72\x7c\xeb\x30\xec\x8c\x9c\x8e\x9b\xff\x02\xe8\xfa\x9f\x6f\x43\xf3\xd7\x77\x13\x68\x5a\xdd\x1a\xb1\x0f\xce\xc9\x63\xe0\xae\x8e\x8d\xd6\x15\xfe\xdc\x7d\x61\xc2\x9b\xbd\x88\xfa\x5d\xf9\x6e\x34\xd6\x99\xaa\x70\xfa\x38\x3a\xff\x9b\x40\x1b\x6a\x2a\x3d\x58\x80\xff\x2b\xcc\x74\x70\xba\x10\x36\x6f\x2d\xc3\xb7\x63\xc1\xfc\x1f\xf4\x73\x25\x77\xc3\x11\xdb\xf4\x86\x18\x1e\x1e\x2f\xd4\x32\xa9\x60\xbe\xa5\x0a\x18\x30\x01\x43\xce\xbc\x0e\x83\xb2\xd2\xb9\x8b\xff\xc0\x5a\x15\xf6\x1c\x36\x87\x2b\x2e\x71\xb2\x12\x06\xd3\xb1\xc1\xe5\x12\x68\xdf\xea\xe6\x67\x58\xd6\x3e\x0f\x37\xcb\xb0\xfe\x34\x5c\xfd\x19\x00\x00\xff\xff\x25\x74\x87\x32\xcc\x15\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5580, mode: os.FileMode(420), modTime: time.Unix(1587883802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/crud.html":    viewLayoutCrudHtml,
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"crud.html":    &bintree{viewLayoutCrudHtml, map[string]*bintree{}},
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
