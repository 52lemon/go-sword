// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x8b\xe3\x36\x10\x7f\xdf\x4f\x31\x15\x85\x64\x61\xe3\x6c\x17\x5a\x8a\x2f\x0a\x57\x7a\xd0\x97\x3b\xb8\x72\xed\xd3\x72\x04\xad\x3d\x8e\xd5\x93\x25\x23\x29\xc9\xa6\x47\xbe\x7b\x91\xec\x24\xb6\x23\xdb\xb9\x6b\xcb\xad\x1f\x96\x78\x34\xff\x34\x33\xbf\x99\xf1\x2e\x2c\x16\xa5\x60\x16\x97\x37\x00\x00\x8b\x94\x6f\xc1\xd8\xbd\x40\x4a\x0a\xa6\xd7\x5c\xce\xac\x2a\x63\xf8\xf1\xbe\x7c\x26\x15\x8b\x67\xe3\x33\xad\x76\xe7\xf7\x9a\x96\x28\x01\xa6\x64\x92\x92\x1f\x1e\x48\xfb\xb4\xe6\xc8\x94\x2e\x20\x16\xec\x09\xc5\x6c\xc7\x53\x9b\x53\xf2\x70\x7f\x4f\xa0\x40\x9b\xab\x94\x92\x52\x19\x1b\x90\x6c\x48\xcf\xb8\xc5\x02\xbc\x06\x4a\xde\xed\x3f\xfc\xfe\x16\x2c\x7b\x12\xd8\x23\x55\x4b\xb2\x8d\x55\xb3\x44\x15\xa5\x40\x8b\x10\xa7\xcc\x32\x4a\xbc\xdc\x4a\x70\x63\x09\x6c\x67\x85\x4a\x9d\xca\x8a\x28\x59\x81\xa4\x57\xe1\xc5\x53\x0a\x96\x60\xae\x44\x8a\x9a\x92\x5f\x05\x4f\x3e\x41\x8e\x1a\x21\x8a\x22\xb2\x5c\xcc\x3b\xf6\x7b\xee\x37\x6f\x5c\x70\x3c\x04\x83\xd7\x7d\xda\x58\xab\x24\xd8\x7d\x89\x94\x94\x9a\x17\x4c\xef\x09\xbc\x4e\x9c\x67\x8e\x80\x5b\x8e\x3b\xb2\x7c\x5f\xfd\x70\x96\x2b\x89\xeb\x95\x9a\x4d\x92\xa0\x31\x67\xa5\x6b\x94\xa8\x99\x45\x02\x71\xca\x8d\x0b\x62\x4a\x09\x37\xab\xe3\xcb\xea\xc8\xb0\x7a\xb2\x92\x2c\x7f\xab\xdf\xc6\x6c\x8f\x44\xe5\x78\x1c\x2c\x36\x26\x50\xdb\xda\x5f\x02\x26\x57\xbb\x19\x4f\x7a\x0d\xb9\xc2\x05\x23\x94\xa5\x24\x45\x93\xb8\xbc\x39\x52\xd8\xa6\x57\xdd\xa9\xff\xb9\x07\x40\x03\x24\xf3\x0e\x4a\x46\x51\xf3\x70\x1f\x42\x4d\x03\x92\x16\x9f\xed\x8c\x09\xbe\x96\x31\x68\xbe\xce\x07\xb0\x52\x67\xeb\x98\x9e\x9c\xc9\x54\xe0\x07\x14\x98\xd8\x5f\x84\x98\x5a\xbd\xc1\x5b\xb2\xac\x08\xc0\x84\x18\x4d\xc4\xa8\xca\x8c\x09\xe3\x74\xfe\x29\xcd\x55\x5a\x17\xf3\x94\x6f\x03\xe4\x27\x1d\xcc\xa6\x07\x26\xc4\x89\x12\x9b\x42\x9a\x23\x50\x13\x25\x48\x1b\xcf\xee\x37\x01\x8d\x19\x25\x95\x1f\x5c\x49\x02\xaf\x95\x9c\x9d\x5e\x67\x49\xce\xe4\x1a\x8f\x12\x27\xfa\xaa\xa2\xf7\x05\xf5\xd8\x2a\x7d\x95\xcc\x4c\xa2\x5c\x61\x7d\x06\xad\x76\x77\xc0\x65\x8a\xcf\x70\x20\x75\x05\x55\x8a\xab\x9b\x0f\x77\xa6\x16\xaa\xb8\xcc\x14\x01\xc3\xff\x76\x08\x2b\x98\x10\x67\x7c\xa9\x12\xe5\x3b\x95\x32\x31\xf5\xa6\x6e\xc9\xf2\x0d\x5a\xc6\x47\xf3\xd6\xf6\x7c\x3b\xe3\x19\x25\x5a\xed\x22\x0f\xcd\x2c\x03\x4a\x61\xb2\x9f\x0c\xf8\x18\xf2\x73\xc7\xb4\xe4\x72\x3d\xe0\xea\x1b\x9e\x65\x6d\x77\x9d\xb5\xab\x9c\x9d\xb7\x47\xd2\x97\x9c\x3b\xfd\x3e\xf4\x5f\x01\xcd\xc2\x79\x7b\x9e\x03\xdc\xac\x5c\xc7\x58\xa5\x3e\xca\x2b\x4f\x25\x10\x5b\x6e\x1d\x10\x9b\xd4\x95\xa7\x11\xa8\xe7\xd9\xcf\x5d\x10\x2f\x4a\x8d\xcb\x45\xa2\x52\x17\x7e\x87\xe0\x8e\x78\xa2\xa4\x45\x69\x5d\xc3\x71\x4c\xcb\xc5\xdc\x09\xb4\x7c\xf5\xbe\xd5\x13\xba\x42\x4d\x33\x0a\x0b\x93\x68\x5e\x1e\x3b\x9d\xb3\x30\xff\x8b\x6d\x59\x45\xad\x9d\x29\x54\xba\x11\x18\xe1\x73\xa9\xb4\x35\x40\xe1\xf3\xc9\x80\x03\x4c\x0c\xd9\x46\x7a\x0c\xc0\xf4\xb6\x71\xe6\x1e\x8d\x76\xa3\x65\x87\xe8\x9e\xf3\xfc\x8c\xe1\xf1\xe3\x5d\xcf\xb9\x1b\xa5\x31\x4c\x26\x7d\xe7\x89\x12\x31\x3c\x06\x53\x7d\x69\xf2\x24\xba\x2f\x9d\x52\x5f\x5b\x01\xcd\xc7\xc7\xa7\x24\x86\x9f\xee\xfb\x59\xea\x6e\x3a\x49\x50\x5a\xd4\x93\x20\xdf\x21\x2c\x3e\xe0\x9e\xab\x88\x18\x26\x25\xb3\xf9\x80\x7b\x9f\x70\x1f\xc3\x24\xe3\x02\x57\x03\x9c\x5f\x6d\x5d\x95\x6e\xc4\x72\x25\x07\x5c\x70\xed\x2a\x86\x76\xbf\x1a\x8d\xe7\xc3\x7d\x4f\x40\xbf\xdc\xd5\x2a\x8f\xa7\x0e\xfc\x4d\x72\xd9\x5b\xba\x15\x32\x42\xa5\xbd\x63\xdc\x72\xb9\x76\xa9\x33\x61\x8e\x50\xff\x88\xc1\xcf\xc8\x4b\xe6\x50\x3f\x08\x63\xe6\xb2\xf1\x84\xf9\xfa\x36\xaf\xd8\x0d\xfe\x36\xfb\xe1\x26\x10\x9b\x6a\x21\x37\x71\x27\x77\x6b\xb4\x7f\x38\xa5\x6f\x3d\xe8\xfb\x7b\x86\x7b\x04\x5a\xb0\x39\xb3\x40\xc1\xe6\xdc\xdc\x5c\x06\x39\xe7\x26\x62\xcf\x5c\x99\x60\xa6\x22\xf7\x31\x30\x9d\xcc\x59\xc9\xe7\xfe\xbe\xf3\x73\xc3\x99\xdc\x86\x45\x6c\x8e\x72\xaa\xd1\x94\x4a\x1a\x04\xba\x1c\x28\x3d\x9e\xc1\x89\x33\x72\x99\x8e\x7c\x8b\xa6\xd4\x95\x77\xe8\x3e\x6d\xd7\x99\x8d\xce\xee\x00\x85\xb6\x2a\xff\xc7\x9d\xf4\x6a\x39\x00\x0a\x83\x23\x66\xfc\x9a\xd9\xf1\xb2\x30\xeb\xf0\xe5\xa1\x95\xcb\x16\xb5\x2d\xd0\x81\x40\xb5\xc7\xf9\xb4\xbe\xe9\x8c\x02\x7b\x24\x86\xe2\xe1\xd3\x77\x06\x8a\x4b\xf3\x91\xfd\x82\x37\x51\xd2\x28\x81\x91\x5b\x70\xa6\x1d\xc1\x41\xe7\xea\x6f\x95\x7f\x5d\x6b\x2e\xdb\x0d\xbb\x6e\x28\x01\xa5\x14\x08\xe9\x4b\x75\x15\x7b\xf2\x5e\x20\x33\x08\x49\xae\x94\x41\x68\x7e\x70\xde\xbe\x0a\xca\x55\xe3\xf2\xe2\xe8\xf0\x1f\xd4\x7f\x1d\x8c\xc9\x1d\x7c\x6e\xce\xd6\xce\xbd\x0e\xff\x23\x36\xae\x07\x47\xa7\xaa\xa6\x3d\xf8\xe8\x2f\xe5\x93\xa6\xbe\x56\x06\xb4\x6a\xa7\xe1\x34\xc0\x8b\xc2\xd8\xd1\xef\xb1\x3a\x3e\x95\x69\x73\xc0\x44\x02\xe5\xda\xe6\x3e\xfc\xbd\xc1\x0f\x96\xab\x17\xff\x8e\x84\xef\x72\x7d\xa1\xbe\x44\xf0\x74\x11\xdf\x3d\xff\x62\x70\x1d\x53\x34\x82\xae\xbb\x6a\xe6\x5f\x24\xe9\x9b\xa3\xae\xd5\x62\x5b\x6a\x06\x4a\xf9\xc5\x00\xa4\xfb\x79\xdb\x37\x6f\x42\x9b\x52\x5d\x02\x8d\x91\xf2\xe8\x95\x7c\x8c\xfc\x6a\x5d\x73\x5d\xa1\xcf\xef\x53\x23\xda\xdc\xa2\x1e\x56\x15\xda\xf8\x9c\x32\xbd\xc1\xf1\xf1\x7b\xfe\x37\x8a\xb1\xcc\x6e\x4c\x6f\x00\xbe\xd7\x98\x99\xe8\xb4\x30\xd7\xbf\x1a\x82\xaf\x86\x8c\x85\xff\xe1\x31\xd5\x6a\xd7\x6f\xb1\x59\xe5\x40\xe1\xf1\xe3\x05\x5b\xa6\x34\x4c\xb7\x4c\x03\x07\x2e\xa1\x4f\x59\x50\x61\x54\x6e\x4c\xee\xed\x3f\xf2\x46\x84\x03\xed\xe1\x70\xc5\xd2\xaa\x36\xd2\x62\x3a\xd4\x64\xbd\x03\xcd\x2d\x76\x7a\x2e\xcb\x4a\xe7\xe1\x66\x31\xaf\x3e\x9d\x97\xff\x04\x00\x00\xff\xff\x6d\xdb\x3e\x8e\x1d\x17\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5917, mode: os.FileMode(420), modTime: time.Unix(1587958667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
