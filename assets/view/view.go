// Code generated for package view by go-bindata DO NOT EDIT. (@generated)
// sources:
// view/layout/default.html
// view/layout/model.html
package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewLayoutDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xab\x36\x14\xdd\xe7\x57\xdc\xaa\x0b\x92\x4e\x30\x7e\xe9\x5b\xa9\xc6\x5d\xbe\x6d\xa7\xdb\x37\x99\x8e\x8c\x2e\xa0\x89\x90\x18\x49\x90\xa4\x1e\xff\xf7\x37\x12\xd8\x06\x03\xb6\xa3\x45\xc6\x39\xba\x9f\xe7\x1e\x2e\x6c\xac\xfb\x94\x08\x36\xd3\x35\xf2\xed\x03\x00\xc0\x4a\xb2\x4f\xdd\xb8\x58\xb1\x16\xf6\x01\xf1\xe7\x5d\x70\x57\x52\xf8\xfe\xb2\xae\x3f\xfe\x3a\xa1\x15\x33\x85\x50\x14\xd6\xc0\x1a\xa7\x2f\xf1\xd8\x88\xa2\x74\x14\xc6\x3e\x99\x96\xda\x50\x78\x2f\x85\xc3\x0e\x3d\x3c\x8c\x12\x4b\x5d\xe8\x41\xe6\x9d\x36\x1c\x4d\x6c\x18\x17\x8d\xa5\xf0\xe7\x30\x56\x2e\x35\x73\x14\x24\xe6\xee\x18\x6a\x93\x84\x96\xb6\x0f\x1b\x87\x55\x2d\x99\xc3\xae\xad\x0d\x17\xed\xf6\xe4\xb8\x11\x71\x97\xed\x0c\xf5\x70\x89\x8c\xa3\x01\x1a\xa2\xa4\x64\xbf\x63\xd9\x5b\x61\x74\xa3\x38\x8d\x7e\x5f\xaf\xd7\xd1\x81\x8c\x7d\x7a\xbf\x0a\x55\x03\x95\xe6\x98\x92\x52\x1b\xf1\xbf\x56\x8e\x49\x02\xae\xc4\x0a\x53\xc2\x99\x79\x23\xc0\x32\x27\x5a\x8c\x15\xf3\xd0\x37\xf2\xc5\x24\x21\x51\xf9\x02\x99\x64\xd6\xa6\x64\xc0\x16\x81\x3e\x50\xc7\x6d\x47\x2d\xd9\xfe\xd0\xb1\x7d\xd7\x86\x6f\x92\xf2\x65\x21\x1c\x17\xed\x45\x3c\xc5\xda\xa5\xdc\xc9\x88\xc2\x33\xdc\x35\x7f\xc1\x64\x72\xa4\x72\xc2\xf0\x1c\xf1\xfd\x95\x15\x9e\xfb\x52\x70\x8c\x9d\x11\x45\x31\x1c\x04\x94\xd8\xc9\x29\xfa\xb6\x5e\xb7\x65\xf4\x3c\x22\x2d\xcf\xf3\x65\xd2\xfa\xe9\xf4\xb3\x90\x3e\x0c\xe9\x14\x9d\x12\x2f\xdc\x05\xbf\xe0\x7b\x54\x11\xb4\x71\xae\x4d\x4a\x84\xc3\x0a\x84\x02\x1f\xf1\x8a\xdf\x20\x6f\x1c\x5c\xda\x58\xe4\x29\x71\x9f\x35\xea\xfc\xd1\x23\x2b\xdb\xec\xfe\xf3\xf7\x4f\x90\xa6\x10\x35\x8a\x63\x2e\x14\xf2\x88\x00\xed\x14\x12\xac\xfc\xcf\x1b\x79\xfa\x5c\x22\xd3\x0a\xa8\xcf\xd0\xbb\x7a\x80\x6c\xfd\x24\xfc\xaf\x3b\x62\x18\xdd\x38\x34\xb1\x14\xea\x0d\xa8\xd3\x29\x29\xd0\xfd\xeb\xb1\x7f\x98\x2b\x1f\x4f\xe5\x3c\x11\x70\xac\x48\x89\xad\x99\x22\xdb\xfd\x3e\x5c\x38\xe1\x24\x1e\x0e\x9b\x64\x10\xe4\x06\x3d\xc9\x80\x9f\x9b\x4c\xda\x66\x17\x86\x78\x8d\xc7\xdf\xc6\x3c\xde\xd1\xf1\x69\xba\x56\x6a\x97\x92\xd0\xc4\x1d\x7e\x70\x1f\xe3\x63\x6a\x6e\x57\x93\x8c\x57\xd6\x8d\xec\x43\x6d\x05\x69\xda\x66\xe7\x95\x39\x22\xe5\x24\x26\xdb\xec\xee\xd5\x12\xdc\xd6\xc2\x31\xda\xa5\x14\x3c\xfe\x75\x25\xc0\x17\xd5\x90\x9c\xe4\x70\xe5\xc1\xbd\x41\xe6\xfc\xda\x3a\x85\x17\x93\xcd\x05\xc3\xed\x75\x5e\x4b\x35\xe3\x5c\xa8\x82\x42\xb4\x86\x97\xef\xf5\x47\xf8\xb3\xbc\x8a\x7a\x4e\x5a\x81\xef\xdb\x13\x43\xe1\xbf\xd9\x3a\x66\x5f\x52\x33\xf8\x25\xd6\xef\xea\x21\x09\x1b\x9b\x19\x51\xf7\xf7\x95\xe6\x8d\xc4\x15\x7e\xd4\xda\x38\x0b\xe9\xe0\x7d\xcb\x99\x63\x14\xf2\x46\x65\x4e\x68\x05\x8f\x4f\x83\x3b\x7f\x0c\xba\xc6\xa8\x0b\xd0\x9f\x24\x81\x4c\xab\x5c\x14\x50\x48\xbd\x63\x32\xac\x48\x90\xc2\xba\x89\xa9\xbf\xa1\xf0\x73\x1a\xc3\x1f\xff\xe8\x50\x88\x84\xb6\x71\x8d\xba\x96\x18\x3d\xcf\xda\x05\x9d\x51\x88\x7e\xa0\x42\xc3\xdc\x92\x99\x97\x29\x85\xc8\xbf\x9a\x65\x34\xb1\x38\xbc\x4e\xbd\x26\x8d\x84\x31\xd9\x89\x5d\x07\x2f\xf6\x51\x33\xff\xc5\x14\xfd\xb1\x50\x97\x41\x2e\x0c\x66\x8e\xc2\x7e\x54\xe2\x74\x4f\x1c\x9e\x67\xd8\x9e\xb4\x36\x9f\xa5\x2f\x22\xb9\x66\xd3\x18\xe9\x4d\x0c\x2a\x8e\xe6\x6f\xef\x91\x26\x9d\x98\x92\x45\xd6\x46\xd0\xb9\xe4\xc3\xf3\xe0\x3b\xaf\xaa\x1b\x87\x9c\xc2\x7e\x80\x56\xe8\x4a\xcd\x2d\xbd\xe8\x68\xb8\x5c\x86\xe2\x0b\x3b\x66\xa6\xfb\x96\x99\x9e\x7e\x48\xc1\x95\xc2\xae\x16\x66\x94\x6b\x03\x8f\xde\x5a\xf8\xd5\xd8\x19\xcd\x05\xf4\x47\xe4\x5d\x42\xff\x3e\xee\x2c\x7f\x8a\xd7\xd5\x52\x09\xc7\xd3\x3f\x0f\x67\x07\x4f\xe0\xac\xf5\xcc\x64\xa7\x9a\xea\xa2\x45\xd1\x12\xc1\xe7\xcf\xdc\xee\x71\xfe\x15\x00\x00\xff\xff\xac\xc8\x71\x4e\xc2\x0b\x00\x00")

func viewLayoutDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutDefaultHtml,
		"view/layout/default.html",
	)
}

func viewLayoutDefaultHtml() (*asset, error) {
	bytes, err := viewLayoutDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/default.html", size: 3010, mode: os.FileMode(420), modTime: time.Unix(1587959479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewLayoutModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x8b\xe3\x36\x10\x7f\xdf\x4f\x31\x15\x85\x64\x61\xe3\x6c\x17\x5a\x8a\x2f\x0e\x57\x7a\xd0\x97\x3b\xb8\x72\xed\xd3\x72\x04\xad\x3d\x8e\xd5\x93\x25\x23\x29\xc9\xa6\x47\xbe\x7b\x91\x6c\x27\xb6\x23\x39\xb9\x6b\xcb\xad\x1f\x96\x78\x34\xff\x34\x33\xbf\x99\xf1\x2e\x0c\x96\x15\xa7\x06\x97\x37\x00\x00\x8b\x8c\x6d\x41\x9b\x3d\xc7\x84\x94\x54\xad\x99\x98\x19\x59\xc5\xf0\xe3\x7d\xf5\x4c\x6a\x16\xc7\xc6\x66\x4a\xee\x4e\xef\x0d\x2d\x95\x1c\x74\x45\x45\x42\x7e\x78\x20\xfd\xd3\x86\x23\x97\xaa\x84\x98\xd3\x27\xe4\xb3\x1d\xcb\x4c\x91\x90\x87\xfb\x7b\x02\x25\x9a\x42\x66\x09\xa9\xa4\x36\x1e\xc9\x8e\xf4\x8c\x19\x2c\xc1\x69\x48\xc8\xbb\xfd\x87\xdf\xdf\x82\xa1\x4f\x1c\x03\x52\x8d\x24\xdd\x18\x39\x4b\x65\x59\x71\x34\x08\x71\x46\x0d\x4d\x88\x93\x5b\x71\xa6\x0d\x81\xed\xac\x94\x99\x55\x59\x13\x05\x2d\x91\x04\x15\x9e\x3d\x15\xa7\x29\x16\x92\x67\xa8\x12\xf2\x2b\x67\xe9\x27\x28\x50\x21\x44\x51\x44\x96\x8b\xf9\xc0\x7e\xe0\x7e\xf3\xce\x05\x2f\x87\x60\xf4\xba\x4f\x1b\x63\xa4\x00\xb3\xaf\x30\x21\x95\x62\x25\x55\x7b\x02\xaf\x53\xeb\x99\x25\xe0\x96\xe1\x8e\x2c\xdf\xd7\x3f\xac\xe5\x5a\xe2\x7a\xa5\x7a\x93\xa6\xa8\xf5\x49\xe9\x1a\x05\x2a\x6a\x90\x40\x9c\x31\x6d\x83\x98\x25\x84\xe9\x55\xfb\xb2\x6a\x19\x56\x4f\x46\x90\xe5\x6f\xcd\xdb\x25\xdb\x17\xa2\xd2\x1e\x7b\x8b\x8d\x72\x54\xa6\xf1\x97\x80\x2e\xe4\x6e\xc6\xd2\xa0\x21\x5b\xb8\xa0\xb9\x34\x09\xc9\x50\xa7\x36\x6f\x96\xe4\xb7\xe9\x54\x0f\xea\x7f\xee\x00\xd0\x01\xc9\x7c\x80\x92\x8b\xa8\x79\xb8\xf7\xa1\xa6\x03\x49\x83\xcf\x66\x46\x39\x5b\x8b\x18\x14\x5b\x17\x23\x58\x69\xb2\xd5\xa6\xa7\xa0\x22\xe3\xf8\x01\x39\xa6\xe6\x17\xce\xa7\x46\x6d\xf0\x96\x2c\x6b\x02\x50\xce\x2f\x26\xe2\xa2\xca\x9c\x72\x6d\x75\xfe\x29\xf4\x55\x5a\x17\xf3\x8c\x6d\x3d\xe4\x27\xe5\xcd\xa6\x03\x26\xc4\xa9\xe4\x9b\x52\xe8\x16\xa8\xa9\xe4\xa4\x8f\x67\xfb\x9b\x80\xc2\x3c\x21\xb5\x1f\x4c\x0a\x02\xaf\xa5\x98\x1d\x5f\x67\x69\x41\xc5\x1a\x5b\x89\x23\x7d\x55\xd3\x43\x41\x6d\x5b\xa5\xab\x92\x99\x4e\xa5\x2d\xac\xcf\xa0\xe4\xee\x0e\x98\xc8\xf0\x19\x0e\xa4\xa9\xa0\x5a\x71\x7d\xf3\xf1\xce\xd4\x43\x15\x13\xb9\x24\xa0\xd9\xdf\x16\x61\x25\xe5\xfc\x84\x2f\x59\xa1\x78\x27\x33\xca\xa7\xce\xd4\x2d\x59\xbe\x41\x43\xd9\xc5\xbc\xf5\x3d\xdf\xce\x58\x9e\x10\x25\x77\x91\x83\x66\x9e\x43\x92\xc0\x64\x3f\x19\xf1\xd1\xe7\xe7\x8e\x2a\xc1\xc4\x7a\xc4\xd5\x37\x2c\xcf\xfb\xee\x5a\x6b\x57\x39\x3b\xef\x8f\xa4\x2f\x39\xb7\xfa\x5d\xe8\xbf\x02\x9a\xa5\xf5\xf6\x34\x07\x98\x5e\xd9\x8e\xb1\xca\x5c\x94\x57\x8e\x4a\x20\x36\xcc\x58\x20\x76\xa9\x2b\x47\x23\xd0\xcc\xb3\x9f\x87\x20\x5e\x54\x0a\x97\x8b\x54\x66\x36\xfc\x16\xc1\x03\xf1\x54\x0a\x83\xc2\xd8\x86\x63\x99\x96\x8b\xb9\x15\xe8\xf9\xea\x7c\x6b\x26\x74\x8d\x9a\x6e\x14\x16\x3a\x55\xac\x6a\x3b\x9d\xb5\x30\xff\x8b\x6e\x69\x4d\x6d\x9c\x29\x65\xb6\xe1\x18\xe1\x73\x25\x95\xd1\x90\xc0\xe7\xa3\x01\x0b\x98\x18\xf2\x8d\x70\x18\x80\xe9\x6d\xe7\xcc\x3e\x0a\xcd\x46\x89\x01\xd1\x3e\xa7\xf9\x19\xc3\xe3\xc7\xbb\xc0\xb9\x1d\xa5\x31\x4c\x26\xa1\xf3\x54\xf2\x18\x1e\xbd\xa9\x3e\x37\x79\x14\xdd\x57\x56\xa9\xab\x2d\x8f\xe6\xf6\x71\x29\x89\xe1\xa7\xfb\x30\x4b\xd3\x4d\x27\x29\x0a\x83\x6a\xe2\xe5\x3b\xf8\xc5\x47\xdc\xb3\x15\x11\xc3\xa4\xa2\xa6\x18\x71\xef\x13\xee\x63\x98\xe4\x8c\xe3\x6a\x84\xf3\xab\xad\xcb\xca\x8e\x58\x26\xc5\x88\x0b\xb6\x5d\xc5\xd0\xef\x57\x17\xe3\xf9\x70\x1f\x08\xe8\x97\xbb\x5a\xe7\xf1\xd8\x81\xbf\x49\x2e\x83\xa5\x5b\x23\xc3\x57\xda\x3b\xca\x0c\x13\x6b\x9b\x3a\xed\xe7\xf0\xf5\x8f\x18\xdc\x8c\x3c\x67\xf6\xf5\x03\x3f\x66\xce\x1b\x8f\x9f\x2f\xb4\x79\xc5\x76\xf0\xf7\xd9\x0f\x37\x9e\xd8\xd4\x0b\xb9\x8e\x07\xb9\x5b\xa3\xf9\xc3\x2a\x7d\xeb\x40\x1f\xee\x19\xf6\xe1\x68\xc0\x14\xd4\x40\x02\xa6\x60\xfa\xe6\x3c\xc8\x05\xd3\x51\xc8\x51\x2b\xa5\x36\x18\x90\xa2\xcf\x4c\x6a\x6f\x7e\x23\xfb\x09\x31\x9d\xcc\x69\xc5\xe6\x2e\x4a\xf3\x53\x9b\x9a\xdc\xfa\x45\x4c\x81\x62\xaa\x50\x57\x52\x68\x84\x64\x39\x52\xb0\x2c\x87\x23\x67\x64\xeb\x23\x72\x8d\x3d\x49\x2c\x28\x7c\x51\xe8\xbb\x4e\x4d\x74\x72\x07\x12\xe8\xab\x72\x7f\xec\x49\x50\xcb\x01\x90\x6b\xbc\x60\xc6\x2d\xa7\x03\x2f\x4b\xbd\xf6\x5f\x1e\x7a\x15\xd0\xa3\xf6\x05\x06\xc0\xa9\xb7\x3f\x57\x0c\x6f\x06\x03\xc4\xb4\x44\x5f\x3c\x5c\xfa\x4e\xf0\xb2\x69\x6e\xd9\xcf\x78\x53\x29\xb4\xe4\x18\xd9\xb5\x68\x3a\x10\x1c\x75\xae\xf9\xc2\xf9\xd7\x15\x6a\xb3\xdd\xb1\x6b\x47\x19\x24\x49\x02\x84\x84\x52\x5d\xc7\x9e\xbc\xe7\x48\x35\x42\x5a\x48\xa9\x11\xba\x9f\xa9\xb7\xaf\xbc\x72\xf5\x90\x3d\x3b\x3a\xfc\x07\xf5\xdf\x04\x63\x72\x07\x9f\xbb\x13\x79\x70\xaf\xc3\xff\x88\x8d\xeb\xc1\x31\xa8\xaa\x69\x00\x1f\xe1\x52\x3e\x6a\x1a\xe9\x2b\xae\x09\xfb\xd3\x00\x2f\x0a\x63\xad\xdf\x97\xea\xf8\x58\xa6\xdd\xb1\x14\x71\x14\x6b\x53\xb8\xf0\x07\x83\xef\x2d\x57\x27\xfe\x1d\xf1\xdf\xe5\xfa\x42\x7d\x89\xe0\x19\x22\x7e\x78\xfe\xc5\xe0\x6a\x53\x74\x01\x5d\x77\xf5\xa6\x70\x96\xa4\x6f\x8e\xba\x5e\x8b\xed\xa9\x19\x29\xe5\x17\x03\x90\xe1\x47\x71\x68\xde\xf8\xf6\xab\xa6\x04\x3a\x23\xe5\xd1\x29\xf9\x18\xb9\x85\xbc\xe1\xba\x42\x9f\xdb\xc2\x2e\x68\xb3\xeb\x7d\x70\xff\x39\xdb\x13\xdb\xdd\x67\xe4\xe6\xc3\x7f\xbe\x68\x43\xcd\x46\x07\x03\xf0\xbd\xc2\x5c\x47\xc7\x35\xbb\xf9\xd5\x11\x7c\x35\x66\xcc\xff\x6f\x92\xa9\x92\xbb\xb0\xc5\x6e\x95\x43\x02\x8f\x1f\xcf\xd8\x72\xa9\x60\xba\xa5\x0a\x18\x30\x01\x21\x65\x5e\x85\x51\xb5\xd1\x85\xb3\xff\xc8\x3a\x11\xf6\xb4\x87\xc3\x15\xab\xae\xdc\x08\x83\xd9\x58\x93\x75\x0e\x74\x77\xdf\xe9\xa9\x2c\x6b\x9d\x87\x9b\xc5\xbc\xfe\xe0\x5e\xfe\x13\x00\x00\xff\xff\xbf\xce\x2c\xd5\x53\x17\x00\x00")

func viewLayoutModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewLayoutModelHtml,
		"view/layout/model.html",
	)
}

func viewLayoutModelHtml() (*asset, error) {
	bytes, err := viewLayoutModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/layout/model.html", size: 5971, mode: os.FileMode(420), modTime: time.Unix(1587959718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/layout/default.html": viewLayoutDefaultHtml,
	"view/layout/model.html":   viewLayoutModelHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"layout": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{viewLayoutDefaultHtml, map[string]*bintree{}},
			"model.html":   &bintree{viewLayoutModelHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
