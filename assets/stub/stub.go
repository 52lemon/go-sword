// Code generated for package stub by go-bindata DO NOT EDIT. (@generated)
// sources:
// stub/controller/controller.stub
// stub/core/core.stub
// stub/core/response/response.stub
// stub/html/create.stub
// stub/html/detail.stub
// stub/html/edit.stub
// stub/html/list.stub
// stub/layout/default.stub
// stub/main.stub
// stub/model/model.stub
// stub/route/route.stub
package stub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stubControllerControllerStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x61\x4f\xdb\x3c\x10\xfe\x1c\xff\x0a\xbf\x96\x5e\xe4\xa0\xca\xfd\xde\xb7\x54\x7a\xa1\x20\xa1\x0d\x6d\x02\x4d\xfb\x50\x55\x95\x13\x5f\x53\x43\x62\x97\xb3\xc3\xc4\x50\xfe\xfb\xe4\x38\x2d\xeb\x00\x4d\x0c\x98\xca\x46\xbe\x80\xcf\x77\xcf\x9d\xef\x9e\xa7\x71\x96\x32\xbf\x90\x05\xd0\xe1\xb0\xfb\x6f\x66\x64\x05\xa3\x11\x21\xba\x5a\x5a\xf4\x94\x93\x84\x81\xc9\xad\xd2\xa6\xe8\x9f\x3b\x6b\x18\x49\xd8\x70\x18\x77\x67\x95\x55\x50\x8e\x46\x1b\x36\x04\xb7\xb4\xc6\x41\x34\x6b\xdb\xd7\xb6\xf6\xba\x0c\x8b\xd2\x16\xe1\x8f\x01\xdf\x5f\x78\xbf\x64\x84\x24\xac\xd0\x7e\x51\x67\x22\xb7\x55\xff\x5c\x9b\xaf\x8b\xba\x5f\x58\xac\x82\xdb\xbc\xf2\x8c\xa4\x84\xcc\x6b\x93\xd3\xf7\xda\x79\xae\x32\xba\x1b\x76\xc5\x78\x3f\xa5\xc1\xcc\xbf\xa0\xf6\x80\x34\xa0\x89\xd3\x2e\xf1\xe7\xd6\xd6\xa3\x08\x97\x35\x38\x4f\x77\xbb\xdd\x76\x95\xd2\x1b\x92\x20\xf8\x1a\xcd\x53\x10\x68\x78\x14\xcc\x01\x23\x4a\x30\xd2\xef\x1e\x3d\xa7\x80\x48\x07\x7b\x14\x21\xb7\x57\x80\x3c\xfd\xaf\xb5\xfc\xb3\x47\x8d\x2e\x7f\xf0\x0e\x4f\xac\x43\xb4\xa9\xf9\x64\x9a\x5d\x7b\xe0\xf3\xca\x8b\xb3\x25\x6a\xe3\xe7\x9c\xfd\xeb\x58\x0f\x10\xd3\x34\xdd\x88\x6d\xd6\xab\x86\xa7\x84\x24\x89\xbb\x2c\x5d\x48\x3c\x99\x0e\x87\xed\x7c\x66\xce\x63\x9d\xfb\xd1\xe8\xa6\x21\x49\xa2\x32\x71\xa4\x8d\xe2\x3b\xc1\x2f\x25\xeb\x68\x04\x1f\xcb\x8d\x2d\x10\xa7\xe0\x37\x8b\x3c\xb0\x0a\x06\xb1\x4f\x67\x5e\xfa\xda\x7d\x78\xd7\xdb\x70\x18\x4b\x2f\x07\xb7\x00\x61\x62\x77\x8f\x19\xac\x03\xda\x26\xdf\x8c\x6e\x6e\x97\x4d\x38\x86\xea\xad\x3a\x18\x58\x27\x4e\x24\xba\x85\x2c\xf9\x0e\x82\x4f\x49\x92\x74\x0d\x5e\xb7\x33\x49\x92\xa5\x34\x3a\xe7\x80\x28\x0e\x11\x2d\xf2\x34\xf8\xb5\x58\xb3\x88\xb5\xb7\xd9\x64\xf5\x38\x9c\xa4\x21\x4d\x47\xc6\x31\x94\x10\x00\xb6\x85\x8e\x91\x8f\xdb\x49\xc7\xcc\xaa\xeb\xf5\x28\xe3\x4f\x81\x38\x05\xa9\xfe\x2f\x4b\xde\x1d\x48\xec\x5b\x75\xfd\xc0\x30\x4a\x5b\x88\x8f\xab\x94\x57\xac\x45\x0a\xae\x5d\xd3\x56\x13\x56\xd2\xcb\x90\xa0\x92\x17\xc0\x2b\xb9\x9c\x38\x8f\xda\x14\x53\x6d\x5a\xb6\xc4\xe9\xb7\x44\xfa\x64\xaa\x8e\x4a\xb1\xb2\x9d\x10\xfa\x68\x46\xb9\xcb\x32\xa4\xbb\xa3\xb0\x10\x75\x3c\x1e\xd0\x00\x3a\x61\x5a\xb1\x69\x6f\x5d\x62\x26\x3a\xde\x04\xf6\xb7\xbd\x79\xba\xe6\x4e\x5c\x31\xa0\x94\xb9\x3a\xcf\xc1\x39\xf6\x8a\x34\x74\x80\x20\xb7\x49\x43\x7f\xae\x84\x1e\x9e\xe9\x4a\x35\xf7\xbe\x28\x9e\x5d\x33\x2a\x13\xdd\xd0\xbb\xf8\xbf\x5c\x01\x87\x4a\x6f\xdb\x95\xe6\x8d\xff\x2f\xcb\xff\x23\x8d\xce\x47\xfa\xf7\xda\x77\x84\x38\x1e\xa7\x71\xeb\x4c\x5e\xfd\x26\x61\xd0\xf5\x5d\x2d\x16\xf2\x7a\x14\x33\x06\x2f\x75\xf9\xa6\x99\x9f\x69\xe6\x05\x25\xb3\x71\x1f\x73\xac\x47\xb3\x16\x85\x84\x18\x94\x95\xfb\xc5\x4b\x58\x0c\x7e\x4e\x01\xdf\x23\xb8\x98\x24\x5e\xcb\xde\x44\xf6\x90\xc8\xf6\xa5\xcf\x17\xcf\xfb\x85\x43\xe3\xf7\xe5\xd3\xc4\x16\x9b\xd7\x90\x6f\x01\x00\x00\xff\xff\xa9\x2f\xca\x76\xb3\x10\x00\x00")

func stubControllerControllerStubBytes() ([]byte, error) {
	return bindataRead(
		_stubControllerControllerStub,
		"stub/controller/controller.stub",
	)
}

func stubControllerControllerStub() (*asset, error) {
	bytes, err := stubControllerControllerStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/controller/controller.stub", size: 4275, mode: os.FileMode(420), modTime: time.Unix(1587906471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubCoreCoreStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6b\x33\x45\x14\xbe\xde\xf9\x15\xe3\x80\x65\xb7\x4d\x77\xb5\x7e\x50\x42\xb7\x5a\x4d\x7b\x55\xb1\xc4\xa2\x17\x22\xed\x64\xf7\x64\x33\x75\x77\x66\x3b\x33\x9b\x12\x4b\x6e\x44\x50\x41\xd4\x9b\x8a\x20\x88\xe0\x85\x57\x6a\xaf\x44\xa8\xfa\x6b\x9a\xf8\xde\xbd\x7f\xe1\xe5\xcc\x64\x4b\x4a\xc3\xfb\x91\x9b\x64\xe6\x39\xe7\x39\xcf\x39\xcf\xc9\xd4\x3c\xfb\x94\x17\x40\x33\xa5\x81\x10\x51\xd5\x4a\x5b\x1a\x92\x80\x09\x95\x08\xd5\x58\x51\x32\x12\x30\x09\x36\x19\x59\x5b\x33\x42\x02\xb6\xb3\xe3\xc3\x4e\xb4\x6a\x2c\xec\xee\xe2\xe5\x09\x65\x85\xb0\xa3\x66\x10\x67\xaa\x4a\x0a\xb5\x69\xce\xcb\xcd\x5c\x8b\x31\xe8\xa4\x9a\x98\x73\xc7\xb2\x14\x71\x26\xe4\x67\xa3\x26\x29\x94\xae\x18\x89\x08\xb1\x93\x1a\x68\x1f\x4c\xad\xa4\x81\x3e\x58\x6a\xac\x6e\x32\x4b\x2f\x49\xf0\xae\xca\x81\x0a\x69\x69\xfb\x39\x3d\x33\x4a\x76\x59\xa6\x72\x60\xa7\x24\x78\xcf\x14\x14\xc3\x85\x2c\xee\xe1\x95\x29\x10\xee\x71\xcb\x31\x1d\xf4\x90\x67\x70\x39\x6d\xe1\x9c\x5b\xce\x4e\xc9\xf4\x61\xed\x43\x61\x96\xeb\xbb\xe3\x0a\x82\x52\x18\xeb\x09\x3c\xc3\xbe\x2c\x84\x84\xa5\xc4\xde\x80\xae\x63\x83\x71\xef\x1d\x8c\x1a\x36\x32\xa3\x21\xd0\x75\x1f\x18\xd1\x43\xc5\xf3\x30\xa2\x21\x68\x4d\x41\x6b\xa5\x23\xcc\x4a\x12\xfa\x7e\x0d\x92\xe6\x03\x12\x40\xdc\x1b\x74\x10\xa3\x29\x75\x4c\x88\x84\xcc\x0f\xb4\x43\x99\x56\xca\x76\x5f\xdd\x7a\xed\xf5\x37\xde\x7c\x3b\x29\x14\xcf\x2b\x21\xdf\xca\x46\x5c\x1b\xb0\x69\x63\x87\xdb\x6b\x35\xfe\x3e\x16\x15\xa4\xc7\xba\x81\xb5\x52\x65\xe9\xa1\xca\x78\xc9\x22\x12\x88\xa1\xa3\x7e\x29\xa5\x52\x94\x58\x3a\xd0\x60\x1b\x2d\x49\x30\x25\x4e\x47\x1f\x0a\x61\x2c\x68\xea\x8c\x26\x81\xfb\x8a\xdb\xdb\xd0\xa9\xc3\xb3\xcc\x41\x47\x84\x2c\xd2\x91\x6d\x65\xbf\xfd\x46\x3e\x6c\xd7\x37\x07\xb1\x1f\xc6\xb3\x44\xf9\x68\xdc\xc4\x18\x6d\x01\xb9\x27\xf3\x0f\x40\x8f\x21\x64\xdd\xed\x57\xb6\xb7\x58\x07\xd3\xa2\x56\x8a\x33\xe7\xa1\x0e\x27\x38\xbc\xd0\x02\x7b\x73\x64\xad\xfb\x1f\xb9\xbb\x0e\xd5\x70\xde\x80\xb1\x74\x7d\x81\xba\x13\xea\x75\x73\x79\xf4\xdb\xaf\xf3\x9f\xbf\x9f\x7d\xf7\xf9\xfc\xea\xfa\xf1\x3f\xdf\xcc\x7f\xfc\x65\x76\xfd\xc5\xec\xab\xeb\xf9\x0f\x5f\xde\xde\xfc\xe5\x55\x76\xd3\x96\x24\x3e\x42\x0f\x0e\x94\xae\x56\xf7\x57\x73\x29\x32\x9c\x4a\xbc\x8f\x53\x09\xa3\xc8\xf7\x5a\x73\x3b\x5a\xa6\x41\x86\x0f\x79\xd9\x40\xc8\x10\x62\x91\x13\x53\xaa\x22\x3e\xd2\x42\xda\x52\x86\xec\xe5\x31\xeb\x50\x04\x7d\x21\xc7\x90\xa6\x94\xb1\xa5\x42\xac\x54\x06\x3c\x54\x73\xcd\x2b\x16\xdd\xf9\x7d\x7b\xf3\xed\x58\xc0\xc5\xff\x3f\xfd\x31\xfb\xf7\xea\xf6\xef\xdf\x67\x7f\xde\xcc\xbf\xfe\xaf\xed\x6a\xa0\xf2\x09\xea\x81\x58\x03\xcf\x0f\x44\x09\x21\xc3\x70\x46\x37\x3c\xdd\x06\x65\xf1\xc8\x56\xe5\x42\x19\xc5\x04\xbf\xbd\xdd\x94\x62\x64\xbc\x67\x0c\xd8\xa7\x65\x9d\xb4\xdb\xee\xcd\x89\x9d\x1f\x21\x12\x21\xfa\xbc\xb3\x5b\xb5\x7c\x77\x9a\x5d\x51\xff\x5c\x44\xf4\xe3\x4f\x06\x13\x0b\x48\x75\x4f\xac\x7f\xf8\xe2\xfe\x72\xce\x0b\x79\xb7\xf8\x27\x20\x29\x99\x92\x27\x01\x00\x00\xff\xff\x84\x43\x87\xd7\x64\x05\x00\x00")

func stubCoreCoreStubBytes() ([]byte, error) {
	return bindataRead(
		_stubCoreCoreStub,
		"stub/core/core.stub",
	)
}

func stubCoreCoreStub() (*asset, error) {
	bytes, err := stubCoreCoreStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/core/core.stub", size: 1380, mode: os.FileMode(420), modTime: time.Unix(1587875134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubCoreResponseResponseStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x4d\x0a\x02\x31\x0c\x46\xd7\x93\x53\x84\x1e\xc3\xad\x2e\x75\xe3\x09\x1a\xda\xcf\x52\x7f\xda\xd2\xc4\x85\x0c\x73\x77\xe9\xe0\x80\x82\xd9\x85\xf7\x3d\x5e\x93\x70\x93\x04\xee\xd0\x56\x8b\x82\xc8\x5e\x0d\x7c\x86\xb1\x5a\x7f\x06\xe3\x99\xa6\x7d\x8d\xe0\x5c\x8c\xb7\xf3\x57\xad\x65\xe7\x42\x8d\x70\x9e\xa6\x93\x26\x1e\xf3\x5c\xd2\x0f\x7f\x68\x1a\xf8\x20\x26\x43\x47\xbf\x48\xc0\xbc\x6c\x38\x8a\x89\xf3\xb4\x7c\x9a\xc7\xac\xdf\xd1\xf5\xfd\x63\xdd\xb3\xda\x6a\xbd\x03\x00\x00\xff\xff\xfa\x0b\x38\xef\xbb\x00\x00\x00")

func stubCoreResponseResponseStubBytes() ([]byte, error) {
	return bindataRead(
		_stubCoreResponseResponseStub,
		"stub/core/response/response.stub",
	)
}

func stubCoreResponseResponseStub() (*asset, error) {
	bytes, err := stubCoreResponseResponseStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/core/response/response.stub", size: 187, mode: os.FileMode(420), modTime: time.Unix(1587878515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlCreateStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xe2\x3e\x10\xbd\xf3\x29\x46\xfe\xfd\xa4\x80\x04\xa4\xad\x56\xd5\x2a\x4a\xa2\xdd\x3d\xed\xee\x61\x7b\xe8\xb1\xaa\x2a\x13\x4f\x82\xa9\x63\x5b\xf6\x98\x82\x10\xdf\x7d\xe5\x84\x2d\x6d\x49\x4b\x73\x18\x89\xf9\xf3\x66\xde\x9b\x31\x39\x61\x6b\x15\x27\x2c\x47\x00\x00\xb9\x90\x6b\xa8\x14\xf7\xbe\x60\x8a\x6f\x4d\x20\xd6\x07\xba\xa0\x9c\x2d\x1c\x72\x51\xb9\xd0\x2e\x20\xf3\xb4\x55\x58\xb0\x5d\xcb\x5d\x23\x75\x06\xc9\xd5\x17\xbb\x81\x68\x92\xfd\x8b\xaa\x93\xca\x99\x24\x6c\xcb\xe0\xd1\xf9\x3c\x3d\x0d\x9c\x2b\xac\x1c\x72\xc2\x0f\x2b\x5f\x07\x5f\x11\xa8\x8c\x26\xd4\x74\x9c\xde\x72\x21\xa4\x6e\x0e\xe3\x27\x53\x68\xa5\xfe\x89\xb2\x59\x52\x74\x7d\xbd\xe8\x7c\x0b\x5e\x3d\x36\xce\x04\x2d\x32\x48\xfe\xab\xeb\x7a\x88\xa1\x33\x4f\x40\x5b\x8b\x05\xab\x15\x6e\x18\xac\x82\x27\x59\x6f\x0b\xe6\x89\x3b\x62\xc0\x95\x6c\x74\xc1\x5a\x29\x84\x42\x06\x59\x13\x88\xd0\x15\xec\xf2\x9a\xc1\x7a\x56\x1b\x57\xb0\xf1\x9a\xab\x80\x53\xcd\x5b\x9c\x80\xd4\x20\x75\x6d\x18\x9c\x48\x9d\x5c\x5d\xd8\x0d\x5c\x9c\x0c\xf1\xcc\x51\x81\xb7\x5c\x17\xec\x8a\x1d\x6b\x09\x37\xf4\x3d\x8e\x90\x25\x2e\xd2\x8b\xd5\xbb\x5d\x6c\xb5\xdf\x47\xc1\x2a\xa3\xce\xa0\x5d\x0f\xb4\x3b\x24\x49\x6d\x03\xc1\x7a\xd6\x1a\x81\xaa\x60\x71\xee\xbb\x08\x7d\xcf\xca\x88\xdd\x85\x07\xd0\x87\xda\x46\xa7\x33\x4f\x43\xf2\x9e\x9d\x0f\x4c\x5d\x7b\xa4\xf3\xc4\xdf\xe3\xb1\x08\x44\x46\x1f\xd6\xe8\x43\x55\xa1\xf7\x0c\xbe\x55\x4a\x56\x8f\x05\x6b\xcc\x2d\x5f\x23\x2b\xa3\xed\x6e\xac\xcb\xfe\x1c\x58\xbf\xca\x23\xd2\x0f\x5e\x3d\xb2\x32\xda\x8f\x90\x3e\xa7\x50\x9f\xd5\x1d\xf6\xe1\x19\xa7\x42\xae\xcb\x51\x9e\x1e\x5f\x77\xee\x2b\x27\x2d\x1d\xa6\x89\x9a\xa4\x2b\xbe\xe6\xbd\xf7\x20\x48\x6b\x44\x50\x38\xc7\x8d\x35\x8e\x3c\x14\xb0\x7b\x6e\x21\x38\xf1\x0c\xea\xa0\x2b\x92\x46\x8f\x27\x2f\x42\xf1\x73\x48\xc1\xe9\x37\xce\x2e\x60\x02\xe1\x2f\x91\x01\x2d\xa5\x9f\x4b\x31\x3d\xc9\x88\xc2\x64\xa7\x85\x91\x45\xbe\xf2\x0f\xb1\xf1\x43\xcc\x29\x4f\xd5\xd9\x8f\x86\x7f\xed\x8f\x5d\xac\x33\xd6\x67\x70\x97\x48\x91\xdc\x1f\xdd\x2d\xd2\xd2\x08\x9f\xbd\x99\xb8\x5f\xcb\x07\x3c\xe3\xd7\x31\xf9\xbf\x23\xe6\xe6\x8d\x19\xcf\x2e\x27\xaf\xe7\x98\xbe\xc1\x8c\xe7\xf2\x19\x4c\xbe\x91\xc6\x0f\x1e\xd3\xdc\x1a\x4f\xe3\x24\xe5\x56\xa6\x79\x4e\x7c\xa1\xf0\x21\x3e\xaf\xb2\x4c\xfb\xbf\xc3\x64\xfa\xfb\xf6\xe6\xcf\xdc\x93\x93\xba\x91\xf5\x76\xdc\xcb\xad\x6b\x33\x99\x0c\x23\xd2\x12\xf5\xd8\xa1\xb7\x46\x7b\x2c\xca\xc1\x05\x74\xdf\xcd\x62\x85\x15\xcd\xb9\xf7\xb2\xd1\x47\x5c\x98\xfe\x2b\x9e\xc7\x15\x75\x66\xb8\xd5\x7e\xf2\xde\x9a\x46\xbd\xcd\xd3\xfe\x0a\xcb\xbf\x01\x00\x00\xff\xff\x21\xbb\xe0\x88\x8d\x06\x00\x00")

func stubHtmlCreateStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlCreateStub,
		"stub/html/create.stub",
	)
}

func stubHtmlCreateStub() (*asset, error) {
	bytes, err := stubHtmlCreateStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/create.stub", size: 1677, mode: os.FileMode(420), modTime: time.Unix(1587893854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlDetailStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x6d\x6b\xdb\x30\x10\xfe\x9e\x5f\x71\x68\x03\x27\x90\xc4\x6d\x19\x65\x78\xb6\x59\xc7\x3e\xac\xbf\xa1\x94\xa2\x58\x67\x47\xad\x2c\x09\xe9\x9c\x26\x04\xff\xf7\x21\xc7\x6b\x92\xda\x6b\xc6\xfc\x41\xe0\x7b\x7d\x9e\xe7\x4e\x4a\x09\x6b\xab\x38\x61\x3e\x01\x00\x48\x85\xdc\x40\xa1\xb8\xf7\x19\x53\x7c\x67\x1a\x62\x07\x47\xe7\x94\x8b\x95\x43\x2e\x0a\xd7\xd4\x2b\x48\x3c\xed\x14\x66\x6c\x5f\x73\x57\x49\x9d\x40\x74\xf3\xc5\x6e\x21\x1c\x51\x7b\x92\x35\xc8\x5c\x48\xc2\x3a\x6f\x3c\x3a\x9f\xc6\x43\xc7\xa5\x44\x81\xc4\xa5\xfa\x30\xf3\xdc\x79\x46\xa0\x30\x9a\x50\xd3\x11\xbd\xe5\x42\x48\x5d\xf5\xf0\xa3\x39\xd4\x52\xff\x42\x59\xad\x29\x98\xbe\x5e\x75\xb6\x15\x2f\x5e\x2a\x67\x1a\x2d\x12\x88\x3e\x95\x65\x39\xc6\xd0\x99\x57\xa0\x9d\xc5\x8c\x95\x0a\xb7\x0c\x9e\x1b\x4f\xb2\xdc\x65\xcc\x13\x77\xc4\x80\x2b\x59\xe9\x8c\xd5\x52\x08\x85\x0c\x92\xaa\x21\x42\x97\xb1\xeb\x5b\x06\x9b\x45\x69\x5c\xc6\xa6\x1b\xae\x1a\x9c\x6b\x5e\xe3\x0c\xa4\x06\xa9\x4b\xc3\x06\x4a\x47\x37\x57\x76\x0b\x57\x03\x0c\x6f\x14\x15\x78\xcb\x75\xc6\x6e\x4e\x72\x09\xb7\x74\x17\x10\x24\x91\x0b\xec\x42\xf6\x7e\x1f\x3a\xb5\x6d\xd0\xab\x30\xea\x42\xb5\xdb\x91\x76\x7d\x90\xd4\xb6\x21\xd8\x2c\x6a\x23\x50\x65\x2c\xc0\x7e\x08\xa5\x1f\x59\x1e\x6a\x77\xee\x91\xea\x63\x6d\x83\xd1\x99\xd7\x31\x75\x2f\xe2\x03\x53\x96\x1e\xe9\x32\xf1\xbf\xf1\x58\x35\x44\x46\xf7\x53\x3c\x88\xff\xbd\x50\xb2\x78\xc9\x58\x65\x7e\xf0\xe2\x85\xe5\xe1\xec\xf6\xab\x0b\xfd\x5f\x52\x87\xa8\x6e\x15\xfb\x8b\x17\x0b\xb9\xc9\x27\x69\x7c\xbc\x8f\xa9\x2f\x9c\xb4\xd4\xa3\x09\x34\xe2\x67\xbe\xe1\x07\x6b\xcf\xa1\x36\xa2\x51\xb8\xc4\xad\x35\x8e\x3c\x64\xb0\x7f\x6b\x21\x38\xf1\x04\xca\x46\x17\x24\x8d\x9e\xce\x4e\x5c\xe1\x73\x48\x8d\xd3\xef\x8c\x9d\xc3\x34\x84\xf7\x22\x01\x5a\x4b\xbf\x94\x62\x3e\x88\x08\xc2\x24\xc3\xc4\xc0\x22\x7d\xf6\x4f\xa1\xf1\x53\x88\xc9\x87\xea\xb4\x93\xf1\xbf\xf6\xd8\xc5\x3a\x63\x7d\x02\x0f\x91\x14\xd1\xe3\xd1\x5c\x23\xad\x8d\xf0\xc9\x3b\xc4\x52\x4b\xba\xb3\xf2\x67\xf7\x28\x7c\x40\x37\x7c\x1d\x21\xbe\x95\xc6\x8f\xce\x7f\x69\x8d\xa7\x69\x14\x73\x2b\xe3\x34\x25\xbe\x52\xf8\x14\x96\x38\xcf\xe3\xc3\x9b\x13\xcd\xf7\x52\x24\x96\x3b\x8f\xf7\x9a\xa6\x5d\xb9\x5e\xad\x59\x3b\x1b\xaf\x49\x6b\xd4\x53\x87\xde\x1a\xed\x31\xcb\x47\x55\x3b\x82\x0b\xaa\x41\x06\x7f\xe2\x97\x41\xca\xee\x18\x4d\x7b\xd7\xb3\x3d\x9f\xd4\x61\x61\xff\x45\x92\xcf\x1d\x09\xb7\xac\xcc\x74\x71\x3d\xbb\x3c\xa1\xc2\x21\x27\x14\x1f\x94\xee\xc9\x9c\x8c\x66\x3a\xfb\x36\x39\x2f\xda\x4e\xd2\xf8\xb0\xcb\xf9\xef\x00\x00\x00\xff\xff\x94\x48\xfe\x37\x85\x06\x00\x00")

func stubHtmlDetailStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlDetailStub,
		"stub/html/detail.stub",
	)
}

func stubHtmlDetailStub() (*asset, error) {
	bytes, err := stubHtmlDetailStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/detail.stub", size: 1669, mode: os.FileMode(420), modTime: time.Unix(1587892954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlEditStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcf\x6b\xe3\x3a\x10\xc7\xef\xf9\x2b\x84\xde\x03\x3b\x90\xc4\x6d\x79\x94\x87\xd7\x36\xdb\x65\x0f\xdb\xd3\x1e\xf6\x58\x4a\x51\xac\xb1\xa3\x54\x96\x84\x34\x4e\x13\x82\xff\xf7\x45\x8e\xb7\x4e\x62\x6f\x52\x58\xd6\x07\x41\xe6\xc7\x77\x66\x3e\xd2\x90\x04\xa1\x32\x92\x21\x64\x13\x42\x08\x49\xb8\xd8\x90\x5c\x32\xe7\x52\x2a\xd9\x4e\xd7\x48\x0f\x8e\xd6\x29\xe6\x4b\x0b\x8c\xe7\xb6\xae\x96\x24\x76\xb8\x93\x90\xd2\x7d\xc5\x6c\x29\x54\x4c\x82\xbb\xff\xcc\x96\xf8\x23\x68\x8e\xb2\x06\x99\x73\x81\x50\x65\xb5\x03\xeb\x92\x68\xe8\xb8\x96\x08\x5c\xe0\xc5\xbc\x53\xe7\x49\xfb\xb9\x56\x08\x0a\xfb\xde\x0d\xe3\x5c\xa8\xb2\x6b\x3e\x98\x91\x4a\xa8\x6f\x20\xca\x15\x7a\xd3\xff\x37\xad\x6d\xc9\xf2\xd7\xd2\xea\x5a\xf1\x98\x04\xff\x14\x45\x31\x36\x9f\xd5\x6f\x04\x77\x06\x52\x5a\x48\xd8\x52\xb2\xae\x1d\x8a\x62\x97\x52\x87\xcc\x22\x25\x4c\x8a\x52\xa5\xb4\x12\x9c\x4b\xa0\x24\x2e\x6b\x44\xb0\x29\xbd\xbd\xa7\x64\x33\x2f\xb4\x4d\x69\xb8\x61\xb2\x86\x99\x62\x15\x4c\x89\x50\x44\xa8\x42\xd3\x01\xe7\xe0\xee\xc6\x6c\xc9\xcd\xa0\x87\xf7\x11\x25\x71\x86\xa9\x94\xde\x1d\xe5\x22\x6c\xf1\xc1\x77\x10\x07\xd6\x4f\xe7\xb3\xf7\x7b\x5f\xa9\x69\x3c\xaf\x5c\xcb\x2b\x6a\xf7\x23\xe5\xba\x20\xa1\x4c\x8d\x64\x33\xaf\x34\x07\x99\x52\xdf\xf6\x93\x97\x7e\xa6\x99\xd7\x6e\xdd\x23\xea\x63\x65\xbd\xd1\xea\xb7\x31\xba\x57\xfb\x23\xba\x28\x1c\xe0\xf5\xc1\x7f\x37\xc7\xb2\x46\xd4\xaa\xbb\x45\x57\xe7\x39\x38\x47\xc9\xe7\x5c\x8a\xfc\x35\xa5\xa5\xfe\xc1\x36\x40\x33\x7f\xb6\x4f\xac\x8d\xfe\x98\xd8\xe1\x26\x7b\xa5\x2f\x2c\x7f\xa5\x99\x3f\x2f\x29\x7d\x8c\xd0\x21\xaa\x7d\xd7\xdd\x0e\x47\x5c\x6c\xb2\x49\x12\xf5\xab\x9d\xb8\xdc\x0a\x83\x5d\x37\x9e\x49\xb4\x66\x1b\x76\xb0\x76\x40\x2a\xcd\x6b\x09\x0b\xd8\x1a\x6d\xd1\x91\x94\xec\xdf\x4b\x70\x86\x2c\x26\x45\xad\x72\x14\x5a\x85\xd3\x23\x97\xff\x2c\x60\x6d\xd5\x99\xb1\x75\xe8\x1a\xe1\x91\xc7\x04\x57\xc2\x2d\x04\x9f\x0d\x22\x3c\x98\x78\x98\xe8\xa7\x48\xd6\xee\xc5\x17\x7e\xf1\x31\xd9\x90\x4e\x33\x19\xff\xd5\xf4\x55\x8c\xd5\xc6\xc5\xe4\x29\x10\x3c\x78\xee\xcd\x15\xe0\x4a\x73\x17\x9f\x75\x2c\x94\xc0\x07\x23\xbe\x02\x32\x21\x2f\x8c\xeb\xbf\x76\x20\xb6\x15\xda\x8d\xde\xff\xc2\x68\x87\x61\x10\x31\x23\xa2\x24\x41\xb6\x94\xf0\xe2\x37\x22\xcb\x22\xde\xca\x07\xb3\xbd\xe0\xb1\x61\xd6\xc1\xa3\xc2\xb0\x95\xeb\x68\x4d\x9b\xe9\xb8\x26\xae\x40\x85\x16\x9c\xd1\xca\x41\x9a\x8d\x52\xeb\x9b\xf3\xd4\x48\x4a\x7e\xc5\x2f\x3c\xca\xf6\x18\x4d\x3b\xab\xd9\x9c\xde\xd4\xe1\xc1\x7e\x04\xc9\xbf\xed\x10\x76\x51\xea\x70\x7e\x7b\x45\xd3\x2f\xd2\x5f\xc2\x1c\xf9\x3f\x89\x60\xf6\x0e\xe2\x4f\x89\x7e\x5f\xae\x21\xc7\x05\x73\x4e\x94\x2a\xec\xf9\xce\x86\x78\xc7\x4b\x9d\xf3\x1d\x7b\xad\xb9\x05\x86\xc0\x2f\x20\xe9\x0a\x1f\x3d\xd3\x70\xfa\x69\x72\x2a\xda\x4c\x92\xe8\xb0\xd7\xd9\xcf\x00\x00\x00\xff\xff\x9c\xb7\xb5\x10\xdc\x07\x00\x00")

func stubHtmlEditStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlEditStub,
		"stub/html/edit.stub",
	)
}

func stubHtmlEditStub() (*asset, error) {
	bytes, err := stubHtmlEditStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/edit.stub", size: 2012, mode: os.FileMode(420), modTime: time.Unix(1587893863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlListStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x8f\xe3\xb6\x15\xbf\xef\xa7\x78\x65\x0a\xc8\x83\xf8\xdf\x2e\xb2\x8b\x42\x6b\x79\xd3\x66\x03\x14\x05\x9a\x06\xdd\x34\x97\xc1\x60\xc0\x91\x9e\x6c\xee\xd2\xa2\x4a\xd2\xf6\x4c\x0c\xdf\x73\xeb\xad\x40\x7b\xea\xa1\x9f\xa1\xa7\x7e\x9d\x14\xe8\xa9\x5f\xa1\x78\x94\x2c\xcb\x12\x65\x6b\x26\x2d\xda\x20\x3e\xcc\x4a\x22\xf9\xf8\xfe\xfd\x7e\xef\x91\x3b\xb3\xb8\xca\x25\xb7\x38\x7f\x06\x00\x30\x4b\xc4\x06\x62\xc9\x8d\x89\x98\xe4\x0f\x6a\x6d\x59\x31\xe0\x06\xc5\xe8\x4e\x23\x4f\x62\xbd\x5e\xdd\x41\x68\xec\x83\xc4\x88\xed\x56\x5c\x2f\x44\x16\x42\xf0\xe2\x93\xfc\x1e\xe8\x4f\xb0\xaf\xad\x6a\xad\x1c\x09\x8b\xab\xf9\x6c\x66\xf9\x9d\xc4\xdb\x8c\xaf\x70\x3e\x9f\x4d\xda\x33\x2e\x49\x90\xc2\xd8\xb3\xeb\x4e\x07\x4f\xec\x88\x55\x66\x31\xb3\x47\x23\x72\x9e\x24\x22\x5b\x94\x56\x04\x43\x58\x89\xec\x97\x28\x16\x4b\x4b\x9f\x7e\x36\x75\xdf\xee\x78\xfc\x61\xa1\xd5\x3a\x4b\x42\x08\x3e\x4a\xd3\xd4\x67\xa8\x56\x5b\x9f\x6f\xa6\xf9\x3d\x4c\x21\xd8\x33\xb0\x0f\x39\x46\x2c\x95\x78\xcf\xe0\xfd\xda\x58\x91\x3e\x44\x4c\x62\x6a\x1b\xb2\x2a\x55\x65\x5b\xcd\xe0\xb9\x93\x17\x0c\x2d\xde\xdb\x9f\x4b\xb1\xc8\xc2\x40\x93\xb6\xb4\x81\xc9\x79\x16\x05\xaf\x02\xd8\x8c\x52\xa5\x23\xb6\xe1\x72\x8d\x20\x32\x30\xc8\x75\xbc\xbc\x4d\x05\xca\xc4\x78\x76\xa3\xdf\x6e\xe7\xa6\xef\xf7\xff\xfa\xfb\x9f\xbd\x13\x66\x62\x24\xb2\x7c\x6d\x61\x33\x5a\xa9\x04\x65\xc4\x4e\xc4\x5e\xbb\xe5\x37\x0c\x72\xc9\x63\x5c\x2a\x99\xa0\x8e\x18\x83\xd2\x82\xad\x48\xec\x32\x84\x17\xd3\x69\x7e\xcf\x5c\xd8\x9d\x30\x8f\xe5\x13\x67\x7a\xc3\xbd\x13\xe7\x5f\x9f\xcf\x3b\x7d\xe7\xbc\xc1\x9e\xbf\x60\xe0\x37\x98\x32\x6b\x6d\xad\xca\xca\xc0\x24\x98\xf2\xb5\xb4\x0c\x3e\x8d\xa5\x88\x3f\x44\x4c\x64\x1b\xf5\x01\x7f\xc1\x6d\xbc\x7c\x8b\x12\x2d\xb2\xb9\x7b\x81\xe2\xcd\x65\x99\x13\xd0\xd3\x08\xaf\x6e\x55\x84\x3d\x01\xed\xa7\xb7\xc8\x52\xd5\x54\xfa\x9d\x8b\x0c\x9b\x17\xff\x9e\xd3\xf4\x11\x9e\xf8\x4c\x23\x27\x27\x7c\x81\xdb\x47\xdb\xee\x0f\xe0\x9d\x6e\x45\xd4\x91\x03\x84\xb1\x92\xeb\x55\x66\x22\x16\x2b\x79\x4b\x80\x67\x10\x26\xdc\xf2\x88\xad\xb8\xc8\x6e\xe9\x91\x01\x7c\xaa\xb2\x91\x41\x89\xb1\x15\x2a\x1b\xc5\x4b\x9e\x2d\x30\x62\x05\xbf\x54\xdf\x6f\x8b\xef\x3e\x90\x1d\x38\x10\x8c\x54\x76\x64\x62\x45\xd6\xef\xb4\xda\x12\x98\xa4\xb2\xe4\x0a\xcb\x85\xbc\x2d\x6c\x7d\x54\x40\x8c\xf8\x06\x23\x66\x56\x5c\xca\xa6\x23\xbf\x16\xb8\x1d\x68\xb5\xbd\x62\x73\x7a\x7c\x6c\x78\x2e\xca\x7f\xeb\x94\x2e\x77\x28\x5e\xfe\xe3\x7b\x7c\x9e\x08\x5b\xee\x40\x8f\x4f\x4a\x31\x7b\xc1\x0a\x42\x59\x65\xc5\x65\xc8\x9d\x56\xb4\x7a\xe6\xb9\x8c\x68\xa5\x5a\xce\x17\x58\xe2\xcf\x1c\x29\xdb\x31\x36\xb1\x69\x68\x95\xe5\x32\x62\x34\xed\x2b\x7a\x64\x10\xd2\xf3\xa8\xd0\x99\x1e\xdf\x89\x6f\x90\x81\x59\xaa\xed\x08\x25\x6e\xb8\x55\xba\x78\x73\x4b\x8b\xfc\x3c\x64\x65\x89\x21\xf7\xf6\x25\x5f\x20\x03\xc7\x82\x24\xa6\xa5\xd9\x4a\x25\x5c\x1e\x79\x76\x23\x70\xfb\x6b\xfa\xc4\x20\x74\x3c\x1a\xb1\x97\x53\x06\x56\x58\x62\x8e\x5c\x23\x4d\xf0\x17\x11\x2a\x4a\xde\xba\x63\x2c\xd7\x96\x01\x27\xc6\x89\xd8\x4a\x24\x89\x44\x06\xe1\x62\x6d\x2d\xf1\xf6\xf3\x57\xec\x50\x45\x06\x8e\xd8\x87\x40\x05\xfb\x8a\xaa\x49\xa5\xce\x5b\x87\xc2\x66\xcd\x0b\x5e\xba\x0a\x75\x86\xbe\x8e\x0c\xf8\xea\x02\x01\xee\x76\xb4\xeb\x7e\xdf\xc9\xa7\x2d\x89\xcf\x5f\x74\xec\x0b\xde\x12\xe6\x6c\x3b\x5b\x8f\xe0\x2c\x9d\x7b\x69\x6d\x52\x46\xf0\x52\x5c\x13\x97\xd4\x65\x64\xcb\x68\x26\x28\x7d\x91\xcc\x4b\x3e\x5a\x22\x4f\x50\x57\x55\x35\x56\x52\xe9\xf0\xa3\xf4\xd5\xf4\x35\xb9\x6f\xe4\xc2\x19\xc6\x98\x59\xd4\xdd\xfe\x17\xf1\x11\xe7\xca\x8c\x08\xeb\x7a\xc5\x0b\x0e\x15\x3a\x96\x07\x87\xc4\x9d\x68\x26\x5f\x97\x98\x84\x58\x65\xa9\x28\xd7\xcf\x26\x6e\xc4\xe3\xa7\xdc\xf3\x91\x7a\xce\xd2\x90\xde\xda\xe7\xf3\x72\x3f\x28\xbc\xf7\xc6\x2b\xba\x9c\xfa\xd5\x12\x41\xe5\xa8\x9d\x6e\xe5\x02\xd0\x18\x2b\x9d\x40\xaa\xd5\x0a\xec\x12\x81\x6a\xc9\x1d\x37\xe8\xd7\x71\x92\x88\x4d\x97\xea\x2e\x22\xa9\x52\x67\x9d\xdd\x89\x40\xcc\x92\xf3\xa9\xda\x33\xa9\xe1\x02\x7d\x4b\xae\x89\x6d\xa4\xca\x16\x15\xc3\xd6\x32\x0f\x22\x48\xb9\x34\xf8\xba\xf6\x8d\x80\x0d\x11\xec\xf6\x6c\xfe\x19\xcf\x62\xbc\x58\x3e\xe0\x1c\x48\xbc\x26\x7d\xf2\x48\x8b\x50\x6b\xa5\x1b\x26\x35\xda\x93\x22\x2f\xca\xb2\x71\xc5\xa0\x47\xd1\xe8\xa5\xbb\x17\xe4\xe0\x4f\x8e\x1a\xf6\x2f\x80\xff\xee\xd8\x57\xfe\x60\x19\xa0\xde\x0e\xff\x1f\xf3\x40\x67\x25\x6b\xc6\xc0\x15\xb4\x79\x75\x12\x7a\x2c\xb5\x98\x92\x5b\xcc\x8f\x9b\x5c\x9a\x5e\xad\x18\xc6\xe7\xee\x92\x66\xbe\xfb\xc3\x1f\xff\xf1\xb7\x6f\x7f\x40\x34\x53\x3b\x16\x3a\xae\xf9\xee\xdb\xbf\xfc\xf3\x4f\x7f\xfd\x5f\x71\xcd\xa9\x6c\x77\xc5\x51\xde\xeb\x14\xcb\xea\xcd\xf1\xcc\xc4\x5a\xe4\xb6\x34\x98\x00\x37\x79\xcf\x37\xbc\xf8\x5a\xba\x6b\xa5\x92\xb5\xc4\x31\xde\xe7\x4a\x5b\x43\x31\xaa\xb6\xa0\x8c\x0e\x21\x5d\x67\xee\x70\x35\xb8\xaa\x0d\xd1\x4f\xa3\x5d\xeb\xac\xf1\xd1\x89\x3c\x9c\xdb\x42\xb8\xbe\x19\xb6\x86\xab\x2e\x3b\x9c\xfa\x07\xa9\xd7\xf6\x8d\x55\xdd\x68\xe8\x92\xec\xcc\x04\x4a\xb7\x70\xb7\x6f\xcf\xa8\x55\xbe\x2e\x21\x8d\xe2\x18\x82\x4f\x4e\x33\xbf\xbb\x84\xf9\x70\x10\xfa\x9c\x72\x38\xfc\x86\x70\xed\xbf\xb3\xa1\x18\x86\x41\x75\xd4\x0d\x86\xc5\x35\xcb\xab\xe9\xb0\xe0\xd0\xa0\x20\xd1\xc0\xa3\x2c\xfd\x66\xb3\xf7\xc6\xc5\xe4\xb6\x38\x6f\xbb\xcd\xe6\x1d\xf7\x43\xae\x3c\x85\x41\x41\x7a\x18\x0c\x1d\x45\x85\xc1\xc9\x09\x39\x18\xc2\xe1\xa2\xe7\xe5\x74\xdf\x92\xe3\x31\x51\xab\xb5\x75\xe7\xa1\xd0\x2e\x85\x19\xbb\x33\xd9\x9b\xe3\x63\x08\x41\xd0\x5e\x74\x72\xf1\xd4\xe5\x9c\x9a\x75\x27\xf3\x3d\xf6\xdd\x9c\x7c\x39\xea\x5d\x73\x5b\xae\x55\x4e\x5b\x05\xa4\x56\x50\x33\x64\x85\x76\xa9\x48\x8b\xd3\x94\x77\x47\xce\xb7\xe7\xb1\x42\xbf\x0d\xd7\x45\x7a\x5b\x0d\x11\x38\xc3\x2b\x97\xc0\x1b\x08\xde\xd0\x60\x14\x7c\xdc\x18\x21\xbf\xbc\x7e\xe6\x95\x56\x1a\x4b\xa1\x74\xe4\xfa\xba\x35\x2b\x55\x7a\x40\x33\x05\xd5\x40\x27\xf8\xc4\x41\x3e\x35\xe9\x27\xd2\x41\x7b\xf2\xb5\xb8\xe9\x9a\x0f\xc7\x48\x91\x32\xd7\xe2\xe6\x60\x61\x53\x82\x77\x79\x3b\x7d\xf6\x6d\x83\x9d\x38\x7e\x2f\x94\xf1\xca\x18\xe7\xca\xd8\x41\x30\xe1\xb9\x98\x9c\x5e\x3c\x4f\x48\xa5\xe0\xe3\xd2\xf5\xc3\x5f\xbd\xfb\xcd\x17\x63\x63\xb5\xc8\x16\x22\x7d\x18\xd4\xd4\xbe\xba\xf2\x4b\xb6\x4b\xcc\x06\x1a\x4d\xae\x32\x83\xd1\xbc\xdb\x05\xb1\xca\x8c\x92\x38\xa6\xb2\x59\x2d\xf0\x0b\xad\x2c\xaa\xc8\x12\x22\x38\x2c\x19\xd3\x7b\xf1\x87\xf4\xf2\x23\xfa\x44\x4a\xc5\xa9\x7e\x29\xee\x92\xa2\xa7\x18\x62\x5f\xbf\x94\x1c\xf5\x2d\xcd\xf0\xc7\xf0\xd4\xce\x06\x0d\x35\xaf\x44\x6a\x50\x21\x89\xbe\xbc\x72\x0a\xfd\xd4\xe1\x40\x8f\xf3\xb5\x59\x0e\x76\xbf\x5f\xa3\x7e\x08\x77\xb4\xc2\xdd\xcf\xec\xfb\x6c\x5a\x5c\x8c\x5e\xc0\x66\x03\x73\x11\x3c\x6f\x63\xc9\xcd\xa9\xc0\x3e\xb8\x7a\x7d\x79\xef\xe2\x46\xae\xb6\xb7\x56\x5b\xdf\xf6\x93\xc9\x69\xee\xd4\x6c\x6f\xa7\x8f\xc7\x31\x39\xb7\xcb\x30\x68\xe6\x7d\xc1\xd7\xc1\xb0\x74\x9b\x48\x42\xad\xb6\x63\x91\xf4\x72\xdb\xe7\x89\xb0\x97\x15\xef\xad\x0b\x26\xc2\x3e\x51\x93\xe2\x32\xba\x4f\x00\xfb\x28\x12\x3b\x69\x41\x9f\x8d\x8b\xba\xdd\x2b\x7a\xae\x39\xf3\x2b\x55\xeb\x27\x22\xab\xd7\x6d\xf4\x34\x67\x95\xbd\xb2\x56\x5b\x4f\x97\x50\x27\x18\xb5\xed\xe3\xbd\xfa\x59\xb9\x8f\x13\x9f\x44\xb1\x85\xfa\xc1\x90\x42\xeb\xb3\x87\x62\xfd\x7d\xd9\xb5\x29\xf7\x70\xd8\xe8\xbd\xa0\x3a\x84\x9c\x5f\x51\x83\xf8\x93\x99\xee\x6b\x81\xdb\xb0\x17\x78\xaa\x9e\x95\x2a\x66\x67\x7a\x9c\x74\xb6\x9e\xe4\xf0\x2a\x51\x3b\xb8\x5c\x08\xfc\xa1\xde\xfb\xda\xd5\xb1\xc4\x6c\x61\x97\x10\x45\x30\xed\xaa\xff\x5c\xa2\xb6\x83\xe0\x4b\x89\xdc\x20\x14\x4d\x2a\x08\x8b\x2b\x03\xa9\xd0\xc6\xfe\x24\xb8\x6a\xf3\x29\x54\x67\x88\xf6\x58\x3b\x44\x5e\xfd\xda\x80\x3a\x87\x81\xfe\xfe\x78\x3a\x10\x9c\x86\xb7\x07\x38\x34\x7a\x8d\x5d\x20\x12\x13\x84\x9d\xae\xde\x7f\xef\x0e\xc4\x2b\xba\x1f\x50\x3a\x8f\xec\xff\x4d\xb4\xf8\xff\x03\x8f\x00\xe3\xed\x4d\xcf\x29\x7a\x7d\xd3\xee\x19\x53\xa5\xe1\xd8\xff\x76\x49\x3d\x2b\xb9\x28\x26\xb4\xf4\x5a\xdc\x8c\x45\xd2\xb6\x72\x7f\xf9\x48\x51\x14\x9d\xe4\x4c\xd6\x75\x37\x17\x35\x31\x77\x98\x2a\x8d\xbf\xa5\x22\xf7\xbb\x3c\x39\x2d\x8a\x56\x0d\x8b\xbb\xa8\x61\x86\xf7\xd6\x2b\xbe\xde\xdf\x58\x35\x76\xc5\x78\xdc\x6a\xe8\xce\xb7\x39\x24\xbc\x16\xe9\xc2\xda\xfd\xb3\xd9\xa4\xb8\x54\x98\x3f\xfb\x77\x00\x00\x00\xff\xff\x04\x54\xdd\x96\x6e\x22\x00\x00")

func stubHtmlListStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlListStub,
		"stub/html/list.stub",
	)
}

func stubHtmlListStub() (*asset, error) {
	bytes, err := stubHtmlListStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/list.stub", size: 8814, mode: os.FileMode(420), modTime: time.Unix(1587732357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubLayoutDefaultStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5d\x6f\xac\x36\x10\x7d\xcf\xaf\x98\xba\x95\x48\xaa\xb0\x6c\xd2\xfb\xe4\x02\xd2\x95\xfa\xda\xaa\xaa\xfa\x16\x45\x57\x5e\x6c\xc0\x8a\xb1\x91\x6d\x48\xd2\xd5\xfe\xf7\xca\x86\xdd\xe5\x73\x77\xc3\x43\xb4\x8c\x67\xce\x8c\xcf\x1c\x8f\x49\x6c\xec\xa7\x60\x60\x32\x55\x33\x9a\xde\x01\x00\x6c\x04\xf9\x54\x8d\x0d\x25\x69\x61\xef\x2d\xee\x79\xe7\xd4\x96\x18\xbe\x3d\x6f\xeb\x8f\xdf\x4f\xd6\x8a\xe8\x82\x4b\x0c\x5b\x20\x8d\x55\x53\x7b\xa8\x79\x51\x5a\x0c\xe3\x98\x4c\x09\xa5\x31\xbc\x97\xdc\xb2\xce\x7a\xb8\x1b\x25\x16\xaa\x50\x83\xcc\x3b\xa5\x29\xd3\xa1\x26\x94\x37\x06\xc3\x6f\x43\xac\x5c\x28\x62\x31\x08\x96\xdb\x23\x54\x1c\xf9\x2d\xa5\x77\xb1\x65\x55\x2d\x88\x65\xdd\xb6\x62\xca\xdb\xf4\x14\x18\xf3\xb0\xcb\x76\x36\xf5\xe6\x92\x11\xca\x34\x60\x8f\x92\xa0\xfd\x8e\x64\x6f\x85\x56\x8d\xa4\x38\xf8\x79\xbb\xdd\x06\x07\x34\x8e\xe9\xe3\x2a\x26\x1b\xa8\x14\x65\x09\x2a\x95\xe6\xff\x29\x69\x89\x40\x60\x4b\x56\xb1\x04\x51\xa2\xdf\x10\x90\xcc\xf2\x96\x85\x92\x38\xd3\x13\xba\x98\x04\xe6\x59\x7c\xa6\xf2\x19\x32\x41\x8c\x49\xd0\x80\x2e\x04\x3d\x52\x47\x6e\xc7\x2d\x4a\xff\xe5\x56\xb0\x38\x2a\x9f\x57\xb0\x28\x6f\x27\x60\x92\xb4\x0b\xdb\xf3\xce\xd1\x88\xc0\xb3\xb9\xdb\xfa\x84\xc7\xe8\x48\xe4\x8c\xdf\x25\xda\xfb\x25\xc3\x1d\xf3\x25\xa7\x2c\xb4\x9a\x17\xc5\xb0\x0d\x50\xb2\x4e\x4c\xc1\xd3\x76\xdb\x96\xc1\xe3\x88\xb2\x3c\xcf\x17\xfb\x32\xec\x4d\xdf\x09\xe1\x60\x50\xa7\xe7\x04\x39\xd9\x22\xc0\xa3\xc6\x14\xcc\x7e\xf7\xef\x7f\x91\x8a\x21\xc0\xaa\x66\xd2\x2f\x99\x04\xbd\x04\x4f\xc1\xeb\x4a\x22\x9f\xec\x28\x3a\x68\xc3\x5c\xe9\x04\x71\xcb\x2a\xe0\x12\x5c\x09\x6b\x3d\x9d\x54\x1a\xfa\x98\x36\xe4\x79\x82\xec\x67\xcd\x54\x7e\xef\x2c\x1b\xd3\xec\x7e\xb8\xf5\x07\x48\x12\x08\x1a\x49\x59\xce\x25\xa3\x01\x02\xdc\x15\xee\xbd\xdc\xcf\x0b\x05\x0e\x72\xf1\x4c\x49\xc0\x2e\x43\x1f\xea\x0c\x28\x75\xbd\x73\xbf\x6e\xc0\xd0\xaa\xb1\x4c\x87\x82\xcb\x37\xc0\x56\x79\xea\xfe\x71\xb6\xbf\x89\x2d\xef\x4f\xe5\x3c\x20\xb0\xa4\x48\x90\xa9\x89\x44\xe9\x7e\xef\x17\xac\xd3\xe6\xe1\x10\x47\x03\x90\x2b\xf4\x44\x03\x7e\xae\x32\x69\x9a\x9d\x6f\xfb\x25\x1e\x7f\x9a\xf0\x78\x3c\x98\x37\x6c\xfd\xd4\x67\x23\x94\x4d\x90\xdf\xcd\x0d\x71\x70\x1b\xf5\x63\x8e\xae\x57\x13\x8d\x67\xdd\x95\xec\x43\x91\x79\x91\x9a\x66\xe7\x34\x3a\x62\xe7\xa4\x2a\xd3\xec\x6e\x15\x15\x5c\x17\xc5\x11\x6d\xaa\x09\x67\xff\xba\x24\xe0\x8b\xb2\x88\x4e\xba\xb8\x70\x84\xaf\x90\xb9\x3c\xf1\x4e\xf0\x7c\x36\xf4\x60\x38\xf8\xce\x13\xad\x26\x94\x72\x59\x60\x08\xb6\xf0\xfc\xad\xfe\xf0\x7f\xd6\xa7\x58\xcf\x49\xcb\xd9\x7b\x7a\x62\xc8\xbf\x2d\xd6\xb1\x78\xbb\x2d\xd8\xa7\xb6\x7e\xcc\x0f\x49\x88\x4d\xa6\x79\x6d\xd3\xee\x96\xae\x14\x6d\x04\xdb\xb0\x8f\x5a\x69\x6b\x20\x19\xdc\xd4\x94\x58\x82\x21\x6f\x64\x66\xb9\x92\x70\xff\x30\x58\x73\x8f\x66\xb6\xd1\x72\x62\x74\x4f\x14\x41\xa6\x64\xce\x0b\x28\x84\xda\x11\xe1\xa7\x25\x08\x6e\xec\xcc\xd5\xad\xe0\x97\x39\x84\x7b\xdc\xd1\xc1\x10\x70\x65\xc2\x9a\xa9\x5a\xb0\xe0\x71\xd1\xcf\xeb\x0c\x43\xf0\x27\x93\xcd\x8a\xcb\xf1\x14\xe0\x97\x55\x9d\x44\x11\x84\x61\x18\x3a\x10\x13\x7e\xa7\xd4\xbd\x84\x97\xbc\xff\x50\x20\x95\x75\x04\xf2\xfc\xd3\x5d\x47\xee\x95\x19\x08\xe6\x30\xc1\x22\xce\xeb\xcc\x7a\x78\x7d\xbc\xbb\xce\xa6\x17\x8b\x99\xf9\x75\x66\x0c\x2b\x6c\xd6\xc4\x7d\xf0\x05\xbf\xae\x30\xa4\x19\xe5\x9a\x65\x16\xc3\xde\x9d\x67\x0c\x41\x1c\x53\x96\x93\x46\xd8\x1f\x1e\x39\x4d\x83\xf9\xe4\x3a\xcc\xc1\x7a\x1e\xfd\x88\xb8\x40\xe4\x35\x02\x27\xf1\x73\x06\xc7\xec\x9d\x4b\x1b\x94\x94\xa9\xaa\x6e\x2c\xa3\x78\xa2\xd1\xd1\x17\xc1\x59\xe1\x33\x81\x9f\xb9\xf1\x42\xb7\x25\x37\x9b\x5f\x3c\x19\x7e\xe6\xcd\xd9\x58\x2a\xa2\x62\xb6\x54\xd4\x2c\xd4\x70\x9a\xa2\x83\x12\xfc\x2c\x5d\x28\xa3\x25\xba\x6f\x30\x24\x5d\x21\x2b\x2a\xc8\x95\x86\x7b\xe7\xcd\xdd\x15\xd0\x39\xad\xed\x8b\xe7\x3e\x9f\xfb\xfe\xe8\x1c\x5f\xf8\xeb\x66\xad\x82\x09\x19\xe7\x00\x27\xac\x45\xef\x05\xb9\xcc\x45\xdb\xa1\x05\xc1\x5a\x37\xcf\xff\x06\xf4\x53\xeb\xff\x00\x00\x00\xff\xff\x9f\x18\x62\x8e\xe3\x0c\x00\x00")

func stubLayoutDefaultStubBytes() ([]byte, error) {
	return bindataRead(
		_stubLayoutDefaultStub,
		"stub/layout/default.stub",
	)
}

func stubLayoutDefaultStub() (*asset, error) {
	bytes, err := stubLayoutDefaultStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/layout/default.stub", size: 3299, mode: os.FileMode(420), modTime: time.Unix(1587735805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubMainStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x41\xca\xc3\x20\x14\x04\xe0\xf5\x9b\x53\xbc\xff\xc1\x0f\x0a\x25\x07\x28\x49\x76\xed\x01\x7a\x81\x22\xc1\x88\xd4\x3c\x83\x24\xdd\x88\x77\x2f\xb6\xcb\xf9\x66\x66\x77\xcb\xcb\x05\xcf\x9b\x8b\x0a\xc4\x6d\xcf\xe5\x60\x03\x92\x71\xfc\x85\xe7\x92\x8b\x9f\x67\x01\x49\xca\x41\x60\x81\xf5\xd4\xe5\x7b\x30\x96\x2b\x40\x9e\xaf\x13\xf7\xd9\x70\xd3\x10\xd5\xd7\xd6\xb1\x94\xce\x7e\x78\x9c\x6a\x2c\x28\xae\xdc\xe9\x6f\x62\x8d\x89\x2b\x88\x52\x0e\xc3\xdd\x1d\x2e\xad\x46\xfe\xdf\x72\xe9\xbd\x05\x35\x34\x7c\x02\x00\x00\xff\xff\x64\x63\xff\x1f\x96\x00\x00\x00")

func stubMainStubBytes() ([]byte, error) {
	return bindataRead(
		_stubMainStub,
		"stub/main.stub",
	)
}

func stubMainStub() (*asset, error) {
	bytes, err := stubMainStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/main.stub", size: 150, mode: os.FileMode(420), modTime: time.Unix(1587732993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubModelModelStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stubModelModelStubBytes() ([]byte, error) {
	return bindataRead(
		_stubModelModelStub,
		"stub/model/model.stub",
	)
}

func stubModelModelStub() (*asset, error) {
	bytes, err := stubModelModelStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/model/model.stub", size: 0, mode: os.FileMode(420), modTime: time.Unix(1587716320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubRouteRouteStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xd1\x53\x10\x3e\xd9\x85\x13\xbd\xc3\x10\x14\xeb\x6d\x48\x80\xed\xd8\x28\x12\x6d\x73\xb5\x25\x8f\xa2\x96\x64\xc3\xde\x7d\x90\xec\x0d\x4d\x31\xec\xd0\x8b\x21\xf2\x27\xf9\xd1\xbf\xa4\x35\x1c\x2f\x81\x1d\x5c\x68\x1c\xc1\x0e\x68\x5f\x80\x3a\xe0\x90\x04\xa1\xa3\x11\x81\x22\x58\x46\x23\xe8\xda\xac\xe0\x95\x62\x39\xbf\x6a\x9b\x82\xa3\xee\x06\x24\x4a\x6b\x78\xea\xe0\x16\x12\x5c\x8c\x17\x90\x00\x8c\x6b\x37\xc8\x80\xcb\xdc\x36\xeb\x71\x08\x69\x74\xe0\x70\x44\xc1\xa2\x65\x5a\x6b\x7c\x29\xf4\x90\x22\xae\x88\x1e\x3d\xb2\x11\x04\xd3\x1b\xf2\x2d\x04\x2e\x00\x6b\x3c\xd8\x30\xdf\xa0\xe3\x30\x95\x01\xa7\x28\xe9\xac\x0b\x62\xf9\xee\x72\xe2\x54\x06\x2b\x95\x77\xdb\x07\xf0\x41\xfe\xec\x9b\x7b\x7c\x10\x8c\x70\xda\x6e\xb7\xdb\x43\x6e\xd9\x9e\xb1\x27\x9f\xc3\x53\x06\xbd\x12\xd0\xbb\xfb\xf4\xd3\x34\x07\x96\x92\x53\x6a\x36\xf6\xc5\xf4\xeb\x0f\x2a\x45\x45\x83\x5a\x6d\x2a\x8f\xa2\x07\x91\xb9\x52\x6a\x53\xf5\x24\x43\x3a\xef\x6c\x98\xf4\x57\xf2\x3f\x86\xa4\xfb\xc0\x53\xa5\x36\x5a\xc3\xfd\x4c\xd5\x28\xd5\x25\x6f\xe1\x80\x7d\x76\x9c\x6b\x77\x86\x87\x5c\xbd\xdb\x7f\x68\x19\xbd\x43\x86\x5c\x50\x5f\x98\x04\x19\x32\x63\x77\xc0\x38\x07\x1f\xf1\x4b\xc9\xb5\xc0\xf8\x2d\x61\x14\x78\x58\xd5\x12\x35\x0d\xfc\x2c\xc4\xa3\x18\x21\xbb\xf8\xb3\x29\x15\x1f\x8d\x77\x23\xd6\x95\xee\xc3\x73\xcc\xee\x3f\xcf\xe9\x3c\x92\xd5\x55\xbb\x00\x8e\xc2\x34\x7f\x62\xec\xe8\xfa\x9f\xaa\x47\x1a\xf1\x88\xfc\x1d\xb9\x2e\xf1\x9e\xb8\xae\x18\x63\x48\x6c\x51\x3b\x8a\x52\x35\x4d\xd3\xa8\xb2\xc5\x1e\x3b\x93\x46\x01\xf2\x0e\xaf\xbb\x41\xa6\xf1\xed\x32\xff\x86\xbf\x0b\x76\x58\x8c\xfb\x9c\x10\x32\x09\x6c\x98\xe6\xe0\xd1\xcb\x1d\xf3\x31\xfb\x5a\xe9\xc5\xe5\x2a\xdb\x98\x0f\x8d\x52\x0a\x00\x60\xbd\xab\x37\xef\x45\xfd\xbd\xc4\xbb\xf7\xa2\x7e\xa9\xdf\x01\x00\x00\xff\xff\xf0\xab\x23\x7f\x64\x03\x00\x00")

func stubRouteRouteStubBytes() ([]byte, error) {
	return bindataRead(
		_stubRouteRouteStub,
		"stub/route/route.stub",
	)
}

func stubRouteRouteStub() (*asset, error) {
	bytes, err := stubRouteRouteStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/route/route.stub", size: 868, mode: os.FileMode(420), modTime: time.Unix(1587879113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stub/controller/controller.stub":  stubControllerControllerStub,
	"stub/core/core.stub":              stubCoreCoreStub,
	"stub/core/response/response.stub": stubCoreResponseResponseStub,
	"stub/html/create.stub":            stubHtmlCreateStub,
	"stub/html/detail.stub":            stubHtmlDetailStub,
	"stub/html/edit.stub":              stubHtmlEditStub,
	"stub/html/list.stub":              stubHtmlListStub,
	"stub/layout/default.stub":         stubLayoutDefaultStub,
	"stub/main.stub":                   stubMainStub,
	"stub/model/model.stub":            stubModelModelStub,
	"stub/route/route.stub":            stubRouteRouteStub,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stub": &bintree{nil, map[string]*bintree{
		"controller": &bintree{nil, map[string]*bintree{
			"controller.stub": &bintree{stubControllerControllerStub, map[string]*bintree{}},
		}},
		"core": &bintree{nil, map[string]*bintree{
			"core.stub": &bintree{stubCoreCoreStub, map[string]*bintree{}},
			"response": &bintree{nil, map[string]*bintree{
				"response.stub": &bintree{stubCoreResponseResponseStub, map[string]*bintree{}},
			}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"create.stub": &bintree{stubHtmlCreateStub, map[string]*bintree{}},
			"detail.stub": &bintree{stubHtmlDetailStub, map[string]*bintree{}},
			"edit.stub":   &bintree{stubHtmlEditStub, map[string]*bintree{}},
			"list.stub":   &bintree{stubHtmlListStub, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"default.stub": &bintree{stubLayoutDefaultStub, map[string]*bintree{}},
		}},
		"main.stub": &bintree{stubMainStub, map[string]*bintree{}},
		"model": &bintree{nil, map[string]*bintree{
			"model.stub": &bintree{stubModelModelStub, map[string]*bintree{}},
		}},
		"route": &bintree{nil, map[string]*bintree{
			"route.stub": &bintree{stubRouteRouteStub, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
