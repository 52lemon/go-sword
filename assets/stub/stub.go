// Code generated for package stub by go-bindata DO NOT EDIT. (@generated)
// sources:
// stub/controller/controller.stub
// stub/core/core.stub
// stub/core/response/response.stub
// stub/html/create.stub
// stub/html/detail.stub
// stub/html/edit.stub
// stub/html/list.stub
// stub/layout/default.stub
// stub/main.stub
// stub/model/model.stub
// stub/route/route.stub
package stub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stubControllerControllerStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x6f\xdb\x36\x17\xbe\x96\x7e\x05\x5f\x01\xaf\x41\x15\x9e\xbc\x0e\xc3\x2e\x3c\xdb\x40\x6b\x37\x43\xb0\x76\x0d\x92\x6d\xbd\x08\x02\x83\x16\x8f\x65\xb6\x12\xe9\x90\x47\x19\xda\xc2\xff\x7d\xe0\x87\x6c\xc5\x4e\xb2\x3a\x5d\x0a\x77\x8d\x2e\x6c\xf1\xe3\x7c\xf1\x9c\xe7\x39\x92\x96\x2c\x7f\xc7\x0a\x20\x83\x41\xb8\x9b\x4a\x56\xc1\x68\x14\xc7\xa2\x5a\x2a\x8d\x84\xc6\x51\x02\x32\x57\x5c\xc8\xa2\xf7\xd6\x28\x99\xc4\x51\x32\x18\xf8\xd5\x69\xa5\x38\x94\xa3\xd1\xb5\x39\x0d\x66\xa9\xa4\x01\x3f\x2d\x54\x4f\xa8\x1a\x45\x69\x07\xa5\x2a\xec\x9f\x04\xec\x2d\x10\x97\xf6\xbe\x62\xb8\xb0\xff\x06\x75\xae\xe4\x55\x12\xc7\x51\x52\x08\x5c\xd4\xb3\x2c\x57\x55\xef\xad\x90\x1f\x16\x75\xaf\x50\xba\xb2\xbb\xe6\x15\x26\x71\x1a\xc7\xf3\x5a\xe6\xe4\xa5\x30\x48\xf9\x8c\x3c\xb1\xab\xd9\xe4\x79\x4a\xec\x34\xfd\x4b\x0b\x04\x4d\xac\x81\xec\x34\xf8\xf2\xc6\xcd\x75\x89\x86\xcb\x1a\x0c\x92\x27\x61\xd5\x8d\x52\xf2\x31\x8e\x34\x60\xad\xe5\xe7\x68\x88\x38\xcc\x41\x7b\x0d\x7e\x22\x12\x73\x02\x5a\x93\xfe\x90\x68\xc8\xd5\x15\x68\x9a\xfe\xec\x66\xfe\x37\x24\x52\x94\x7e\x53\x54\x99\xa2\x4b\xa6\x76\x97\x3d\xdf\xec\x15\xd3\x66\xc1\x4a\xda\x9c\x63\x76\x0a\xe8\x37\x46\x63\xc5\xa1\xef\xfd\x3a\x43\x86\xb5\x39\x96\x08\x5a\xb2\xf2\x0c\xf4\x15\xe8\x17\x5a\x2b\xdd\xf5\x5b\x5f\x99\xa2\x4f\xc8\xbc\xc2\xec\x6c\xa9\x85\xc4\x39\x4d\xfe\x7f\x95\x74\xad\xf5\xd4\x6f\x59\xa5\xee\xcf\x07\x9b\xb9\xf8\x68\x65\x0a\x37\xbb\x8a\xa3\x68\x45\xd3\x38\x8e\xa2\x5e\x8f\xfc\x02\x48\x96\xac\x80\x38\x8a\xd6\xe1\xb8\xb8\xb3\x13\xa6\x0d\x1c\x29\x5d\x51\x2b\x16\xc2\x6d\x07\xb7\x64\x52\xe4\x14\xb4\xce\x9c\x73\x34\xb5\xfb\x56\x56\xaf\x55\xd8\x56\x65\xb5\xfc\xc9\xca\x1a\x68\x62\x97\x92\xa0\xd0\x6d\x1b\x0e\x49\x92\x34\x0a\xed\x98\x24\x4f\x93\xb6\xa2\x63\x89\xdd\xe6\xa8\x43\x25\x65\xcf\x50\x09\x6a\x17\xf7\x76\x2d\x84\x6c\x80\xe9\x7c\x31\xe5\x0c\x59\x1c\x45\x33\xc5\xdf\xaf\x6d\xf8\x92\xce\x4e\x81\xf1\x67\xa5\x4d\x95\x8f\xe1\xb9\xe2\xef\xf7\xb6\x36\x17\x25\x82\x36\x56\x6d\x67\x30\x70\x88\x9a\x1a\xd4\x75\x8e\xa3\xd1\xc7\x55\x38\xf3\x50\x1b\x7f\xc8\x2a\x54\x87\x77\xa7\x13\x84\xef\x1b\x22\x2a\x64\x25\x91\x75\x65\xe2\x28\x72\x83\xdf\xea\xca\xb9\xf2\x7d\x38\xd9\x33\xf1\xc1\xa5\xe9\x07\xbb\x81\xcd\x4a\x37\x38\xbf\xb8\xd1\x51\x3e\xcb\xde\x2c\x40\x03\x6d\xbc\xca\x8e\x84\xe4\xb4\xe3\xe4\xd2\x6c\xac\x6a\x89\xb4\xb3\x36\xd3\x94\xd7\x58\x55\xcb\x1a\xc1\x3b\x33\xb5\x46\xd7\xde\x9c\xd8\x81\xb5\x68\x69\x22\x1b\x83\x28\xe9\xbc\x54\x0c\x7f\xfa\x91\x6e\xd4\x90\x1e\x69\x26\x1b\x8f\xd3\x76\xe9\x5a\xec\x69\x6e\x75\x86\xbb\x3b\x42\xe8\xf5\x6e\x0b\x22\xc8\xa6\x37\xc6\xf9\x52\x54\x02\x37\xd6\xb3\xd7\xf3\xb9\x01\xa4\x34\xd4\xe6\x77\x4f\xd3\x27\xad\x45\xcd\x41\xd3\x24\xd7\xc0\x10\xf8\x94\x21\xe1\x60\xf2\x64\xc7\x90\x73\x18\x3d\x46\xb6\xa8\x60\x87\x08\x5e\xff\xea\x40\x3d\x61\xc8\xfa\x9b\xed\x96\x21\x3d\x75\xd8\xbb\x3e\x69\x74\x7b\x02\x38\x61\x85\x90\x0c\x85\x92\x2d\x91\xcd\x64\xe0\x9c\x93\xe0\x77\x9f\x10\x42\x9a\x20\x02\xc9\xfc\xde\xe4\xc0\x2e\xae\x13\xd2\x5e\x74\x09\xec\x13\x22\x24\xd2\x4d\x46\x03\x03\x45\xe3\x5a\x6b\x90\x68\xe7\xfa\xa4\xc1\xb1\x27\x27\xf7\xe7\x7e\x5d\xbd\xf2\x35\xf4\xae\x71\x64\x47\x03\xee\x5d\xfb\x53\xaf\x6b\x48\xae\x51\x1f\xdf\x4f\x4f\xb4\x8a\x57\xa1\x0f\x4d\xa0\x04\xab\xe0\x50\x3a\x51\x1c\xd9\x54\x6d\x75\x23\xd2\xba\xfe\xb9\x2d\x91\xad\xeb\x93\x5a\xd4\xb6\x90\xbd\x3e\xad\x63\xdd\x24\x79\x77\x03\xdb\xde\xbd\x4a\x77\xa6\x76\x1b\xdb\x35\x81\xf5\x28\xf4\xb9\xcf\xe4\xf7\x52\x15\xd9\xc9\xb6\x9f\x76\xc1\xa7\x73\x5d\xc7\x0c\x99\xe7\xb3\x77\x40\x2b\xb6\x3c\x37\xa8\x85\x2c\x2e\x84\x74\x75\x7c\x17\xd5\x5b\xd1\xbd\x6b\xdd\x5c\x96\xd6\xdc\x0e\xd7\x59\xa9\xe3\x49\x9f\x58\xa5\xe7\x89\xe0\xc9\xc5\x06\x6a\xb3\x2c\x54\x74\xc7\x5c\x96\xb7\xd3\xd0\x9d\x69\xb6\x7c\xb4\x9b\xcd\xc4\xd4\x79\x0e\xc6\x24\x9b\xc5\x83\x47\xf7\xd8\xd1\xf4\xe1\xa0\xfb\x11\xdc\x5f\x1e\xdc\xb7\x57\x5b\x83\xe7\xbd\x1f\xdc\xee\x85\x66\x3e\xcb\x42\x39\x06\xf9\x6f\x1c\x9b\x2f\xb8\x38\xa4\x37\xc0\x47\x64\x7e\xb3\xc8\xac\x97\x9c\x21\x4c\x82\xcd\x9b\x8c\x36\x71\xf3\x59\x76\x24\xb4\x41\xda\xd9\xc8\x74\x5d\x1f\xce\x8e\x27\x9b\xc3\x6a\x29\x1c\xba\xd5\xb6\x82\x33\x76\x05\x6d\xf9\x87\x26\x02\x7b\xf9\x57\x0b\x77\x3a\x5f\x11\x43\x4c\x00\x99\x28\x1f\x39\xe2\x86\xeb\x2b\xe1\x88\x07\xa4\x88\x6b\xcf\xec\x26\xe9\x92\x99\xd3\xe2\xbe\x7c\x68\x56\x99\x7b\x3e\xa8\x7b\xe1\x7f\x93\xb0\x7c\xeb\x0f\xb4\xe1\x10\x48\xbc\x11\xff\xe8\xfe\x08\xff\xdb\xe0\xff\x9c\x61\xbe\x38\xbc\xf7\xf3\xff\xe8\xa7\xe2\x2f\xfb\x0a\x7d\x6e\xb1\xf8\x30\xdd\x7c\xae\x34\x11\xdc\x25\x83\xc9\x02\x5c\xff\x75\x22\xeb\x2f\x7f\x3b\x20\x3d\x9e\xf4\x05\x5f\xa5\xcd\xab\xf3\x2e\x88\xd7\xca\xf7\xfd\xa6\xb7\x03\xcb\x43\xfe\x24\xf6\x77\x00\x00\x00\xff\xff\x50\xfd\x2c\x40\x50\x1a\x00\x00")

func stubControllerControllerStubBytes() ([]byte, error) {
	return bindataRead(
		_stubControllerControllerStub,
		"stub/controller/controller.stub",
	)
}

func stubControllerControllerStub() (*asset, error) {
	bytes, err := stubControllerControllerStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/controller/controller.stub", size: 6736, mode: os.FileMode(420), modTime: time.Unix(1587969381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubCoreCoreStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6b\x33\x45\x14\xbe\xde\xf9\x15\xe3\x80\x65\xb7\x4d\x77\xb5\x7e\x50\x42\xb7\x5a\x4d\x7b\x55\xb1\xc4\xa2\x17\x22\xed\x64\xf7\x64\x33\x75\x77\x66\x3b\x33\x9b\x12\x4b\x6e\x44\x50\x41\xd4\x9b\x8a\x20\x88\xe0\x85\x57\x6a\xaf\x44\xa8\xfa\x6b\x9a\xf8\xde\xbd\x7f\xe1\xe5\xcc\x64\x4b\x4a\xc3\xfb\x91\x9b\x64\xe6\x39\xe7\x39\xcf\x39\xcf\xc9\xd4\x3c\xfb\x94\x17\x40\x33\xa5\x81\x10\x51\xd5\x4a\x5b\x1a\x92\x80\x09\x95\x08\xd5\x58\x51\x32\x12\x30\x09\x36\x19\x59\x5b\x33\x42\x02\xb6\xb3\xe3\xc3\x4e\xb4\x6a\x2c\xec\xee\xe2\xe5\x09\x65\x85\xb0\xa3\x66\x10\x67\xaa\x4a\x0a\xb5\x69\xce\xcb\xcd\x5c\x8b\x31\xe8\xa4\x9a\x98\x73\xc7\xb2\x14\x71\x26\xe4\x67\xa3\x26\x29\x94\xae\x18\x89\x08\xb1\x93\x1a\x68\x1f\x4c\xad\xa4\x81\x3e\x58\x6a\xac\x6e\x32\x4b\x2f\x49\xf0\xae\xca\x81\x0a\x69\x69\xfb\x39\x3d\x33\x4a\x76\x59\xa6\x72\x60\xa7\x24\x78\xcf\x14\x14\xc3\x85\x2c\xee\xe1\x95\x29\x10\xee\x71\xcb\x31\x1d\xf4\x90\x67\x70\x39\x6d\xe1\x9c\x5b\xce\x4e\xc9\xf4\x61\xed\x43\x61\x96\xeb\xbb\xe3\x0a\x82\x52\x18\xeb\x09\x3c\xc3\xbe\x2c\x84\x84\xa5\xc4\xde\x80\xae\x63\x83\x71\xef\x1d\x8c\x1a\x36\x32\xa3\x21\xd0\x75\x1f\x18\xd1\x43\xc5\xf3\x30\xa2\x21\x68\x4d\x41\x6b\xa5\x23\xcc\x4a\x12\xfa\x7e\x0d\x92\xe6\x03\x12\x40\xdc\x1b\x74\x10\xa3\x29\x75\x4c\x88\x84\xcc\x0f\xb4\x43\x99\x56\xca\x76\x5f\xdd\x7a\xed\xf5\x37\xde\x7c\x3b\x29\x14\xcf\x2b\x21\xdf\xca\x46\x5c\x1b\xb0\x69\x63\x87\xdb\x6b\x35\xfe\x3e\x16\x15\xa4\xc7\xba\x81\xb5\x52\x65\xe9\xa1\xca\x78\xc9\x22\x12\x88\xa1\xa3\x7e\x29\xa5\x52\x94\x58\x3a\xd0\x60\x1b\x2d\x49\x30\x25\x4e\x47\x1f\x0a\x61\x2c\x68\xea\x8c\x26\x81\xfb\x8a\xdb\xdb\xd0\xa9\xc3\xb3\xcc\x41\x47\x84\x2c\xd2\x91\x6d\x65\xbf\xfd\x46\x3e\x6c\xd7\x37\x07\xb1\x1f\xc6\xb3\x44\xf9\x68\xdc\xc4\x18\x6d\x01\xb9\x27\xf3\x0f\x40\x8f\x21\x64\xdd\xed\x57\xb6\xb7\x58\x07\xd3\xa2\x56\x8a\x33\xe7\xa1\x0e\x27\x38\xbc\xd0\x02\x7b\x73\x64\xad\xfb\x1f\xb9\xbb\x0e\xd5\x70\xde\x80\xb1\x74\x7d\x81\xba\x13\xea\x75\x73\x79\xf4\xdb\xaf\xf3\x9f\xbf\x9f\x7d\xf7\xf9\xfc\xea\xfa\xf1\x3f\xdf\xcc\x7f\xfc\x65\x76\xfd\xc5\xec\xab\xeb\xf9\x0f\x5f\xde\xde\xfc\xe5\x55\x76\xd3\x96\x24\x3e\x42\x0f\x0e\x94\xae\x56\xf7\x57\x73\x29\x32\x9c\x4a\xbc\x8f\x53\x09\xa3\xc8\xf7\x5a\x73\x3b\x5a\xa6\x41\x86\x0f\x79\xd9\x40\xc8\x10\x62\x91\x13\x53\xaa\x22\x3e\xd2\x42\xda\x52\x86\xec\xe5\x31\xeb\x50\x04\x7d\x21\xc7\x90\xa6\x94\xb1\xa5\x42\xac\x54\x06\x3c\x54\x73\xcd\x2b\x16\xdd\xf9\x7d\x7b\xf3\xed\x58\xc0\xc5\xff\x3f\xfd\x31\xfb\xf7\xea\xf6\xef\xdf\x67\x7f\xde\xcc\xbf\xfe\xaf\xed\x6a\xa0\xf2\x09\xea\x81\x58\x03\xcf\x0f\x44\x09\x21\xc3\x70\x46\x37\x3c\xdd\x06\x65\xf1\xc8\x56\xe5\x42\x19\xc5\x04\xbf\xbd\xdd\x94\x62\x64\xbc\x67\x0c\xd8\xa7\x65\x9d\xb4\xdb\xee\xcd\x89\x9d\x1f\x21\x12\x21\xfa\xbc\xb3\x5b\xb5\x7c\x77\x9a\x5d\x51\xff\x5c\x44\xf4\xe3\x4f\x06\x13\x0b\x48\x75\x4f\xac\x7f\xf8\xe2\xfe\x72\xce\x0b\x79\xb7\xf8\x27\x20\x29\x99\x92\x27\x01\x00\x00\xff\xff\x84\x43\x87\xd7\x64\x05\x00\x00")

func stubCoreCoreStubBytes() ([]byte, error) {
	return bindataRead(
		_stubCoreCoreStub,
		"stub/core/core.stub",
	)
}

func stubCoreCoreStub() (*asset, error) {
	bytes, err := stubCoreCoreStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/core/core.stub", size: 1380, mode: os.FileMode(420), modTime: time.Unix(1587875134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubCoreResponseResponseStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xcf\xcb\xaf\xb0\xfa\x33\xb8\xc2\x11\xd0\x04\xdc\x57\xab\x35\x91\x61\x75\xa2\xd8\x39\xb0\x69\xff\x1d\x39\x6b\xa7\x4c\x5a\x4f\xcd\x7b\x9f\xfd\xf2\x92\x71\xfa\xc5\x48\x50\x48\x73\x12\xa5\x10\xec\x2f\x13\x7c\x90\x81\x5a\xa9\x93\xc1\x39\xec\x9e\xd3\x4c\xc0\x62\xb0\x7d\xe3\x8f\x26\x79\x1a\xa6\x34\xd3\x30\x86\xdd\x9b\x46\x70\x9c\x25\xde\xf9\x8b\x46\xb7\x5f\xd0\xd0\xc7\xa9\x7c\xe3\x44\xe7\xcb\x66\xcf\x68\x38\x8c\xe1\xb2\x66\xbe\xb2\xf6\xa1\xed\xf8\x60\xea\xc8\x6a\xbe\x75\x8f\x91\x05\x8d\x93\x40\xf7\xbb\x42\xf9\xa6\x74\x01\x1d\xd6\x75\xab\xa5\x90\xd8\xde\x1f\xc1\x2b\x6e\xd5\xae\xf2\x21\x63\xa4\x35\x8d\x3e\xf9\x44\xde\xae\xc3\xdc\x3e\x28\x9f\x1a\xf3\x95\x0c\x8f\x0e\xea\x1d\x63\x2e\xb7\x45\x7a\xa3\xde\xeb\xa2\xf0\x80\x92\xba\x68\xbb\xf1\x7f\x00\x00\x00\xff\xff\x2f\xbd\xad\x10\x98\x01\x00\x00")

func stubCoreResponseResponseStubBytes() ([]byte, error) {
	return bindataRead(
		_stubCoreResponseResponseStub,
		"stub/core/response/response.stub",
	)
}

func stubCoreResponseResponseStub() (*asset, error) {
	bytes, err := stubCoreResponseResponseStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/core/response/response.stub", size: 408, mode: os.FileMode(420), modTime: time.Unix(1587969404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlCreateStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\xb2\x05\x24\xa3\xfe\xda\xa0\x58\x14\xaa\x29\xb4\x3d\x14\x6d\x0f\xd9\x43\x7a\x5b\x2c\x02\x5a\x1a\x2a\x4c\x28\x52\x20\x47\x8e\x8d\xc0\xff\xbd\xa0\x64\x47\x8e\x25\x7f\xa0\x3c\x10\x30\x39\xf3\xe6\xbd\x37\x43\x79\x49\x58\x56\x5a\x10\xa6\x23\x00\x80\x65\xae\xd6\x90\x69\xe1\x3d\x67\x5a\x6c\x6d\x4d\xac\xbd\x68\x2e\xd5\x74\xe5\x50\xe4\x99\xab\xcb\x15\x24\x9e\xb6\x1a\x39\x7b\x2b\x85\x2b\x94\x49\x20\xba\xfb\xb9\xda\x40\xd8\xa2\xdd\x51\x56\x2f\x73\xaa\x08\xcb\x74\xb9\x24\xb1\xd2\xf8\x68\x44\x89\x69\xba\x9c\xf7\x23\xae\x21\x64\x0e\x05\xe1\xc5\xcc\x8f\x97\x1f\x94\x64\xd6\x10\x1a\xea\x64\x54\x22\xcf\x95\x29\xf6\x3a\xa2\x09\x94\xca\xfc\x85\xaa\x78\xa2\x70\xf4\xcb\xa2\x39\x5b\x89\xec\xa5\x70\xb6\x36\x79\x02\xd1\x0f\x52\xca\x21\xa9\xce\xbe\x02\x6d\x2b\xe4\x4c\x6a\xdc\x30\x78\xae\x3d\x29\xb9\xe5\xcc\x93\x70\xc4\x40\x68\x55\x18\xce\x4a\x95\xe7\x1a\x19\x24\x45\x4d\x84\x8e\xb3\xcf\x5f\x18\xac\xa7\xd2\x3a\xce\xe2\xb5\xd0\x35\x4e\x82\x39\x63\x50\x06\x94\x91\x96\x41\xcf\xf3\xe8\x6e\x51\x6d\x60\xd1\x23\xf1\xae\x51\x83\xaf\x84\xe1\xec\x8e\x75\xb9\x84\x1b\xfa\x3d\x50\x48\x22\x17\xe4\x85\xec\xb7\xb7\x50\x6a\xb7\x0b\x86\x65\x56\x5f\x41\xfb\x32\x50\x6e\x1f\xa4\x4c\x55\x13\xac\xa7\xa5\xcd\x51\x73\x16\x78\x7f\x0b\xd0\xdf\x59\xd3\xe3\xe6\x7a\x00\x7d\xa8\x6c\x38\x74\xf6\x75\xc8\xde\xab\xfc\xc0\x4a\xe9\x91\xae\x0b\x3f\xa7\x63\x55\x13\x59\xb3\x6f\xa3\xaf\xb3\x0c\xbd\x67\xf0\x5b\xa6\x55\xf6\xc2\x59\x61\x1f\xc4\x1a\x59\x1a\xf6\x66\xc6\x9a\xe8\xdb\xc0\xda\x56\x76\x48\x7f\x88\xec\x85\xa5\x61\xbf\x84\x74\x9b\x43\x6d\x54\x33\xd8\xfb\xf7\x3c\xcf\xd5\x3a\x1d\x2d\xe7\xdd\x33\x5f\xfa\xcc\xa9\x8a\xf6\x6c\x82\x27\xf3\x67\xb1\x16\xed\xe9\xde\x90\xd2\xe6\xb5\xc6\x19\x6e\x2a\xeb\xc8\x03\x87\xb7\xf7\x12\xb9\x20\x91\x80\xac\x4d\x46\xca\x9a\x78\x7c\x74\x15\x96\x43\xaa\x9d\x39\x39\x6c\x2e\x6c\x4d\xf8\x77\x9e\x00\x3d\x29\x3f\x53\xf9\xa4\x17\x11\x8c\x49\xfa\x89\x41\xc5\xf2\xd9\x3f\x86\xc2\x8f\x21\x26\xed\xbb\xb3\xeb\xa3\x49\x85\x3a\xf7\x8f\x41\xe5\x30\xe8\x11\xea\x51\xec\x10\xf8\x68\xf8\xd7\x51\xd1\xca\xd9\xca\x27\xf0\x2d\x52\x79\xf4\xbd\x3b\x2e\x91\x9e\x6c\xee\x93\x13\x3b\xda\x9e\x5f\x30\x31\xac\xc6\xa6\x1f\x1b\xd7\xdc\xac\xb0\xf1\xf4\xf3\x78\x74\x41\x72\x3b\x91\x57\x30\x95\x8c\x3f\x35\xb8\x6b\x74\x4a\x6e\xff\x0c\xb2\xff\xdd\x56\x18\x8f\x87\xa2\xe1\xbd\x9d\x57\x2c\x79\xa7\x2b\x36\xca\xfa\x41\x9c\x59\x65\x3d\xc5\xd1\x5c\x54\x6a\xfe\xf1\xcb\x3f\x6f\x3f\xe3\xd1\xe4\x9f\x87\xaf\xf7\x33\x4f\x4e\x99\x42\xc9\x6d\xdc\x8e\x89\x91\x76\x3c\x1e\x46\xa4\x27\x34\xb1\x43\x5f\x59\xe3\x91\xa7\xc3\xfc\xf7\xaa\x0f\x61\xb3\xd0\xee\x59\x66\x73\x84\x4f\x9c\xc3\xdd\x62\x71\x4e\xf8\x61\x09\x8d\x8e\x4e\xf2\x4b\x5f\x0c\x73\x3a\xac\x33\xae\x1d\x56\xdf\xbd\xc3\xfa\xba\x7a\xc6\x8c\x66\xc2\x7b\x55\x98\xce\x02\x98\x7c\x24\x10\xb6\x61\x06\xbb\x8b\x43\x72\xd2\xf6\x6e\x5a\x60\x70\x5c\xa4\x75\xf1\x5a\x38\x08\x8d\x0a\x7f\x42\x5d\x4b\xce\x98\xa6\x64\xcb\xf9\xe8\x3d\xb5\x1f\x7f\xe0\x9c\x03\x33\x75\xb9\x42\xc7\x2e\x59\xae\x64\xac\xfc\xbd\xb8\xef\xb4\xb7\x00\x67\x07\xf4\xb0\xda\x3e\x85\xd8\x9f\x18\x28\x0f\xc6\x12\x08\x38\x54\xbc\xa1\x5b\x20\x85\xf6\xf8\x3f\x7a\x76\xc2\x14\x38\xdc\x37\x55\x7b\x12\x86\x1b\x86\xda\xe3\x35\xe3\xda\x57\x71\xd1\xb8\x3e\x8b\x87\x26\xe9\x46\x16\x37\xbc\xf0\xbd\x4d\xe4\x6a\xfc\xf5\xdc\x17\x71\xd4\xee\xcb\x79\xfb\x6f\x92\xfe\x17\x00\x00\xff\xff\x4c\x10\xbd\xe2\x5e\x0a\x00\x00")

func stubHtmlCreateStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlCreateStub,
		"stub/html/create.stub",
	)
}

func stubHtmlCreateStub() (*asset, error) {
	bytes, err := stubHtmlCreateStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/create.stub", size: 2654, mode: os.FileMode(420), modTime: time.Unix(1587965193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlDetailStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x6d\x6b\xdb\x30\x10\xfe\x9e\x5f\xa1\x69\x03\x27\x90\xc4\x69\x18\x65\x78\x96\x59\xc7\x3e\xac\xbf\xa1\x94\xa2\x58\x67\x47\xad\x2c\x09\xe9\x9c\x26\x04\xff\xf7\x21\xdb\x6b\xde\xdc\x66\x4c\x1f\x0c\xbe\x97\xe7\xee\x79\x74\xa7\x14\xa1\xb2\x8a\x23\x64\x23\x42\x08\x49\x85\xdc\x90\x5c\x71\xef\x19\x55\x7c\x67\x6a\xa4\x9d\xa3\x75\xca\xd9\xca\x01\x17\xb9\xab\xab\x15\x49\x3c\xee\x14\x30\xba\xaf\xb8\x2b\xa5\x4e\x48\xb4\xfc\x6a\xb7\x24\x7c\xa2\xe6\x28\xeb\x22\x73\x26\x11\xaa\x2c\x4d\x91\xaf\x14\x3c\x69\x5e\x41\x96\xa5\xf1\x65\xc4\x35\x04\x01\xc8\xa5\xfa\x30\xf3\xd4\x79\xc2\x24\x37\x1a\x41\xe3\x81\x86\xe5\x42\x48\x5d\xf6\x3c\xa2\x29\xa9\xa4\xfe\x0d\xb2\x5c\x63\x30\x7d\x5b\xb4\xb6\x15\xcf\x5f\x4a\x67\x6a\x2d\x12\x12\x7d\x2e\x8a\x62\x88\xaa\x33\xaf\x04\x77\x16\x18\x2d\x14\x6c\x29\x79\xae\x3d\xca\x62\xc7\xa8\x47\xee\x90\x12\xae\x64\xa9\x19\xad\xa4\x10\x0a\x28\x49\xca\x1a\x11\x1c\xa3\x37\xb7\x94\x6c\x66\x85\x71\x8c\x8e\x37\x5c\xd5\x30\x0d\xe2\x4c\x88\xd4\x44\xea\xc2\xd0\x0b\xc9\xa3\xe5\xc2\x6e\xc9\xe2\xa2\x87\x37\x8a\x8a\x78\xcb\x35\xa3\xcb\xa3\x5c\x84\x2d\xde\x85\x0e\x92\xc8\x05\x76\x21\x7b\xbf\x0f\x95\x9a\x26\xe8\x95\x1b\x75\x05\xed\x76\xa0\x5c\x1f\x24\xb5\xad\x91\x6c\x66\x95\x11\xa0\x18\x0d\x6d\x3f\x04\xe8\x47\xda\x5e\x71\xeb\x1e\x40\x1f\x2a\x1b\x8c\xce\xbc\x0e\xa9\x7b\xb5\x3f\x62\x8a\xc2\x03\x5e\x27\xfe\x1e\x8f\x55\x8d\x68\x74\x7f\x8b\x9d\xf8\x3f\x72\x25\xf3\x17\x46\x4b\xf3\x93\xe7\x2f\x34\x0b\xdf\x76\xbe\xda\xd0\xff\x25\xd5\x45\xb5\xa3\xd8\x6f\x60\x2c\xe4\x26\x1b\xa5\xf1\x61\x31\x53\x9f\x3b\x69\xb1\xef\x26\xd0\x88\x9f\xf9\x86\x77\xd6\x9e\x43\x65\x44\xad\x60\x0e\x5b\x6b\x1c\x7a\xc2\xc8\xfe\xad\x84\xe0\xc8\x13\x52\xd4\x3a\x47\x69\xf4\x78\x72\xe4\x0a\xc7\x01\xd6\x4e\x9f\x19\x5b\x87\xa9\x11\xee\x45\x42\x70\x2d\xfd\x5c\x8a\xe9\x45\x44\x10\x26\xb9\x4c\x0c\x2c\xd2\x67\xff\x14\x0a\x3f\x85\x98\xec\x52\x9d\x66\x34\xfc\xd7\x1c\xaa\x58\x67\xac\x4f\xc8\x43\x24\x45\xf4\x78\x30\x57\x80\x6b\x23\x7c\x72\xd6\xb1\xd4\x12\xef\xac\xfc\xd5\x3e\x0a\x1f\xd0\x0d\xa7\x25\xc4\xb7\xd2\xf8\xc1\xfb\x9f\x5b\xe3\x71\x1c\xc5\xdc\xca\xf8\xf4\x99\x8a\xbb\x37\x27\x9a\xee\xa5\x48\x2c\x77\x1e\xee\x35\x8e\x5b\xb8\x5e\xad\x49\x33\x19\xc6\xc4\x35\xe8\xb1\x03\x6f\x8d\xf6\xc0\xb2\x41\xd5\x3a\x22\xc5\x5b\xd8\x3c\x28\x38\xcf\x8d\x00\xf2\x89\x31\xb2\x5c\x2c\x86\xd8\x1c\x1f\xae\xc0\xe1\x59\x7e\xe5\xcb\xe1\x9e\xfe\x9e\x6e\x02\xde\x0d\x69\xde\xf5\x74\x83\xa1\x0b\x43\x18\x39\xad\x19\x3e\x83\x69\x67\xf2\x34\xa7\x43\xd5\xed\xd6\xbf\xdc\xde\x97\x56\x6f\x37\x2f\xcd\x78\x76\x33\xb9\x3e\x4c\xb9\x03\x8e\x20\x3e\x80\xee\xc9\x1c\x4d\xd1\x78\xf2\x7d\x74\x0a\xda\x8c\xd2\xb8\x5b\xbb\xec\x4f\x00\x00\x00\xff\xff\x27\x7a\xb2\x72\x39\x07\x00\x00")

func stubHtmlDetailStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlDetailStub,
		"stub/html/detail.stub",
	)
}

func stubHtmlDetailStub() (*asset, error) {
	bytes, err := stubHtmlDetailStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/detail.stub", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1587965193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlEditStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\xcc\xb2\x05\x24\xa3\x8e\xed\x0d\x8a\x45\xa1\x5a\x42\xb7\x28\x8a\xee\x25\x3d\x6c\x6f\x8b\x45\x40\x8b\x23\x65\x12\x8a\x14\xc8\x91\xd7\x86\xe1\xff\x5e\x50\x72\x62\xc7\x92\x3f\xd0\x1e\x97\x07\x01\xe6\xcc\xbc\x99\xf7\x66\x48\x7a\xce\x58\xd5\x5a\x32\x66\x37\x00\x00\x73\x45\x4b\xc8\xb5\xf4\x3e\x15\x5a\xae\x6d\xc3\xa2\x33\xb4\x46\xba\x5d\x38\x94\x2a\x77\x4d\xb5\x80\xc4\xf3\x5a\x63\x2a\x36\x95\x74\x25\x99\x04\xa2\xbb\x9f\xeb\x15\x84\x4f\xb4\x3d\x88\xea\x45\xde\x12\x63\x95\xcd\xe7\x2c\x17\x1a\x1f\x8c\xac\x30\xcb\xe6\xd3\xbe\xc7\x25\x04\x54\xc4\x67\xe3\xde\x1a\xdf\xf0\xc8\xad\x61\x34\xbc\x27\x51\x4b\xa5\xc8\x94\x3b\x16\xd1\x18\x2a\x32\x7f\x21\x95\x8f\x1c\xb6\x7e\x99\xb5\x7b\x0b\x99\x3f\x97\xce\x36\x46\x25\x10\xfd\x50\x14\xc5\x10\x51\x67\xbf\x01\xaf\x6b\x4c\x45\xa1\x71\x25\xe0\xa9\xf1\x4c\xc5\x3a\x15\x9e\xa5\x63\x01\x52\x53\x69\x52\x51\x91\x52\x1a\x05\x24\x65\xc3\x8c\x2e\x15\xef\x3f\x08\x58\xde\x16\xd6\xa5\x22\x5e\x4a\xdd\xe0\x38\x48\x33\x02\x32\x40\xa6\xb0\xa2\x27\x78\x74\x37\xab\x57\x30\xeb\xd5\xf0\x4a\x51\x83\xaf\xa5\x49\xc5\xdd\x41\x2c\xe3\x8a\x3f\x86\x0a\x92\xc8\x05\x76\x21\x7a\xb3\x09\x99\xb6\xdb\xa0\x57\x6e\xf5\x05\xb4\x0f\x03\xe9\x76\x4e\x64\xea\x86\x61\x79\x5b\x59\x85\x3a\x15\xa1\xec\x2f\x01\xfa\xab\x68\x1b\xdc\x9a\x07\xd0\x87\xd2\x86\x4d\x67\xbf\x0d\xa9\x7b\xb1\x3e\xb0\x45\xe1\x91\x2f\x13\x3f\xc5\x63\xd1\x30\x5b\xb3\xeb\xa2\x6f\xf2\x1c\xbd\x17\xf0\x5b\xae\x29\x7f\x4e\x45\x69\x3f\xcb\x25\x8a\x2c\x7c\xdb\x11\x6b\xbd\xaf\x03\xeb\x3a\xb9\x47\xfa\x5d\xe6\xcf\x22\x0b\xdf\x73\x48\xd7\x29\xd4\x79\xb5\x73\xbd\x3b\xcc\x53\x45\xcb\xec\x66\x3e\xdd\x9f\xf1\xb9\xcf\x1d\xd5\xbc\xab\x26\x68\x32\x7d\x92\x4b\xd9\xed\xee\x04\xa9\xac\x6a\x34\x4e\x70\x55\x5b\xc7\x1e\x52\xd8\xbc\xa6\x50\x92\x65\x02\x45\x63\x72\x26\x6b\xe2\xd1\x81\x29\x2c\x87\xdc\x38\x73\xb4\xd9\x1a\x6c\xc3\xf8\x49\x25\xc0\x8f\xe4\x27\xa4\xc6\x3d\x8f\x20\x4c\xd2\x0f\x0c\x2c\xe6\x4f\xfe\x21\x24\x7e\x08\x3e\x59\x5f\x9d\x6d\x1f\x0d\x0a\x42\xad\xfc\x43\xa0\x39\x8c\x7a\x88\x7b\xe0\x3c\x00\x0f\xdb\x9b\xe1\x5f\x07\x79\x6b\x67\x6b\x9f\xc0\x97\x88\x54\xf4\x75\xbf\x5d\x21\x3f\x5a\xe5\x93\x23\x45\xc8\x10\x7f\xac\xe9\x0f\x64\x49\xfa\x8c\x9c\x61\xb5\x82\xc9\x15\x59\x3f\xc8\x62\x52\x5b\xcf\x71\x34\x95\x35\x4d\xdf\xde\xa8\x53\xd5\xc2\x47\xe3\x0d\xa9\xa4\x96\xce\xe3\x27\xc3\x71\x0b\xb7\xeb\xc6\x68\x3b\x1a\xc6\xe4\x47\x34\xb1\x43\x5f\x5b\xe3\x31\xcd\x4e\xe8\x17\x88\x14\xaf\x6e\x93\xa0\xe4\x24\xb7\x0a\xe1\x5d\x9a\xc2\xdd\x6c\x36\xc4\xe6\x70\x49\x8d\x8e\x8f\xe2\x2b\x5f\x0e\xd7\xf4\xb2\xba\x09\x3b\xe9\xb2\x3d\x69\xe9\x06\xcf\x14\x16\x52\x78\x9b\x33\x7c\x06\xc3\x8e\xe4\x39\x1a\xb3\xee\xec\x5e\xd3\xbd\x1f\x5b\xbd\xdd\xa4\xb4\xf1\xed\xfb\x0b\x98\xe1\x4e\xb9\x80\x49\x45\xfc\xae\xc5\x5d\xa2\xa3\x62\xfd\x67\x18\xde\x7f\xd6\x35\xc6\xa3\x53\x8a\x9f\x10\xad\x2f\xd6\x7f\x1f\xb6\xf0\x16\x47\xe3\x57\x91\xbf\xa3\xc1\xfa\x7b\xf1\x84\x39\x4f\xa4\xf7\x54\x9a\x78\x3f\x66\xe3\xfe\x94\x0d\x57\x70\x7e\xcc\x8e\x9a\xbc\x9f\x0d\x18\x1c\x8e\xc2\xba\x78\x29\x1d\x84\xb6\x84\x7f\x0e\xfb\x8e\x9c\x10\x8d\x8a\xae\xe6\x83\x3b\xb0\x7b\xb2\x21\x4d\x53\x10\xa6\xa9\x16\xe8\xc4\x39\xc9\xa9\x88\xc9\xdf\xcb\xfb\x3d\xf7\x0e\xe0\xe4\x38\xbe\xac\xae\x4f\xc1\xf7\x27\x01\xe4\xc1\x58\x06\x09\x2f\x19\xaf\xe8\x16\x14\x52\x7b\xfc\x3f\x97\xc1\x0b\x55\xb8\x6f\xb3\xf6\x28\x0c\x37\x0c\xb5\xc7\x4b\xc2\x79\x76\x64\xca\xb3\xc2\xf5\xab\xf8\xdc\x06\x5d\x59\xc5\x15\xe7\x79\x27\x13\xbb\x06\x7f\xbd\xfc\x88\xe5\x0e\x25\xa3\x3a\x73\xfd\xec\x0a\x3b\x78\xbd\xe2\xd1\x1e\xb8\x03\xdd\xde\xcc\xa7\xdd\xdf\x89\xec\xdf\x00\x00\x00\xff\xff\x31\x67\xa3\x32\x5c\x0c\x00\x00")

func stubHtmlEditStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlEditStub,
		"stub/html/edit.stub",
	)
}

func stubHtmlEditStub() (*asset, error) {
	bytes, err := stubHtmlEditStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/edit.stub", size: 3164, mode: os.FileMode(420), modTime: time.Unix(1587965237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlListStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x8f\xdb\xb8\x15\xbf\xe7\x53\xbc\x70\x0b\xc8\x83\xf8\x5f\x82\x4d\x50\x68\x2c\x67\xdb\xcd\x16\xbd\x34\x58\x34\xe9\x5e\x06\x81\xc1\x91\x9e\x6c\x26\xb4\xa8\x92\xb4\x3d\xb3\x86\xef\x7b\xeb\xad\x40\x7b\xea\xa1\x9f\xa1\xa7\x7e\x9d\x2d\xd0\x53\xbf\x42\xf1\x28\x59\x96\x2d\xca\xd6\x0c\x8a\xb6\x8b\xe8\x30\x91\x45\xf2\xf1\xf7\xfe\xfd\xde\x23\x33\xb1\xb8\xcc\x25\xb7\x38\x7d\x02\x00\x30\x49\xc4\x1a\x62\xc9\x8d\x89\x98\xe4\xf7\x6a\x65\x59\x31\xe0\x06\xc5\xe0\x56\x23\x4f\x62\xbd\x5a\xde\x42\x68\xec\xbd\xc4\x88\x6d\x97\x5c\xcf\x45\x16\x42\xf0\xe2\xcb\xfc\x0e\xe8\x4f\xb0\xab\xad\x6a\xac\x1c\x08\x8b\xcb\xe9\x64\x62\xf9\xad\xc4\x59\xc6\x97\x38\x9d\x4e\x46\xcd\x19\x97\x24\x48\x61\xec\xd9\x75\xc7\x83\x47\x7a\xc4\x2a\xb3\x98\xd9\x83\x12\x39\x4f\x12\x91\xcd\x4b\x2d\x82\x3e\x2c\x45\xf6\x6b\x14\xf3\x85\xa5\x4f\x3f\x1f\xbb\x6f\xb7\x3c\xfe\x34\xd7\x6a\x95\x25\x21\x04\x5f\xa4\x69\xea\x53\x54\xab\x8d\xcf\x36\xe3\xfc\x0e\xc6\x10\xec\x18\xd8\xfb\x1c\x23\x96\x4a\xbc\x63\xf0\x71\x65\xac\x48\xef\x23\x26\x31\xb5\x27\xb2\x2a\xa8\xb2\x09\x33\x78\xee\xe4\x05\x7d\x8b\x77\xf6\x17\x52\xcc\xb3\x30\xd0\x84\x96\x36\x30\x39\xcf\xa2\xe0\x55\x00\xeb\x41\xaa\x74\xc4\xd6\x5c\xae\x10\x44\x06\x06\xb9\x8e\x17\xb3\x54\xa0\x4c\x8c\x67\x37\x7a\xb6\x5b\x37\x7d\xb7\xfb\xd7\xdf\xff\xec\x9d\x30\x11\x03\x91\xe5\x2b\x0b\xeb\xc1\x52\x25\x28\x23\x26\xb2\x54\xdd\xb8\x55\x1f\x18\xe4\x92\xc7\xb8\x50\x32\x41\x1d\x31\x06\x25\xf0\x8d\x48\xec\x22\x84\x17\xe3\x71\x7e\xc7\x9c\xb7\x9d\x0c\x8f\xc2\x23\xa7\xf1\x89\x55\x47\xce\xac\x3e\x53\xb7\x9a\xcc\x19\x81\x3d\x7f\xc1\xc0\xaf\x27\x05\xd4\xca\x5a\x95\x95\xfe\x48\x30\xe5\x2b\x69\x19\x7c\x15\x4b\x11\x7f\x22\xad\xd6\xea\x13\xfe\x92\xdb\x78\xf1\x06\x25\x5a\x64\x53\xf7\x03\x8a\x5f\x2e\xb8\x9c\x80\x8e\x4a\x78\xb1\x55\x8e\xf5\xf8\xb1\x1b\x6e\x32\xfe\x29\xe8\x77\xce\xcf\x6c\x5a\xfc\x7b\x0e\xe9\x03\x2c\xf1\xb5\x46\x4e\x46\x78\x8b\x9b\x07\xeb\xee\x77\xe0\xad\x6e\x78\xd4\x71\x02\x84\xb1\x92\xab\x65\x66\x22\x16\x2b\x39\xa3\x3c\x67\x10\x26\xdc\xf2\x88\x2d\xb9\xc8\x66\xf4\xca\x00\xbe\x52\xd9\xc0\xa0\xc4\xd8\x0a\x95\x0d\xe2\x05\xcf\xe6\x18\xb1\x82\x56\xaa\xef\xb3\xe2\xbb\x2f\xb7\xf6\xd4\x07\x46\x2a\x3b\x30\xb1\x22\xed\xb7\x5a\x6d\x28\x87\xa4\xb2\x64\x0a\xcb\x85\x9c\x15\xba\x3e\xc8\x21\x46\x7c\x8f\x11\x33\x4b\x2e\xe5\xa9\x21\xbf\x13\xb8\xe9\x69\xb5\xb9\x62\x53\x7a\x7d\xa8\x7b\x2e\xca\x7f\xe3\x40\x97\x3b\x14\x3f\xfe\xe3\x7b\x7c\x93\x08\x5b\xee\x40\xaf\x8f\x0a\x31\x7b\x41\x0b\xca\xb2\x4a\x8b\xcb\x29\x77\x5c\xc8\xea\x91\xe7\x22\xa2\x11\x6a\x39\x9f\x63\x99\x7f\xe6\xc0\xd4\x8e\xa8\x89\x44\x43\xab\x2c\x97\x11\xa3\x69\xef\xe9\x95\x41\x48\xef\x83\x02\x33\xbd\xbe\x13\xdf\x23\x03\xb3\x50\x9b\x01\x4a\x5c\x73\xab\x74\xf1\xcb\x2d\x2d\xe2\x73\x1f\x95\x65\x0e\xb9\x5f\xdf\xf2\x39\x32\x70\x2c\x48\x62\x1a\xc8\x96\x2a\xe1\xf2\x40\xaf\x6b\x81\x9b\xdf\xd0\x27\x06\xa1\xe3\xd1\x88\xbd\x1c\x33\xb0\xc2\x12\x73\xe4\x1a\x69\x82\xbf\x76\x50\x2d\xf2\x96\x1b\x63\xb9\xb6\x0c\x38\x31\x4e\xc4\x96\x22\x49\x24\x32\x08\xe7\x2b\x6b\x89\xb7\x9f\xbf\x62\xfb\xe2\xd1\x73\xc4\xde\x07\xaa\xd3\x57\x54\x44\x2a\x38\x6f\x5c\x16\x9e\x96\xba\xe0\xa5\x2b\x4c\x67\xe8\xeb\xc0\x80\xaf\x2e\x10\xe0\x76\x4b\xbb\xee\x76\xad\x7c\xda\x90\xf8\xfc\x45\xcb\xbe\xe0\xad\x5c\x4e\xb7\xb3\xf5\x08\xce\xd2\xb9\x97\xd6\x46\xa5\x07\x2f\xf9\x35\x71\x41\x5d\x7a\xb6\xf4\x66\x82\xd2\xe7\xc9\xbc\xe4\xa3\x05\xf2\x04\x75\x55\x55\x63\x25\x95\x0e\xbf\x48\x5f\x8d\xaf\xc9\x7c\x03\xe7\xce\x30\xc6\xcc\xa2\x6e\xb7\xbf\x88\x0f\x79\xae\xcc\x80\x72\x5d\x2f\x79\xc1\xa1\x42\xc7\x72\x6f\x90\xb8\x35\x9b\xc9\xd6\x65\x4e\x42\xac\xb2\x54\x94\xeb\x27\x23\x37\xe2\xb1\x53\xee\xf9\x48\xad\x66\xa9\x48\x67\xf4\xf9\xb4\xdc\x0f\x0a\xeb\xbd\xf6\x8a\x2e\xa7\xbe\x5f\x20\xa8\x1c\xb5\xc3\x56\x2e\x00\x8d\xb1\xd2\x09\xa4\x5a\x2d\xc1\x2e\x10\xa8\x96\xdc\x72\x83\x7e\x8c\xa3\x44\xac\xdb\xa0\x3b\x8f\xa4\x4a\x9d\x35\x76\x6b\x06\x62\x96\x9c\x0f\xd5\x8e\x41\x0d\x17\xe8\x5b\x72\x4d\x6c\x23\x55\x36\xaf\x18\xb6\x16\x79\x10\x41\xca\xa5\xc1\xeb\xda\x37\x4a\x6c\x88\x60\xbb\x63\xd3\xaf\x79\x16\xe3\xc5\xf2\x01\xe7\x92\xc4\xab\xd2\x97\x0f\xd4\x08\xb5\x56\xfa\x44\xa5\x93\xf6\xa4\x88\x8b\xb2\x6c\x5c\x31\xe8\x50\x34\x3a\x61\xf7\x26\x39\xf8\x83\xa3\x96\xfb\x17\x92\xff\xf6\xd0\x57\xfe\x64\x19\xa0\xde\x0e\xff\x1f\xf3\x40\x6b\x25\x3b\xf5\x81\x2b\x68\xd3\xea\x00\xf4\x50\x6a\x31\x25\xb7\x98\xcf\x9b\x5c\x4e\xad\x5a\x31\x8c\xcf\xdc\x25\xcd\xfc\xf8\x87\x3f\xfe\xe3\x6f\x3f\xfc\x84\x68\xa6\x76\x2c\x74\x5c\xf3\xe3\x0f\x7f\xf9\xe7\x9f\xfe\xfa\xbf\xe2\x9a\x63\xd9\xee\x66\xa3\xbc\xce\x29\x96\xd5\x9b\xe3\x89\x89\xb5\xc8\x6d\xa9\x30\x25\xdc\xe8\x23\x5f\xf3\xe2\x6b\x69\xae\xa5\x4a\x56\x12\x87\x78\x97\x2b\x6d\x0d\xf9\xa8\xda\x82\x22\x3a\x84\x74\x95\xb9\xc3\x55\xef\xaa\x36\x44\x8f\x46\xbb\xd2\xd9\xc9\x47\x27\x72\x7f\x6e\x0b\xe1\xe6\x43\xbf\x31\x5c\x75\xd9\xe1\xd8\x3f\x48\xbd\xb6\x6f\xac\xea\x46\x43\x17\x64\x67\x26\x50\xb8\x85\xdb\x5d\x73\x46\xad\xf2\xb5\x09\x39\x29\x8e\x21\xf8\xe4\x9c\xc6\x77\x9b\x30\x5f\x1e\x84\x3e\xa3\xec\x0f\xbf\x21\xdc\xf8\xaf\x6a\xc8\x87\x61\x50\x1d\x75\x83\x7e\x71\xcd\xf2\x6a\xdc\x2f\x38\x34\x28\x48\x34\xf0\x80\xa5\x67\x32\xf9\x68\x9c\x4f\x66\xc5\x79\xdb\x6d\x36\x6d\xb9\x16\x72\xe5\x29\x0c\x0a\xd2\xc3\xa0\xef\x28\x2a\x0c\x8e\x4e\xc8\x41\x1f\xf6\x17\x3d\x2f\xc7\xbb\x86\x1c\x8f\x8a\x5a\xad\xac\x3b\x0f\x85\x76\x21\xcc\xd0\x9d\xc9\x5e\x1f\x5e\x43\x08\x82\xe6\x22\x62\x20\xaf\x27\x8f\xee\xb7\xda\xac\x56\x53\xfb\x68\xbe\x47\x71\x0f\xe0\x62\xee\xcc\x59\xbe\x19\xe5\xc7\xe2\x6b\x73\x3d\xc2\x8f\xed\x73\xf8\x55\xd3\x2b\xd7\x2a\x27\x3d\x02\x32\x46\x50\x43\xb3\x44\xbb\x50\xa4\xe2\x31\x04\x77\xd0\x7d\x73\x3e\x43\xe9\x59\x73\x5d\x24\x95\xd5\x10\x81\x33\x77\xe5\x08\x78\x0d\xc1\x6b\x1a\x8c\x82\x67\x27\x23\xe4\x8d\xeb\x27\x4d\x77\xa4\xbd\xa7\x6e\xe6\x1a\xb5\x48\xef\x7f\x45\x5a\xbf\xbf\xcf\xb1\x77\xe5\xdb\x1b\x2a\x96\xf0\x58\xa4\xf1\xc9\xc9\xe5\x77\x42\x19\xaf\xa0\x61\xae\x8c\xed\x05\x23\x9e\x8b\xd1\xf1\x85\xf2\x88\x62\x39\x78\x56\x6a\xd9\x77\x72\x28\x6e\xae\xfc\x72\xec\x02\xb3\x9e\x46\x93\xab\xcc\x60\x34\xf5\xc3\x2e\x95\xdd\x4f\x1b\x92\x93\x87\xb1\x4a\x10\x9e\x46\x11\xbc\x18\x8f\xdb\xf4\xdd\x3f\x5c\xa2\xb6\x27\xeb\x97\x66\xee\xc7\xb4\x7f\x5a\x8c\xb5\x7f\x9a\x69\xb6\x7f\x9c\xce\x15\xef\x42\x04\xc7\x1b\xbb\x3f\x64\x25\x3f\x39\x54\x12\x2a\x6a\xf6\x4b\xc8\xf9\x5c\x64\xae\x0d\x1a\xba\x6b\x8f\x59\xb6\x5a\x9a\x0e\x22\x89\xd0\x2f\x4a\xa4\x89\x33\xaa\xc6\x5e\x79\xbb\x63\xc3\x9d\x10\xc2\xe9\x8d\x4b\x2d\x27\x48\xac\xcf\x57\x0e\xdc\xcf\x5c\xc0\xeb\x61\xbe\x32\x8b\xde\xf6\xf7\x2b\xd4\xf7\xe1\x96\x56\xb8\xeb\x9f\x5d\x97\x4d\x8b\x7b\xd7\x0b\x49\x78\x92\x5c\x11\x3c\xbf\xf6\xcf\xa9\xb2\xba\x77\x75\x7d\x79\xef\xe2\xc2\xaf\xb6\xb7\x56\x1b\xdf\xf6\xa3\x11\xb5\xec\x46\x49\x74\x79\xd1\xab\xe9\xde\x8c\x47\x8f\x61\x72\x6e\x17\x61\x70\x9a\x75\x45\x39\x08\xfa\xa5\xd9\x44\x12\x6a\xb5\x19\x8a\xa4\x93\xd9\xbe\x49\x84\xbd\x0c\xbc\x33\x16\x4c\x84\x7d\x24\x92\xe2\xae\xbb\x8b\x03\xbb\x00\x89\x9d\xb4\xa0\xcb\xc6\x45\x5b\xd0\xc9\x7b\xae\xf7\xf3\x83\xaa\xb5\x2b\x91\xd5\xab\x66\xf6\x9c\xce\x2a\x5b\x71\xad\x36\x9e\x26\xa4\x16\x24\x84\xa6\x83\xf5\xea\x47\xf1\x2e\x46\x7c\x14\xc1\x17\xf0\x83\x3e\xb9\xd6\xa7\x0f\xf9\xfa\x73\x63\x7b\xcf\xc5\x4e\xe7\x05\xd5\x71\xec\xfc\x8a\x1a\x1b\x3d\x9a\x94\xbf\x13\xb8\x09\x3b\xe5\x79\xd5\xbd\x53\x9f\xd2\x1a\xc9\x47\x3d\xbe\x27\x8e\xbd\x20\x6a\x47\xb8\x0b\x31\x2a\xd2\x82\x1d\x7d\x8d\xfb\x50\x62\x36\xb7\x0b\x88\x22\x68\x0d\x88\x22\x10\x82\x6f\x25\x72\x83\x50\xb4\xeb\x20\x2c\x2e\x0d\xa4\x42\x1b\xfb\x34\xb8\x6a\x52\x3f\x54\xc1\xd0\x1c\x6b\xba\xc8\x8b\xaf\x99\xfb\xe7\xd2\xb5\xbb\x3d\x1e\x9f\xb3\x0e\xe1\x6c\x9f\xb9\xad\x46\xfd\xdc\xd2\xb6\xed\xca\xe4\x61\xab\xfe\x2b\x09\xec\xff\xdf\x55\xca\x61\xd3\x1a\x2a\x2d\x40\x6f\x3e\x34\xfb\xfd\x54\x69\xe8\xd1\xf1\x44\x80\xc8\xa0\x4d\xea\x59\xc9\x45\x29\xa6\xa5\x37\xe2\xc3\x50\x24\x4d\x2d\x77\xe7\x14\x3c\x39\xc4\x1c\x52\x01\xbc\xb9\x90\x2a\xed\xf0\x52\x80\x13\xe4\xc3\x41\xa3\x05\xf7\x9e\x4c\x6a\x87\xc3\x1b\x5a\xfc\x01\xa2\x28\x02\x96\xad\x96\xb7\xa8\xd9\xb9\x20\x15\x69\x4f\x98\xb7\xfc\x6d\xaf\xda\xab\x10\xd0\x7a\xdc\xda\x3f\x45\x64\xd3\xdc\x67\x0c\x84\x81\x4c\x59\xe0\xb0\xdf\xb1\x43\x7c\x5f\x88\xca\x0b\x81\x77\x40\x0a\x11\xbc\x75\xbb\x36\x54\xf0\x47\x24\x4a\x83\x97\x0c\x67\xac\x16\xd9\xfc\xac\xe1\x9a\x28\xde\xb9\x45\x1d\x51\x74\xa0\xe1\xd2\x4c\xc4\xbb\xd7\x97\x8f\xf7\x45\x5f\x98\x9c\x61\xdb\xf6\xfe\xbf\x26\xe6\x16\x53\xa5\xf1\xb7\xd4\x87\xfe\x2e\x4f\x8e\xfb\x56\xab\xfa\xc5\x6d\x74\x3f\xc3\x3b\xeb\x15\x5f\x3f\x82\x58\x35\x74\xfd\xb2\x3b\x78\x75\x44\x42\x0f\x09\xaf\xd1\x49\xa1\xed\xee\xc9\x64\x54\x5c\x2b\x4e\x9f\xfc\x3b\x00\x00\xff\xff\x4b\xc7\x1a\x32\x67\x26\x00\x00")

func stubHtmlListStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlListStub,
		"stub/html/list.stub",
	)
}

func stubHtmlListStub() (*asset, error) {
	bytes, err := stubHtmlListStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/list.stub", size: 9831, mode: os.FileMode(420), modTime: time.Unix(1587969518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubLayoutDefaultStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5d\x6f\xac\x36\x10\x7d\xcf\xaf\x98\xba\x95\x48\xaa\xb0\x6c\xd2\xfb\xe4\x02\xd2\x95\xfa\xda\xaa\xaa\xfa\x16\x45\x57\x5e\x6c\xc0\x8a\xb1\x91\x6d\x48\xd2\xd5\xfe\xf7\xca\x86\xdd\xe5\x73\x77\xc3\x43\xb4\x8c\x67\xce\x8c\xcf\x1c\x8f\x49\x6c\xec\xa7\x60\x60\x32\x55\x33\x9a\xde\x01\x00\x6c\x04\xf9\x54\x8d\x0d\x25\x69\x61\xef\x2d\xee\x79\xe7\xd4\x96\x18\xbe\x3d\x6f\xeb\x8f\xdf\x4f\xd6\x8a\xe8\x82\x4b\x0c\x5b\x20\x8d\x55\x53\x7b\xa8\x79\x51\x5a\x0c\xe3\x98\x4c\x09\xa5\x31\xbc\x97\xdc\xb2\xce\x7a\xb8\x1b\x25\x16\xaa\x50\x83\xcc\x3b\xa5\x29\xd3\xa1\x26\x94\x37\x06\xc3\x6f\x43\xac\x5c\x28\x62\x31\x08\x96\xdb\x23\x54\x1c\xf9\x2d\xa5\x77\xb1\x65\x55\x2d\x88\x65\xdd\xb6\x62\xca\xdb\xf4\x14\x18\xf3\xb0\xcb\x76\x36\xf5\xe6\x92\x11\xca\x34\x60\x8f\x92\xa0\xfd\x8e\x64\x6f\x85\x56\x8d\xa4\x38\xf8\x79\xbb\xdd\x06\x07\x34\x8e\xe9\xe3\x2a\x26\x1b\xa8\x14\x65\x09\x2a\x95\xe6\xff\x29\x69\x89\x40\x60\x4b\x56\xb1\x04\x51\xa2\xdf\x10\x90\xcc\xf2\x96\x85\x92\x38\xd3\x13\xba\x98\x04\xe6\x59\x7c\xa6\xf2\x19\x32\x41\x8c\x49\xd0\x80\x2e\x04\x3d\x52\x47\x6e\xc7\x2d\x4a\xff\xe5\x56\xb0\x38\x2a\x9f\x57\xb0\x28\x6f\x27\x60\x92\xb4\x0b\xdb\xf3\xce\xd1\x88\xc0\xb3\xb9\xdb\xfa\x84\xc7\xe8\x48\xe4\x8c\xdf\x25\xda\xfb\x25\xc3\x1d\xf3\x25\xa7\x2c\xb4\x9a\x17\xc5\xb0\x0d\x50\xb2\x4e\x4c\xc1\xd3\x76\xdb\x96\xc1\xe3\x88\xb2\x3c\xcf\x17\xfb\x32\xec\x4d\xdf\x09\xe1\x60\x50\xa7\xe7\x04\x39\xd9\x22\xc0\xa3\xc6\x14\xcc\x7e\xf7\xef\x7f\x91\x8a\x21\xc0\xaa\x66\xd2\x2f\x99\x04\xbd\x04\x4f\xc1\xeb\x4a\x22\x9f\xec\x28\x3a\x68\xc3\x5c\xe9\x04\x71\xcb\x2a\xe0\x12\x5c\x09\x6b\x3d\x9d\x54\x1a\xfa\x98\x36\xe4\x79\x82\xec\x67\xcd\x54\x7e\xef\x2c\x1b\xd3\xec\x7e\xb8\xf5\x07\x48\x12\x08\x1a\x49\x59\xce\x25\xa3\x01\x02\xdc\x15\xee\xbd\xdc\xcf\x0b\x05\x0e\x72\xf1\x4c\x49\xc0\x2e\x43\x1f\xea\x0c\x28\x75\xbd\x73\xbf\x6e\xc0\xd0\xaa\xb1\x4c\x87\x82\xcb\x37\xc0\x56\x79\xea\xfe\x71\xb6\xbf\x89\x2d\xef\x4f\xe5\x3c\x20\xb0\xa4\x48\x90\xa9\x89\x44\xe9\x7e\xef\x17\xac\xd3\xe6\xe1\x10\x47\x03\x90\x2b\xf4\x44\x03\x7e\xae\x32\x69\x9a\x9d\x6f\xfb\x25\x1e\x7f\x9a\xf0\x78\x3c\x98\x37\x6c\xfd\xd4\x67\x23\x94\x4d\x90\xdf\xcd\x0d\x71\x70\x1b\xf5\x63\x8e\xae\x57\x13\x8d\x67\xdd\x95\xec\x43\x91\x79\x91\x9a\x66\xe7\x34\x3a\x62\xe7\xa4\x2a\xd3\xec\x6e\x15\x15\x5c\x17\xc5\x11\x6d\xaa\x09\x67\xff\xba\x24\xe0\x8b\xb2\x88\x4e\xba\xb8\x70\x84\xaf\x90\xb9\x3c\xf1\x4e\xf0\x7c\x36\xf4\x60\x38\xf8\xce\x13\xad\x26\x94\x72\x59\x60\x08\xb6\xf0\xfc\xad\xfe\xf0\x7f\xd6\xa7\x58\xcf\x49\xcb\xd9\x7b\x7a\x62\xc8\xbf\x2d\xd6\xb1\x78\xbb\x2d\xd8\xa7\xb6\x7e\xcc\x0f\x49\x88\x4d\xa6\x79\x6d\xd3\xee\x96\xae\x14\x6d\x04\xdb\xb0\x8f\x5a\x69\x6b\x20\x19\xdc\xd4\x94\x58\x82\x21\x6f\x64\x66\xb9\x92\x70\xff\x30\x58\x73\x8f\x66\xb6\xd1\x72\x62\x74\x4f\x14\x41\xa6\x64\xce\x0b\x28\x84\xda\x11\xe1\xa7\x25\x08\x6e\xec\xcc\xd5\xad\xe0\x97\x39\x84\x7b\xdc\xd1\xc1\x10\x70\x65\xc2\x9a\xa9\x5a\xb0\xe0\x71\xd1\xcf\xeb\x0c\x43\xf0\x27\x93\xcd\x8a\xcb\xf1\x14\xe0\x97\x55\x9d\x44\x11\x84\x61\x18\x3a\x10\x13\x7e\xa7\xd4\xbd\x84\x97\xbc\xff\x50\x20\x95\x75\x04\xf2\xfc\xd3\x5d\x47\xee\x95\x19\x08\xe6\x30\xc1\x22\xce\xeb\xcc\x7a\x78\x7d\xbc\xbb\xce\xa6\x17\x8b\x99\xf9\x75\x66\x0c\x2b\x6c\xd6\xc4\x7d\xf0\x05\xbf\xae\x30\xa4\x19\xe5\x9a\x65\x16\xc3\xde\x9d\x67\x0c\x41\x1c\x53\x96\x93\x46\xd8\x1f\x1e\x39\x4d\x83\xf9\xe4\x3a\xcc\xc1\x7a\x1e\xfd\x88\xb8\x40\xe4\x35\x02\x27\xf1\x73\x06\xc7\xec\x9d\x4b\x1b\x94\x94\xa9\xaa\x6e\x2c\xa3\x78\xa2\xd1\xd1\x17\xc1\x59\xe1\x33\x81\x9f\xb9\xf1\x42\xb7\x25\x37\x9b\x5f\x3c\x19\x7e\xe6\xcd\xd9\x58\x2a\xa2\x62\xb6\x54\xd4\x2c\xd4\x70\x9a\xa2\x83\x12\xfc\x2c\x5d\x28\xa3\x25\xba\x6f\x30\x24\x5d\x21\x2b\x2a\xc8\x95\x86\x7b\xe7\xcd\xdd\x15\xd0\x39\xad\xed\x8b\xe7\x3e\x9f\xfb\xfe\xe8\x1c\x5f\xf8\xeb\x66\xad\x82\x09\x19\xe7\x00\x27\xac\x45\xef\x05\xb9\xcc\x45\xdb\xa1\x05\xc1\x5a\x37\xcf\xff\x06\xf4\x53\xeb\xff\x00\x00\x00\xff\xff\x9f\x18\x62\x8e\xe3\x0c\x00\x00")

func stubLayoutDefaultStubBytes() ([]byte, error) {
	return bindataRead(
		_stubLayoutDefaultStub,
		"stub/layout/default.stub",
	)
}

func stubLayoutDefaultStub() (*asset, error) {
	bytes, err := stubLayoutDefaultStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/layout/default.stub", size: 3299, mode: os.FileMode(420), modTime: time.Unix(1587735805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubMainStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x41\xca\xc3\x20\x14\x04\xe0\xf5\x9b\x53\xbc\xff\xc1\x0f\x0a\x25\x07\x28\x49\x76\xed\x01\x7a\x81\x22\xc1\x88\xd4\x3c\x83\x24\xdd\x88\x77\x2f\xb6\xcb\xf9\x66\x66\x77\xcb\xcb\x05\xcf\x9b\x8b\x0a\xc4\x6d\xcf\xe5\x60\x03\x92\x71\xfc\x85\xe7\x92\x8b\x9f\x67\x01\x49\xca\x41\x60\x81\xf5\xd4\xe5\x7b\x30\x96\x2b\x40\x9e\xaf\x13\xf7\xd9\x70\xd3\x10\xd5\xd7\xd6\xb1\x94\xce\x7e\x78\x9c\x6a\x2c\x28\xae\xdc\xe9\x6f\x62\x8d\x89\x2b\x88\x52\x0e\xc3\xdd\x1d\x2e\xad\x46\xfe\xdf\x72\xe9\xbd\x05\x35\x34\x7c\x02\x00\x00\xff\xff\x64\x63\xff\x1f\x96\x00\x00\x00")

func stubMainStubBytes() ([]byte, error) {
	return bindataRead(
		_stubMainStub,
		"stub/main.stub",
	)
}

func stubMainStub() (*asset, error) {
	bytes, err := stubMainStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/main.stub", size: 150, mode: os.FileMode(420), modTime: time.Unix(1587732993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubModelModelStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stubModelModelStubBytes() ([]byte, error) {
	return bindataRead(
		_stubModelModelStub,
		"stub/model/model.stub",
	)
}

func stubModelModelStub() (*asset, error) {
	bytes, err := stubModelModelStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/model/model.stub", size: 0, mode: os.FileMode(420), modTime: time.Unix(1587716320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubRouteRouteStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xd1\x53\x10\x3e\xd9\x85\x13\xbd\xc3\x10\x14\xeb\x6d\x48\x80\xed\xd8\x28\x12\x6d\x73\xb5\x25\x8f\xa2\x96\x64\xc3\xde\x7d\x90\xec\x0d\x4d\x31\xec\xd0\x8b\x21\xf2\x27\xf9\xd1\xbf\xa4\x35\x1c\x2f\x81\x1d\x5c\x68\x1c\xc1\x0e\x68\x5f\x80\x3a\xe0\x90\x04\xa1\xa3\x11\x81\x22\x58\x46\x23\xe8\xda\xac\xe0\x95\x62\x39\xbf\x6a\x9b\x82\xa3\xee\x06\x24\x4a\x6b\x78\xea\xe0\x16\x12\x5c\x8c\x17\x90\x00\x8c\x6b\x37\xc8\x80\xcb\xdc\x36\xeb\x71\x08\x69\x74\xe0\x70\x44\xc1\xa2\x65\x5a\x6b\x7c\x29\xf4\x90\x22\xae\x88\x1e\x3d\xb2\x11\x04\xd3\x1b\xf2\x2d\x04\x2e\x00\x6b\x3c\xd8\x30\xdf\xa0\xe3\x30\x95\x01\xa7\x28\xe9\xac\x0b\x62\xf9\xee\x72\xe2\x54\x06\x2b\x95\x77\xdb\x07\xf0\x41\xfe\xec\x9b\x7b\x7c\x10\x8c\x70\xda\x6e\xb7\xdb\x43\x6e\xd9\x9e\xb1\x27\x9f\xc3\x53\x06\xbd\x12\xd0\xbb\xfb\xf4\xd3\x34\x07\x96\x92\x53\x6a\x36\xf6\xc5\xf4\xeb\x0f\x2a\x45\x45\x83\x5a\x6d\x2a\x8f\xa2\x07\x91\xb9\x52\x6a\x53\xf5\x24\x43\x3a\xef\x6c\x98\xf4\x57\xf2\x3f\x86\xa4\xfb\xc0\x53\xa5\x36\x5a\xc3\xfd\x4c\xd5\x28\xd5\x25\x6f\xe1\x80\x7d\x76\x9c\x6b\x77\x86\x87\x5c\xbd\xdb\x7f\x68\x19\xbd\x43\x86\x5c\x50\x5f\x98\x04\x19\x32\x63\x77\xc0\x38\x07\x1f\xf1\x4b\xc9\xb5\xc0\xf8\x2d\x61\x14\x78\x58\xd5\x12\x35\x0d\xfc\x2c\xc4\xa3\x18\x21\xbb\xf8\xb3\x29\x15\x1f\x8d\x77\x23\xd6\x95\xee\xc3\x73\xcc\xee\x3f\xcf\xe9\x3c\x92\xd5\x55\xbb\x00\x8e\xc2\x34\x7f\x62\xec\xe8\xfa\x9f\xaa\x47\x1a\xf1\x88\xfc\x1d\xb9\x2e\xf1\x9e\xb8\xae\x18\x63\x48\x6c\x51\x3b\x8a\x52\x35\x4d\xd3\xa8\xb2\xc5\x1e\x3b\x93\x46\x01\xf2\x0e\xaf\xbb\x41\xa6\xf1\xed\x32\xff\x86\xbf\x0b\x76\x58\x8c\xfb\x9c\x10\x32\x09\x6c\x98\xe6\xe0\xd1\xcb\x1d\xf3\x31\xfb\x5a\xe9\xc5\xe5\x2a\xdb\x98\x0f\x8d\x52\x0a\x00\x60\xbd\xab\x37\xef\x45\xfd\xbd\xc4\xbb\xf7\xa2\x7e\xa9\xdf\x01\x00\x00\xff\xff\xf0\xab\x23\x7f\x64\x03\x00\x00")

func stubRouteRouteStubBytes() ([]byte, error) {
	return bindataRead(
		_stubRouteRouteStub,
		"stub/route/route.stub",
	)
}

func stubRouteRouteStub() (*asset, error) {
	bytes, err := stubRouteRouteStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/route/route.stub", size: 868, mode: os.FileMode(420), modTime: time.Unix(1587879113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stub/controller/controller.stub":  stubControllerControllerStub,
	"stub/core/core.stub":              stubCoreCoreStub,
	"stub/core/response/response.stub": stubCoreResponseResponseStub,
	"stub/html/create.stub":            stubHtmlCreateStub,
	"stub/html/detail.stub":            stubHtmlDetailStub,
	"stub/html/edit.stub":              stubHtmlEditStub,
	"stub/html/list.stub":              stubHtmlListStub,
	"stub/layout/default.stub":         stubLayoutDefaultStub,
	"stub/main.stub":                   stubMainStub,
	"stub/model/model.stub":            stubModelModelStub,
	"stub/route/route.stub":            stubRouteRouteStub,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stub": &bintree{nil, map[string]*bintree{
		"controller": &bintree{nil, map[string]*bintree{
			"controller.stub": &bintree{stubControllerControllerStub, map[string]*bintree{}},
		}},
		"core": &bintree{nil, map[string]*bintree{
			"core.stub": &bintree{stubCoreCoreStub, map[string]*bintree{}},
			"response": &bintree{nil, map[string]*bintree{
				"response.stub": &bintree{stubCoreResponseResponseStub, map[string]*bintree{}},
			}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"create.stub": &bintree{stubHtmlCreateStub, map[string]*bintree{}},
			"detail.stub": &bintree{stubHtmlDetailStub, map[string]*bintree{}},
			"edit.stub":   &bintree{stubHtmlEditStub, map[string]*bintree{}},
			"list.stub":   &bintree{stubHtmlListStub, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"default.stub": &bintree{stubLayoutDefaultStub, map[string]*bintree{}},
		}},
		"main.stub": &bintree{stubMainStub, map[string]*bintree{}},
		"model": &bintree{nil, map[string]*bintree{
			"model.stub": &bintree{stubModelModelStub, map[string]*bintree{}},
		}},
		"route": &bintree{nil, map[string]*bintree{
			"route.stub": &bintree{stubRouteRouteStub, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
