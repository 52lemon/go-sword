// Code generated for package stub by go-bindata DO NOT EDIT. (@generated)
// sources:
// stub/controller/controller.stub
// stub/core/core.stub
// stub/html/create.stub
// stub/html/detail.stub
// stub/html/edit.stub
// stub/html/list.stub
// stub/layout/default.stub
// stub/main.stub
// stub/model/model.stub
// stub/route/route.stub
package stub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stubControllerControllerStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xc1\x4e\xdc\x30\x10\x86\xcf\xf6\x53\xb8\x96\x8a\x12\xb4\x75\xee\x51\x88\x54\x48\x91\x50\x8b\x5a\x81\xaa\x1e\x10\x5a\x39\xb1\xc9\x1a\x1c\x3b\xd8\x0e\x88\xa2\x7d\xf7\x6a\xec\x50\x5a\x95\x13\x5b\x2a\x10\xbd\xec\x26\xe3\x99\xff\x5f\xcf\x7c\x9b\x78\xe4\xdd\x05\xef\x25\xa9\xaa\xf9\x6a\x69\xf8\x20\xeb\x1a\x63\x35\x8c\xd6\x05\x92\x61\x44\xa5\xe9\xac\x50\xa6\x2f\xce\xbd\x35\x14\x23\x5a\x55\x69\x75\x39\x58\x21\x75\x5d\x43\xac\xb7\xef\xfc\xb5\x75\xa2\x70\xd2\x8f\xd6\x78\x09\x41\x65\x0b\x65\xa7\xa0\x34\xdc\x68\xdb\xc3\x97\x91\xa1\x58\x85\x30\x52\x0c\x55\x2a\xac\xa6\x96\x75\x76\x28\xce\x95\xf9\xbe\x9a\x8a\xde\xba\x81\xe2\x1c\xe3\xb3\xc9\x74\xe4\x93\xf2\x21\x13\x2d\xd9\x86\x30\x6b\x76\x73\x02\xe1\xec\xda\xa9\x20\x1d\x01\x19\x76\x34\xfb\x7d\x8b\xb1\x05\x71\xf2\x72\x92\x3e\x90\xed\x79\x35\xde\xe5\xe4\x16\x23\x27\xc3\xe4\xcc\x26\x0a\xc8\x5f\x6a\x4f\xca\x1d\x72\x72\x5a\x55\x71\xf3\x4b\x1f\xdc\xd4\x85\xba\xbe\x5d\x63\x84\x44\xcb\xf6\x95\x11\xd9\x16\xe4\xe5\x18\x23\xf0\x84\xfc\xbb\xa6\xb0\x23\x19\x40\x07\xed\x59\x21\xcb\x64\x7f\x1c\x78\x98\xfc\xe7\x8f\x0b\x88\x37\x3c\xf0\xf2\x3e\x1d\xf6\x1f\xf3\x11\x5c\x95\x24\x0a\xc7\xc4\x35\x7c\xae\xc1\x42\x2c\x88\x74\x0e\x5c\x60\x3e\xec\x90\x3b\xbf\xe2\x3a\xdb\x72\x32\xe4\x18\x21\x75\x16\x97\xdf\xec\x10\xa3\x74\xdc\x04\xd2\xb6\x67\x5f\x9c\x32\xe1\x2c\xa3\x6f\xaf\x68\xac\x87\xd4\xb9\x43\x77\xc2\xcb\x24\xbc\x43\x52\xb3\x58\xec\x4f\x26\x36\x10\x45\x6b\xbc\x9e\x27\xdb\x48\x2d\x41\xed\xb9\xcc\x16\x23\xd4\x5a\x71\xf3\xb3\x97\x89\x5b\x76\x24\xb9\x78\xaf\x75\x36\xd7\xb1\x5d\x2b\x6e\x36\xeb\xaa\xe0\x81\x83\xc1\xc0\x2f\x64\x36\xf0\xf1\xc4\x07\xa7\x4c\x7f\xaa\x4c\x1c\x57\xea\x78\x9c\xe4\x57\x33\xcc\xb3\x4c\xbf\x6c\x0b\x4a\x37\x33\xf7\x97\x1a\xbc\xff\x80\x17\x32\x0f\x9a\x92\x80\xc3\x09\x55\x82\x9e\xde\xe3\xd5\xb2\x79\x56\x00\xdf\xa3\xa0\x3e\xf4\x7d\x49\x08\xf5\x53\xd7\x49\xef\xe9\x0b\x27\x77\xcf\x49\xfe\x9c\xc8\xfd\xd7\xe0\x3e\xf8\xe4\x7b\x5a\x6c\x45\xcb\xe6\xae\xcf\x62\xaf\x1e\xc2\x0f\x42\x3d\xab\x17\xe3\x6b\x40\x70\x5f\x39\x1f\x12\x81\x8b\xf8\xa4\x64\x07\x4d\x9e\x96\x8e\xf9\xd5\x5f\x66\x73\x3e\x09\x24\xb7\x97\xcd\x6a\x23\x03\x57\xfa\xf5\xd1\xfa\x5b\x9a\xa7\x0b\xd2\x46\x49\x8c\xd0\xc8\x1d\x1f\xfc\x23\x4f\x01\xa9\xf8\xc9\xfe\x48\x0f\xb0\x9e\x1c\xd3\xb9\xe0\x3f\xdf\xbf\xf0\xfd\x23\x00\x00\xff\xff\x1f\x01\xa6\x3d\x3f\x0d\x00\x00")

func stubControllerControllerStubBytes() ([]byte, error) {
	return bindataRead(
		_stubControllerControllerStub,
		"stub/controller/controller.stub",
	)
}

func stubControllerControllerStub() (*asset, error) {
	bytes, err := stubControllerControllerStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/controller/controller.stub", size: 3391, mode: os.FileMode(420), modTime: time.Unix(1587718465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubCoreCoreStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x6b\x14\x4b\x10\xc7\xcf\xd3\x7f\x45\xbd\x86\x17\x66\x92\xcd\xcc\x7b\x79\x3f\x08\x4b\x26\xef\x45\x92\x9c\x02\x86\x35\xe8\x41\x24\xcc\xce\x54\x66\x5b\x67\xba\x27\x3d\x3d\x1b\x56\xc9\x45\x04\x15\x44\xbd\x44\x04\x41\x04\x0f\x9e\xd4\x9c\x44\x88\xfa\xd7\x64\x57\x6f\xfe\x0b\x52\xdd\xbb\x61\xc5\xc5\x1f\xa7\xdd\xee\xaa\xfa\xd6\xe7\x5b\xd5\xbb\x55\x92\x5e\x4b\x72\x84\x54\x69\x64\x4c\x94\x95\xd2\x06\x7c\xe6\x71\xa1\x22\xa1\x1a\x23\x0a\xce\x3c\x2e\xd1\x44\x3d\x63\x2a\xce\x98\xc7\x57\x56\x5c\xda\xae\x56\x8d\xc1\xd5\x55\xba\xdc\x05\x9e\x0b\xd3\x6b\xba\x61\xaa\xca\x28\x57\x8b\xf5\x7e\xb1\x98\x69\xd1\x47\x1d\x95\x83\x7a\xdf\xaa\x4c\x65\x5c\x15\xf2\x7a\xaf\x89\x72\xa5\x4b\xce\x02\xc6\xcc\xa0\x42\xd8\x90\xb9\x90\x08\xb5\xd1\x4d\x6a\xe0\x06\xf3\xd6\xbb\x30\x4f\x29\xe1\xfa\x39\x76\xc8\xd8\x5e\x23\x53\xf0\x11\xe6\x5d\x62\x00\x5b\x2a\xc9\xfc\x00\x7c\xd4\x1a\x50\x6b\xa5\x03\xaa\x8a\x22\x38\x5f\xa1\x84\xac\xcb\x3c\x0c\xd7\xbb\x2d\x8a\x41\x0c\x56\x89\x22\x3e\x77\x48\x2d\xe0\x5a\x29\xd3\xfe\x73\xe9\xaf\xbf\xff\xf9\xf7\xff\x28\x57\x49\x56\x0a\xf9\x5f\xda\x4b\x74\x8d\x26\x6e\xcc\xde\xf2\x5c\x45\xdf\x77\x44\x89\xf1\x8e\x6e\x70\xae\x50\x69\xbc\xa5\xd2\xa4\xe0\x01\xf3\xc4\x9e\x95\xfe\x2d\x06\x29\x0a\x6a\xed\x69\x34\x8d\x96\xcc\x3b\x64\x96\xa3\x83\xb9\xa8\x0d\x6a\xb0\xa3\x62\x9e\xfd\x08\x27\xb7\xbe\xa5\xa3\xb3\xcc\x50\x07\x8c\x8d\xcb\x49\x6d\xa6\xdf\x4e\x23\xbf\xb5\xeb\xcc\x61\xe8\x86\xf1\x23\x28\x97\x4d\xbb\x0c\xb7\x08\x42\xae\xc9\xec\x02\xea\x3e\xfa\xbc\xbd\xfc\xc7\xf2\x12\x6f\x51\x59\x30\x41\x21\x8c\x19\x1c\x16\xd8\x3f\xd0\x82\xbc\x59\xb1\x0e\xd6\x95\x92\x35\x5e\xb2\x77\x2d\xd0\xb8\xdf\x60\x6d\x60\x7e\x1c\xb5\x27\xe2\xb5\x73\xf9\xf4\xe2\xf9\xe8\xe9\xc3\xe1\x83\x9b\xa3\xa3\xe3\xcf\xef\xee\x8d\x1e\x3f\x1b\x1e\xdf\x1a\xde\x39\x1e\x3d\xba\x7d\x7a\xf2\xc6\x51\xb6\xe3\x89\x48\xb8\x4d\x3b\xd8\x54\xba\x9c\xed\xaf\x4a\xa4\x48\x69\x2a\xe1\x06\x4d\xc5\x0f\x02\xe7\xb5\x4a\x4c\x6f\x5a\x86\x14\x2e\x26\x45\x83\x3e\xa7\x10\x0f\x2c\x4c\xa1\xf2\x70\x5b\x0b\x69\x0a\xe9\xf3\xdf\xfb\xbc\x05\x14\x74\x8d\xac\x42\x1c\x03\xe7\x53\x8d\x78\xa1\x6a\x74\xa1\x2a\xd1\x49\xc9\x83\xb3\x7d\x9f\x9e\xdc\xef\x0b\x3c\xf8\xf8\xe4\xd5\xf0\xfd\xd1\xe9\xdb\x97\xc3\xd7\x27\xa3\xbb\x1f\x26\xae\xba\x2a\x1b\x10\x0f\x86\x1a\x93\x6c\x53\x14\xe8\x73\x4a\xe7\xb0\xe0\xe4\x16\x80\x87\x3d\x53\x16\x63\x32\xa0\x02\xf7\x7a\xdb\x31\x50\x66\xb8\x56\xd7\x68\xbe\x57\xb5\x3b\x79\xed\x6e\x39\xa1\xdd\x87\x4f\x42\x14\xfd\xd9\xd9\xcd\x7a\x7c\x67\xcc\xb6\x69\x6d\xb4\x90\x79\x00\x97\xaf\x74\x07\x06\x49\xea\x2b\x58\xf7\xd7\x11\x76\xa6\x6b\x7e\x69\x77\xe3\x5f\x02\x89\xb2\x43\xf6\x25\x00\x00\xff\xff\xf0\x08\xd0\x96\xa6\x04\x00\x00")

func stubCoreCoreStubBytes() ([]byte, error) {
	return bindataRead(
		_stubCoreCoreStub,
		"stub/core/core.stub",
	)
}

func stubCoreCoreStub() (*asset, error) {
	bytes, err := stubCoreCoreStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/core/core.stub", size: 1190, mode: os.FileMode(420), modTime: time.Unix(1587833853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlCreateStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x6f\xe2\x3c\x10\xbe\xf3\x2b\x2c\xbf\xaf\x14\x90\x80\xb4\xd5\xaa\x5a\x45\x24\xda\xdd\xd3\xee\x1e\xb6\x87\x1e\xab\xaa\x32\xf1\x24\x4c\x49\x6c\xcb\x1e\xa7\x20\xc4\x7f\x5f\x39\x61\x4b\xdb\x04\xa8\x0f\x23\x31\xcf\xcc\x33\xdf\x64\x41\x50\x9b\x4a\x10\x64\x23\xc6\x18\x5b\x48\x6c\x58\x5e\x09\xe7\x52\x5e\x89\xad\xf6\xc4\x3b\xa0\x05\x71\xb6\xb4\x20\x64\x6e\x7d\xbd\x64\x89\xa3\x6d\x05\x29\xdf\xd5\xc2\x96\xa8\x12\x16\xdd\x7c\x31\x1b\x16\x44\xb4\x7f\xe3\xd5\xf3\x9c\x21\x41\x9d\x79\x07\xd6\x2d\xe2\x3e\x70\xc9\x31\xb7\x20\x08\xce\x7a\xbe\x07\xdf\x15\x90\x6b\x45\xa0\xe8\x98\xbd\x11\x52\xa2\x2a\x0f\xe9\x47\x53\x56\xa3\xfa\x09\x58\xae\x28\xa8\xbe\x5e\xb5\xba\xa5\xc8\xd7\xa5\xd5\x5e\xc9\x84\x45\xff\x15\x45\x31\x54\xa1\xd5\x2f\x8c\xb6\x06\x52\x5e\x54\xb0\xe1\xec\xd9\x3b\xc2\x62\x9b\x72\x47\xc2\x12\x67\xa2\xc2\x52\xa5\xbc\x46\x29\x2b\xe0\x2c\x29\x3d\x11\xd8\x94\x5f\xdf\x72\xd6\xcc\x0a\x6d\x53\x3e\x6e\x44\xe5\x61\xaa\x44\x0d\x13\x86\x8a\xa1\x2a\x34\x67\xbd\x56\x47\x37\x57\x66\xc3\xae\x7a\x49\xbc\xd6\x58\x31\x67\x84\x4a\xf9\x0d\x3f\xfa\x12\x6c\xe8\x7b\x48\x21\x89\x6c\x28\x2f\x78\xef\x76\x21\xd4\x7e\x1f\x1a\x96\xeb\xea\x02\xdb\xed\x40\xb8\x83\x11\x2a\xe3\x89\x35\xb3\x5a\x4b\xa8\x52\x1e\xf2\x7e\x08\xd4\x8f\x3c\x0b\xdc\x2d\x3c\xc0\x3e\x14\x36\x28\xad\x7e\x19\x6a\xef\xc5\xfc\x98\x2e\x0a\x07\x74\xb9\xf0\x53\x75\x2c\x3d\x91\x56\x87\x31\x3a\x9f\xe7\xe0\x1c\x67\xdf\xf2\x0a\xf3\x75\xca\x4b\x7d\x2f\x1a\xe0\x59\x90\xed\x8e\xb5\xd6\x9f\x23\xeb\x46\x79\x64\xfa\x21\xf2\x35\xcf\x82\x3c\xc7\xf4\xb9\x0e\x75\x56\xed\x62\x1f\xce\x38\x96\xd8\x64\xa3\x45\x7c\xbc\xee\x85\xcb\x2d\x1a\x3a\x64\x13\x7a\x12\x3f\x8b\x46\x74\xda\x43\x43\x6a\x2d\x7d\x05\x73\xd8\x18\x6d\xc9\xb1\x94\xed\x5e\x43\x48\x41\x22\x61\x85\x57\x39\xa1\x56\xe3\xc9\x1b\x28\x3c\x0b\xe4\xad\xfa\xa0\x6c\x01\xed\x09\x7e\xc9\x84\xd1\x0a\xdd\x1c\xe5\xb4\x67\x11\x1a\x93\xf4\x1d\x5b\x48\x26\x51\xd4\xf7\x08\x2f\x2c\xd7\x49\x10\x6a\x81\xd5\x79\xf4\xa9\x01\x8b\x05\x82\x7c\x12\x74\xd2\xd2\x08\xe7\x5e\xb4\x3d\x9d\x85\x85\x1a\xea\x25\xd8\x27\xd2\x6b\x50\x27\xcd\xba\xbf\xac\xb3\xa1\xbc\x91\x6f\x4d\x7a\x36\xfb\xd1\xf0\xaf\xfd\x91\xce\x58\x6d\x5c\xc2\x1e\x22\x94\xd1\xe3\x51\x5d\x03\xad\xb4\x74\xc9\x87\xe1\x74\x1b\x78\x66\xa4\xe1\xb5\x43\xfb\xbf\x9d\xa1\x9d\x97\x7a\x3c\xbb\x9e\xbc\xcf\x63\xfa\x81\x33\x5c\xc6\x67\x38\xc5\x06\xb5\x1b\x6c\xc4\xdc\x68\x47\xe3\x28\x16\x06\x63\x21\x6b\x54\x71\xfb\xa5\x88\x9d\x68\x20\x9a\xfe\xbe\xbf\xfb\x33\x77\x64\x51\x95\x58\x6c\xc7\xdd\x52\xa9\x42\x4f\x26\xc3\x64\xb4\x02\x35\xb6\xe0\x8c\x56\x0e\xd2\x6c\x78\xcd\xc2\xbb\x5b\x3e\x43\x4e\x73\xe1\x1c\x96\xea\xc8\xcb\xa6\xff\x9c\xe7\xe1\x02\x5a\x31\x1c\x6a\x3f\x39\x35\xa1\x51\x27\x17\x71\x77\x6b\xd9\xdf\x00\x00\x00\xff\xff\xd0\x78\x6c\xb5\x73\x07\x00\x00")

func stubHtmlCreateStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlCreateStub,
		"stub/html/create.stub",
	)
}

func stubHtmlCreateStub() (*asset, error) {
	bytes, err := stubHtmlCreateStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/create.stub", size: 1907, mode: os.FileMode(420), modTime: time.Unix(1587710019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlDetailStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x6d\x6f\xe2\x38\x10\xfe\xce\xaf\xb0\x7c\x27\x05\x24\x20\x6d\x75\xaa\x4e\x39\x82\xae\xab\xfd\xb0\xfd\x0d\x55\x55\x99\x78\x12\xa6\x38\xb6\x65\x4f\x28\x08\xe5\xbf\xaf\x9c\x64\x0b\x34\x01\x56\x9b\x0f\x96\x32\xcf\xbc\x3c\xcf\xcc\xd8\x0b\x82\xd2\x2a\x41\xb0\x1c\x31\xc6\xd8\x42\xe2\x96\x65\x4a\x78\x9f\x72\x25\xf6\xa6\x22\xde\x02\x0d\x88\xb3\x95\x03\x21\x33\x57\x95\x2b\x96\x78\xda\x2b\x48\xf9\xa1\x14\xae\x40\x9d\xb0\xe8\xe1\x1f\xbb\x63\xe1\x88\xea\x93\xa8\x5e\xe4\x0c\x09\xca\x65\xe5\xc1\xf9\x45\xdc\x07\x6e\x05\x4a\x20\x81\xea\x6a\xe4\x39\x78\x26\x20\x33\x9a\x40\xd3\x91\xbd\x15\x52\xa2\x2e\x3a\xfa\xd1\x94\x95\xa8\x7f\x00\x16\x6b\x0a\xa6\x7f\xef\x1a\xdb\x4a\x64\x9b\xc2\x99\x4a\xcb\x84\x45\x7f\xe5\x79\x3e\xa4\xd0\x99\x0f\x46\x7b\x0b\x29\xcf\x15\xec\x38\x7b\xaf\x3c\x61\xbe\x4f\xb9\x27\xe1\x88\x33\xa1\xb0\xd0\x29\x2f\x51\x4a\x05\x9c\x25\x45\x45\x04\x2e\xe5\xf7\x8f\x9c\x6d\x67\xb9\x71\x29\x1f\x6f\x85\xaa\x60\xaa\x45\x09\x13\x86\x9a\xa1\xce\x0d\xef\x75\x3a\x7a\xb8\xb3\x3b\x76\xd7\xe3\xf0\x29\x51\x31\x6f\x85\x4e\xf9\xc3\x49\x2c\xc1\x8e\x9e\x02\x83\x24\x72\x41\x5d\x88\x3e\x1c\x42\xa5\xba\x0e\xfd\xca\x8c\xba\x91\xed\x71\xa0\x5c\xe7\x84\xda\x56\xc4\xb6\xb3\xd2\x48\x50\x29\x0f\xb4\x5f\x42\xea\x57\xbe\x0c\xb9\x1b\x78\x20\xfb\x50\xd9\x60\x74\xe6\x63\xa8\xbb\x37\xf9\x31\x93\xe7\x1e\xe8\xb6\xf0\x4b\x3a\x56\x15\x91\xd1\xdd\x14\xdb\xe6\xff\x9f\x29\xcc\x36\x29\x2f\xcc\x37\x91\x6d\xf8\x32\x9c\xcd\x7e\x35\xae\x7f\x2a\xaa\xf5\x6a\x56\xb1\xbb\x78\xb1\xc4\xed\x72\xb4\x88\x8f\xf7\x71\xe1\x33\x87\x96\x3a\x36\x41\x46\xfc\x2e\xb6\xa2\xb5\x76\x1a\x4a\x23\x2b\x05\x73\xd8\x59\xe3\xc8\xb3\x94\x1d\x3e\x4b\x48\x41\x22\x61\x79\xa5\x33\x42\xa3\xc7\x93\x13\x28\x7c\x0e\xa8\x72\xfa\x8b\xb1\x01\x4c\x45\xf0\x2c\x13\x46\x6b\xf4\x73\x94\xd3\x9e\x47\x68\x4c\xd2\x0f\x6c\x20\x99\x44\x51\x3f\x22\x7c\x61\x1f\x2e\x82\x50\x0a\x54\xd7\xd1\xb7\x2d\x38\xcc\x11\xe4\x9b\xa0\x8b\x9e\x56\x78\xff\x61\xdc\x65\x16\x0e\x4a\x28\x57\xe0\xde\xc8\x6c\x40\x5f\x74\xcb\x1c\x08\xba\x5e\xaa\xb2\xf2\xd4\xa5\xe7\x53\x8f\x86\xff\xea\x63\x3a\xeb\x8c\xf5\x09\x7b\x89\x50\x46\xaf\x47\x73\x09\xb4\x36\xd2\x27\x5f\x86\x83\x1a\xe9\xc9\xe2\xf7\xe6\xfd\xbb\x32\xd9\xf0\x35\xb3\x13\x3b\x34\x7e\x90\xfb\xdc\x1a\x4f\xe3\x28\x16\x16\x63\x21\x4b\xd4\x71\xf3\x1c\xc7\xed\xdb\x1a\x4d\x0f\x28\x13\x2b\x9c\x87\x67\x4d\xe3\x26\x57\xb7\x15\x93\x7a\x32\x9c\x90\xd6\xa0\xc7\x0e\xbc\x35\xda\x43\xba\x1c\xde\x8e\x4f\x66\x61\x83\x58\xca\x7e\xf9\xcf\xc3\xae\x36\xc7\x60\xd8\x97\x9a\xf5\xf9\x3c\xda\x8b\xf9\x3b\xfd\xf8\xbb\x11\xe1\xe6\x85\x19\xcf\xee\x27\xb7\xc7\xd3\x2d\xc1\x95\xd4\x9d\x98\x93\xb9\x8c\x27\xff\x8d\xce\x93\xd6\xa3\x45\xdc\xde\xd9\xe5\xcf\x00\x00\x00\xff\xff\x1b\x40\x7e\x03\x6d\x07\x00\x00")

func stubHtmlDetailStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlDetailStub,
		"stub/html/detail.stub",
	)
}

func stubHtmlDetailStub() (*asset, error) {
	bytes, err := stubHtmlDetailStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/detail.stub", size: 1901, mode: os.FileMode(420), modTime: time.Unix(1587715006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlEditStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5d\x8b\xeb\x36\x10\x7d\xcf\xaf\x10\x6a\xc1\x0e\x24\xf1\xde\xa5\x5c\x8a\x1b\x9b\xde\xd2\x87\xde\xa7\x3e\xf4\x71\x59\x16\xc5\x1a\x3b\xb3\xb1\x25\x21\x8d\xbd\x09\xc1\xff\xbd\xc8\x71\xf3\x65\x27\x59\x28\xd7\x0f\x02\xcf\xc7\x99\x33\x67\x46\x5a\x12\x54\xa6\x14\x04\xe9\x84\x31\xc6\x96\x12\x1b\x96\x95\xc2\xb9\x84\x97\x62\xa7\x6b\xe2\x07\x47\xe7\xc4\xf9\xca\x82\x90\x99\xad\xab\x15\x8b\x1d\xed\x4a\x48\xf8\xbe\x12\xb6\x40\x15\xb3\xe0\xf9\x17\xb3\x65\xfe\x08\xda\xb3\xac\x41\xe6\x1c\x09\xaa\xb4\x76\x60\xdd\x32\x1a\x3a\x1e\x25\x82\x44\xba\x9b\x77\xe9\xbc\xa0\x9f\x69\x45\xa0\xe8\xc4\xdd\x08\x29\x51\x15\x3d\xf9\x60\xc6\x2a\x54\x7f\x01\x16\x6b\xf2\xa6\x5f\x9f\x3a\xdb\x4a\x64\x9b\xc2\xea\x5a\xc9\x98\x05\x3f\xe5\x79\x3e\xd6\x9f\xd5\x1f\x8c\x76\x06\x12\x9e\x97\xb0\xe5\xec\xbd\x76\x84\xf9\x2e\xe1\x8e\x84\x25\xce\x44\x89\x85\x4a\x78\x85\x52\x96\xc0\x59\x5c\xd4\x44\x60\x13\xfe\xe5\x2b\x67\xcd\x3c\xd7\x36\xe1\x61\x23\xca\x1a\x66\x4a\x54\x30\x65\xa8\x18\xaa\x5c\xf3\x81\xce\xc1\xf3\x93\xd9\xb2\xa7\x01\x87\x63\x8b\x25\x73\x46\xa8\x84\x3f\x9f\xe5\x12\x6c\xe9\x9b\x67\x10\x07\xd6\x77\xe7\xb3\xf7\x7b\x5f\xa9\x6d\xbd\x5e\x99\x2e\x1f\xa0\x7d\x1d\x29\xd7\x07\xa1\x32\x35\xb1\x66\x5e\x69\x09\x65\xc2\x3d\xed\x17\x0f\xfd\xca\x53\x8f\xdd\xb9\x47\xd0\xc7\xca\x7a\xa3\xd5\x1f\x63\xea\x3e\xe4\xc7\x74\x9e\x3b\xa0\xc7\x8d\xdf\xea\x63\x55\x13\x69\xd5\x4f\xd1\xd5\x59\x06\xce\x71\xf6\x7b\x56\x62\xb6\x49\x78\xa1\xff\x11\x0d\xf0\xd4\x9f\xdd\x8a\x75\xd1\x9f\x03\x3b\x4c\xf2\x84\xf4\x87\xc8\x36\x3c\xf5\xe7\x3d\xa4\xcf\x29\x74\x88\xea\xf6\xba\xbf\xc3\x91\xc4\x26\x9d\x2c\xa3\xd3\xd5\x5e\xba\xcc\xa2\xa1\x9e\x8d\xd7\x24\x7a\x17\x8d\x38\x58\x7b\x41\x2a\x2d\xeb\x12\x16\xb0\x35\xda\x92\x63\x09\xdb\x1f\x4b\x48\x41\x22\x66\x79\xad\x32\x42\xad\xc2\xe9\x99\xcb\x7f\x16\xa8\xb6\xea\xca\xd8\x39\x74\x4d\xf0\x5d\xc6\x8c\xd6\xe8\x16\x28\x67\x83\x08\x2f\x4c\x3c\x4c\xec\x5c\x32\x0e\x82\x61\x86\xff\xfc\x72\xdd\x74\x42\x25\xb0\xbc\xef\x7d\x6b\xc0\x62\x8e\x20\xdf\x04\xdd\x8c\x34\xc2\xb9\x0f\x6d\x6f\xb3\xb0\x50\x41\xb5\x02\xfb\x46\x7a\x03\xea\x66\x58\x66\x41\xd0\xfd\x52\xb5\x91\xe7\x21\x83\x98\x76\x32\xfe\xd7\x9e\xe0\x8c\xd5\xc6\xc5\xec\x25\x40\x19\xbc\x9e\xcc\x15\xd0\x5a\x4b\x17\x5f\x0d\x07\x15\xd2\x37\x83\x7f\x02\x79\xad\x6e\x4f\xd6\x7f\xdd\xec\xc4\x16\xb5\x1b\xe5\xbe\x30\xda\x51\x18\x44\xc2\x60\x24\x64\x85\x2a\xea\x5e\xf6\x48\x76\xd8\xc1\x6c\x8f\x32\x36\xc2\x3a\xf8\xae\x28\xec\xb0\xfa\xad\x98\xb6\xd3\x71\x40\x5a\x83\x0a\x2d\x38\xa3\x95\x83\x24\x1d\xdf\x8e\x23\x33\xbf\x41\x2c\x61\xff\xc5\x2f\xfc\xae\x76\xc7\x68\xda\x55\xcd\xf6\x72\x1e\x87\x8b\xf9\x19\x3d\x7e\xee\x9a\xb0\x8b\x42\x87\xf3\x2f\x0f\x30\xfd\x83\xf1\x63\x34\x76\xa2\x81\x60\x76\x94\xe1\xff\xea\xf9\xf7\xea\x1d\x32\x5a\x08\xe7\xb0\x50\xe1\x49\xdd\xd9\x50\xdc\xf1\x52\xd7\xea\x8e\x2d\x6a\x7f\x1d\xee\x08\xd2\x17\x3e\xdb\xd0\x70\xfa\xdb\xe4\x12\xb4\x9d\x2c\xa3\xc3\xeb\x95\xfe\x1b\x00\x00\xff\xff\x27\xff\x70\xcb\xc2\x08\x00\x00")

func stubHtmlEditStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlEditStub,
		"stub/html/edit.stub",
	)
}

func stubHtmlEditStub() (*asset, error) {
	bytes, err := stubHtmlEditStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/edit.stub", size: 2242, mode: os.FileMode(420), modTime: time.Unix(1587710792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubHtmlListStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x8f\xe3\xb6\x15\xbf\xef\xa7\x78\x65\x0a\xc8\x83\xf8\xdf\x2e\xb2\x8b\x42\x6b\x79\xd3\x66\x03\x14\x05\x9a\x06\xdd\x34\x97\xc1\x60\xc0\x91\x9e\x6c\xee\xd2\xa2\x4a\xd2\xf6\x4c\x0c\xdf\x73\xeb\xad\x40\x7b\xea\xa1\x9f\xa1\xa7\x7e\x9d\x14\xe8\xa9\x5f\xa1\x78\x94\x2c\xcb\x12\x65\x6b\x26\x2d\xda\x20\x3e\xcc\x4a\x22\xf9\xf8\xfe\xfd\x7e\xef\x91\x3b\xb3\xb8\xca\x25\xb7\x38\x7f\x06\x00\x30\x4b\xc4\x06\x62\xc9\x8d\x89\x98\xe4\x0f\x6a\x6d\x59\x31\xe0\x06\xc5\xe8\x4e\x23\x4f\x62\xbd\x5e\xdd\x41\x68\xec\x83\xc4\x88\xed\x56\x5c\x2f\x44\x16\x42\xf0\xe2\x93\xfc\x1e\xe8\x4f\xb0\xaf\xad\x6a\xad\x1c\x09\x8b\xab\xf9\x6c\x66\xf9\x9d\xc4\xdb\x8c\xaf\x70\x3e\x9f\x4d\xda\x33\x2e\x49\x90\xc2\xd8\xb3\xeb\x4e\x07\x4f\xec\x88\x55\x66\x31\xb3\x47\x23\x72\x9e\x24\x22\x5b\x94\x56\x04\x43\x58\x89\xec\x97\x28\x16\x4b\x4b\x9f\x7e\x36\x75\xdf\xee\x78\xfc\x61\xa1\xd5\x3a\x4b\x42\x08\x3e\x4a\xd3\xd4\x67\xa8\x56\x5b\x9f\x6f\xa6\xf9\x3d\x4c\x21\xd8\x33\xb0\x0f\x39\x46\x2c\x95\x78\xcf\xe0\xfd\xda\x58\x91\x3e\x44\x4c\x62\x6a\x1b\xb2\x2a\x55\x65\x5b\xcd\xe0\xb9\x93\x17\x0c\x2d\xde\xdb\x9f\x4b\xb1\xc8\xc2\x40\x93\xb6\xb4\x81\xc9\x79\x16\x05\xaf\x02\xd8\x8c\x52\xa5\x23\xb6\xe1\x72\x8d\x20\x32\x30\xc8\x75\xbc\xbc\x4d\x05\xca\xc4\x78\x76\xa3\xdf\x6e\xe7\xa6\xef\xf7\xff\xfa\xfb\x9f\xbd\x13\x66\x62\x24\xb2\x7c\x6d\x61\x33\x5a\xa9\x04\x65\xc4\x4e\xc4\x5e\xbb\xe5\x37\x0c\x72\xc9\x63\x5c\x2a\x99\xa0\x8e\x18\x83\xd2\x82\xad\x48\xec\x32\x84\x17\xd3\x69\x7e\xcf\x5c\xd8\x9d\x30\x8f\xe5\x13\x67\x7a\xc3\xbd\x13\xe7\x5f\x9f\xcf\x3b\x7d\xe7\xbc\xc1\x9e\xbf\x60\xe0\x37\x98\x32\x6b\x6d\xad\xca\xca\xc0\x24\x98\xf2\xb5\xb4\x0c\x3e\x8d\xa5\x88\x3f\x44\x4c\x64\x1b\xf5\x01\x7f\xc1\x6d\xbc\x7c\x8b\x12\x2d\xb2\xb9\x7b\x81\xe2\xcd\x65\x99\x13\xd0\xd3\x08\xaf\x6e\x55\x84\x3d\x01\xed\xa7\xb7\xc8\x52\xd5\x54\xfa\x9d\x8b\x0c\x9b\x17\xff\x9e\xd3\xf4\x11\x9e\xf8\x4c\x23\x27\x27\x7c\x81\xdb\x47\xdb\xee\x0f\xe0\x9d\x6e\x45\xd4\x91\x03\x84\xb1\x92\xeb\x55\x66\x22\x16\x2b\x79\x4b\x80\x67\x10\x26\xdc\xf2\x88\xad\xb8\xc8\x6e\xe9\x91\x01\x7c\xaa\xb2\x91\x41\x89\xb1\x15\x2a\x1b\xc5\x4b\x9e\x2d\x30\x62\x05\xbf\x54\xdf\x6f\x8b\xef\x3e\x90\x1d\x38\x10\x8c\x54\x76\x64\x62\x45\xd6\xef\xb4\xda\x12\x98\xa4\xb2\xe4\x0a\xcb\x85\xbc\x2d\x6c\x7d\x54\x40\x8c\xf8\x06\x23\x66\x56\x5c\xca\xa6\x23\xbf\x16\xb8\x1d\x68\xb5\xbd\x62\x73\x7a\x7c\x6c\x78\x2e\xca\x7f\xeb\x94\x2e\x77\x28\x5e\xfe\xe3\x7b\x7c\x9e\x08\x5b\xee\x40\x8f\x4f\x4a\x31\x7b\xc1\x0a\x42\x59\x65\xc5\x65\xc8\x9d\x56\xb4\x7a\xe6\xb9\x8c\x68\xa5\x5a\xce\x17\x58\xe2\xcf\x1c\x29\xdb\x31\x36\xb1\x69\x68\x95\xe5\x32\x62\x34\xed\x2b\x7a\x64\x10\xd2\xf3\xa8\xd0\x99\x1e\xdf\x89\x6f\x90\x81\x59\xaa\xed\x08\x25\x6e\xb8\x55\xba\x78\x73\x4b\x8b\xfc\x3c\x64\x65\x89\x21\xf7\xf6\x25\x5f\x20\x03\xc7\x82\x24\xa6\xa5\xd9\x4a\x25\x5c\x1e\x79\x76\x23\x70\xfb\x6b\xfa\xc4\x20\x74\x3c\x1a\xb1\x97\x53\x06\x56\x58\x62\x8e\x5c\x23\x4d\xf0\x17\x11\x2a\x4a\xde\xba\x63\x2c\xd7\x96\x01\x27\xc6\x89\xd8\x4a\x24\x89\x44\x06\xe1\x62\x6d\x2d\xf1\xf6\xf3\x57\xec\x50\x45\x06\x8e\xd8\x87\x40\x05\xfb\x8a\xaa\x49\xa5\xce\x5b\x87\xc2\x66\xcd\x0b\x5e\xba\x0a\x75\x86\xbe\x8e\x0c\xf8\xea\x02\x01\xee\x76\xb4\xeb\x7e\xdf\xc9\xa7\x2d\x89\xcf\x5f\x74\xec\x0b\xde\x12\xe6\x6c\x3b\x5b\x8f\xe0\x2c\x9d\x7b\x69\x6d\x52\x46\xf0\x52\x5c\x13\x97\xd4\x65\x64\xcb\x68\x26\x28\x7d\x91\xcc\x4b\x3e\x5a\x22\x4f\x50\x57\x55\x35\x56\x52\xe9\xf0\xa3\xf4\xd5\xf4\x35\xb9\x6f\xe4\xc2\x19\xc6\x98\x59\xd4\xdd\xfe\x17\xf1\x11\xe7\xca\x8c\x08\xeb\x7a\xc5\x0b\x0e\x15\x3a\x96\x07\x87\xc4\x9d\x68\x26\x5f\x97\x98\x84\x58\x65\xa9\x28\xd7\xcf\x26\x6e\xc4\xe3\xa7\xdc\xf3\x91\x7a\xce\xd2\x90\xde\xda\xe7\xf3\x72\x3f\x28\xbc\xf7\xc6\x2b\xba\x9c\xfa\xd5\x12\x41\xe5\xa8\x9d\x6e\xe5\x02\xd0\x18\x2b\x9d\x40\xaa\xd5\x0a\xec\x12\x81\x6a\xc9\x1d\x37\xe8\xd7\x71\x92\x88\x4d\x97\xea\x2e\x22\xa9\x52\x67\x9d\xdd\x89\x40\xcc\x92\xf3\xa9\xda\x33\xa9\xe1\x02\x7d\x4b\xae\x89\x6d\xa4\xca\x16\x15\xc3\xd6\x32\x0f\x22\x48\xb9\x34\xf8\xba\xf6\x8d\x80\x0d\x11\xec\xf6\x6c\xfe\x19\xcf\x62\xbc\x58\x3e\xe0\x1c\x48\xbc\x26\x7d\xf2\x48\x8b\x50\x6b\xa5\x1b\x26\x35\xda\x93\x22\x2f\xca\xb2\x71\xc5\xa0\x47\xd1\xe8\xa5\xbb\x17\xe4\xe0\x4f\x8e\x1a\xf6\x2f\x80\xff\xee\xd8\x57\xfe\x60\x19\xa0\xde\x0e\xff\x1f\xf3\x40\x67\x25\x6b\xc6\xc0\x15\xb4\x79\x75\x12\x7a\x2c\xb5\x98\x92\x5b\xcc\x8f\x9b\x5c\x9a\x5e\xad\x18\xc6\xe7\xee\x92\x66\xbe\xfb\xc3\x1f\xff\xf1\xb7\x6f\x7f\x40\x34\x53\x3b\x16\x3a\xae\xf9\xee\xdb\xbf\xfc\xf3\x4f\x7f\xfd\x5f\x71\xcd\xa9\x6c\x77\xc5\x51\xde\xeb\x14\xcb\xea\xcd\xf1\xcc\xc4\x5a\xe4\xb6\x34\x98\x00\x37\x79\xcf\x37\xbc\xf8\x5a\xba\x6b\xa5\x92\xb5\xc4\x31\xde\xe7\x4a\x5b\x43\x31\xaa\xb6\xa0\x8c\x0e\x21\x5d\x67\xee\x70\x35\xb8\xaa\x0d\xd1\x4f\xa3\x5d\xeb\xac\xf1\xd1\x89\x3c\x9c\xdb\x42\xb8\xbe\x19\xb6\x86\xab\x2e\x3b\x9c\xfa\x07\xa9\xd7\xf6\x8d\x55\xdd\x68\xe8\x92\xec\xcc\x04\x4a\xb7\x70\xb7\x6f\xcf\xa8\x55\xbe\x2e\x21\x8d\xe2\x18\x82\x4f\x4e\x33\xbf\xbb\x84\xf9\x70\x10\xfa\x9c\x72\x38\xfc\x86\x70\xed\xbf\xb3\xa1\x18\x86\x41\x75\xd4\x0d\x86\xc5\x35\xcb\xab\xe9\xb0\xe0\xd0\xa0\x20\xd1\xc0\xa3\x2c\xfd\x66\xb3\xf7\xc6\xc5\xe4\xb6\x38\x6f\xbb\xcd\xe6\x1d\xf7\x43\xae\x3c\x85\x41\x41\x7a\x18\x0c\x1d\x45\x85\xc1\xc9\x09\x39\x18\xc2\xe1\xa2\xe7\xe5\x74\xdf\x92\xe3\x31\x51\xab\xb5\x75\xe7\xa1\xd0\x2e\x85\x19\xbb\x33\xd9\x9b\xe3\x63\x08\x41\xd0\x5e\x74\x72\xf1\xd4\xe5\x9c\x9a\x75\x27\xf3\x3d\xf6\xdd\x9c\x7c\x39\xea\x5d\x73\x5b\xae\x55\x4e\x5b\x05\xa4\x56\x50\x33\x64\x85\x76\xa9\x48\x8b\xd3\x94\x77\x47\xce\xb7\xe7\xb1\x42\xbf\x0d\xd7\x45\x7a\x5b\x0d\x11\x38\xc3\x2b\x97\xc0\x1b\x08\xde\xd0\x60\x14\x7c\xdc\x18\x21\xbf\xbc\x7e\xe6\x95\x56\x1a\x4b\xa1\x74\xe4\xfa\xba\x35\x2b\x55\x7a\x40\x33\x05\xd5\x40\x27\xf8\xc4\x41\x3e\x35\xe9\x27\xd2\x41\x7b\xf2\xb5\xb8\xe9\x9a\x0f\xc7\x48\x91\x32\xd7\xe2\xe6\x60\x61\x53\x82\x77\x79\x3b\x7d\xf6\x6d\x83\x9d\x38\x7e\x2f\x94\xf1\xca\x18\xe7\xca\xd8\x41\x30\xe1\xb9\x98\x9c\x5e\x3c\x4f\x48\xa5\xe0\xe3\xd2\xf5\xc3\x5f\xbd\xfb\xcd\x17\x63\x63\xb5\xc8\x16\x22\x7d\x18\xd4\xd4\xbe\xba\xf2\x4b\xb6\x4b\xcc\x06\x1a\x4d\xae\x32\x83\xd1\xbc\xdb\x05\xb1\xca\x8c\x92\x38\xa6\xb2\x59\x2d\xf0\x0b\xad\x2c\xaa\xc8\x12\x22\x38\x2c\x19\xd3\x7b\xf1\x87\xf4\xf2\x23\xfa\x44\x4a\xc5\xa9\x7e\x29\xee\x92\xa2\xa7\x18\x62\x5f\xbf\x94\x1c\xf5\x2d\xcd\xf0\xc7\xf0\xd4\xce\x06\x0d\x35\xaf\x44\x6a\x50\x21\x89\xbe\xbc\x72\x0a\xfd\xd4\xe1\x40\x8f\xf3\xb5\x59\x0e\x76\xbf\x5f\xa3\x7e\x08\x77\xb4\xc2\xdd\xcf\xec\xfb\x6c\x5a\x5c\x8c\x5e\xc0\x66\x03\x73\x11\x3c\x6f\x63\xc9\xcd\xa9\xc0\x3e\xb8\x7a\x7d\x79\xef\xe2\x46\xae\xb6\xb7\x56\x5b\xdf\xf6\x93\xc9\x69\xee\xd4\x6c\x6f\xa7\x8f\xc7\x31\x39\xb7\xcb\x30\x68\xe6\x7d\xc1\xd7\xc1\xb0\x74\x9b\x48\x42\xad\xb6\x63\x91\xf4\x72\xdb\xe7\x89\xb0\x97\x15\xef\xad\x0b\x26\xc2\x3e\x51\x93\xe2\x32\xba\x4f\x00\xfb\x28\x12\x3b\x69\x41\x9f\x8d\x8b\xba\xdd\x2b\x7a\xae\x39\xf3\x2b\x55\xeb\x27\x22\xab\xd7\x6d\xf4\x34\x67\x95\xbd\xb2\x56\x5b\x4f\x97\x50\x27\x18\xb5\xed\xe3\xbd\xfa\x59\xb9\x8f\x13\x9f\x44\xb1\x85\xfa\xc1\x90\x42\xeb\xb3\x87\x62\xfd\x7d\xd9\xb5\x29\xf7\x70\xd8\xe8\xbd\xa0\x3a\x84\x9c\x5f\x51\x83\xf8\x93\x99\xee\x6b\x81\xdb\xb0\x17\x78\xaa\x9e\x95\x2a\x66\x67\x7a\x9c\x74\xb6\x9e\xe4\xf0\x2a\x51\x3b\xb8\x5c\x08\xfc\xa1\xde\xfb\xda\xd5\xb1\xc4\x6c\x61\x97\x10\x45\x30\xed\xaa\xff\x5c\xa2\xb6\x83\xe0\x4b\x89\xdc\x20\x14\x4d\x2a\x08\x8b\x2b\x03\xa9\xd0\xc6\xfe\x24\xb8\x6a\xf3\x29\x54\x67\x88\xf6\x58\x3b\x44\x5e\xfd\xda\x80\x3a\x87\x81\xfe\xfe\x78\x3a\x10\x9c\x86\xb7\x07\x38\x34\x7a\x8d\x5d\x20\x12\x13\x84\x9d\xae\xde\x7f\xef\x0e\xc4\x2b\xba\x1f\x50\x3a\x8f\xec\xff\x4d\xb4\xf8\xff\x03\x8f\x00\xe3\xed\x4d\xcf\x29\x7a\x7d\xd3\xee\x19\x53\xa5\xe1\xd8\xff\x76\x49\x3d\x2b\xb9\x28\x26\xb4\xf4\x5a\xdc\x8c\x45\xd2\xb6\x72\x7f\xf9\x48\x51\x14\x9d\xe4\x4c\xd6\x75\x37\x17\x35\x31\x77\x98\x2a\x8d\xbf\xa5\x22\xf7\xbb\x3c\x39\x2d\x8a\x56\x0d\x8b\xbb\xa8\x61\x86\xf7\xd6\x2b\xbe\xde\xdf\x58\x35\x76\xc5\x78\xdc\x6a\xe8\xce\xb7\x39\x24\xbc\x16\xe9\xc2\xda\xfd\xb3\xd9\xa4\xb8\x54\x98\x3f\xfb\x77\x00\x00\x00\xff\xff\x04\x54\xdd\x96\x6e\x22\x00\x00")

func stubHtmlListStubBytes() ([]byte, error) {
	return bindataRead(
		_stubHtmlListStub,
		"stub/html/list.stub",
	)
}

func stubHtmlListStub() (*asset, error) {
	bytes, err := stubHtmlListStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/html/list.stub", size: 8814, mode: os.FileMode(420), modTime: time.Unix(1587732357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubLayoutDefaultStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5d\x6f\xac\x36\x10\x7d\xcf\xaf\x98\xba\x95\x48\xaa\xb0\x6c\xd2\xfb\xe4\x02\xd2\x95\xfa\xda\xaa\xaa\xfa\x16\x45\x57\x5e\x6c\xc0\x8a\xb1\x91\x6d\x48\xd2\xd5\xfe\xf7\xca\x86\xdd\xe5\x73\x77\xc3\x43\xb4\x8c\x67\xce\x8c\xcf\x1c\x8f\x49\x6c\xec\xa7\x60\x60\x32\x55\x33\x9a\xde\x01\x00\x6c\x04\xf9\x54\x8d\x0d\x25\x69\x61\xef\x2d\xee\x79\xe7\xd4\x96\x18\xbe\x3d\x6f\xeb\x8f\xdf\x4f\xd6\x8a\xe8\x82\x4b\x0c\x5b\x20\x8d\x55\x53\x7b\xa8\x79\x51\x5a\x0c\xe3\x98\x4c\x09\xa5\x31\xbc\x97\xdc\xb2\xce\x7a\xb8\x1b\x25\x16\xaa\x50\x83\xcc\x3b\xa5\x29\xd3\xa1\x26\x94\x37\x06\xc3\x6f\x43\xac\x5c\x28\x62\x31\x08\x96\xdb\x23\x54\x1c\xf9\x2d\xa5\x77\xb1\x65\x55\x2d\x88\x65\xdd\xb6\x62\xca\xdb\xf4\x14\x18\xf3\xb0\xcb\x76\x36\xf5\xe6\x92\x11\xca\x34\x60\x8f\x92\xa0\xfd\x8e\x64\x6f\x85\x56\x8d\xa4\x38\xf8\x79\xbb\xdd\x06\x07\x34\x8e\xe9\xe3\x2a\x26\x1b\xa8\x14\x65\x09\x2a\x95\xe6\xff\x29\x69\x89\x40\x60\x4b\x56\xb1\x04\x51\xa2\xdf\x10\x90\xcc\xf2\x96\x85\x92\x38\xd3\x13\xba\x98\x04\xe6\x59\x7c\xa6\xf2\x19\x32\x41\x8c\x49\xd0\x80\x2e\x04\x3d\x52\x47\x6e\xc7\x2d\x4a\xff\xe5\x56\xb0\x38\x2a\x9f\x57\xb0\x28\x6f\x27\x60\x92\xb4\x0b\xdb\xf3\xce\xd1\x88\xc0\xb3\xb9\xdb\xfa\x84\xc7\xe8\x48\xe4\x8c\xdf\x25\xda\xfb\x25\xc3\x1d\xf3\x25\xa7\x2c\xb4\x9a\x17\xc5\xb0\x0d\x50\xb2\x4e\x4c\xc1\xd3\x76\xdb\x96\xc1\xe3\x88\xb2\x3c\xcf\x17\xfb\x32\xec\x4d\xdf\x09\xe1\x60\x50\xa7\xe7\x04\x39\xd9\x22\xc0\xa3\xc6\x14\xcc\x7e\xf7\xef\x7f\x91\x8a\x21\xc0\xaa\x66\xd2\x2f\x99\x04\xbd\x04\x4f\xc1\xeb\x4a\x22\x9f\xec\x28\x3a\x68\xc3\x5c\xe9\x04\x71\xcb\x2a\xe0\x12\x5c\x09\x6b\x3d\x9d\x54\x1a\xfa\x98\x36\xe4\x79\x82\xec\x67\xcd\x54\x7e\xef\x2c\x1b\xd3\xec\x7e\xb8\xf5\x07\x48\x12\x08\x1a\x49\x59\xce\x25\xa3\x01\x02\xdc\x15\xee\xbd\xdc\xcf\x0b\x05\x0e\x72\xf1\x4c\x49\xc0\x2e\x43\x1f\xea\x0c\x28\x75\xbd\x73\xbf\x6e\xc0\xd0\xaa\xb1\x4c\x87\x82\xcb\x37\xc0\x56\x79\xea\xfe\x71\xb6\xbf\x89\x2d\xef\x4f\xe5\x3c\x20\xb0\xa4\x48\x90\xa9\x89\x44\xe9\x7e\xef\x17\xac\xd3\xe6\xe1\x10\x47\x03\x90\x2b\xf4\x44\x03\x7e\xae\x32\x69\x9a\x9d\x6f\xfb\x25\x1e\x7f\x9a\xf0\x78\x3c\x98\x37\x6c\xfd\xd4\x67\x23\x94\x4d\x90\xdf\xcd\x0d\x71\x70\x1b\xf5\x63\x8e\xae\x57\x13\x8d\x67\xdd\x95\xec\x43\x91\x79\x91\x9a\x66\xe7\x34\x3a\x62\xe7\xa4\x2a\xd3\xec\x6e\x15\x15\x5c\x17\xc5\x11\x6d\xaa\x09\x67\xff\xba\x24\xe0\x8b\xb2\x88\x4e\xba\xb8\x70\x84\xaf\x90\xb9\x3c\xf1\x4e\xf0\x7c\x36\xf4\x60\x38\xf8\xce\x13\xad\x26\x94\x72\x59\x60\x08\xb6\xf0\xfc\xad\xfe\xf0\x7f\xd6\xa7\x58\xcf\x49\xcb\xd9\x7b\x7a\x62\xc8\xbf\x2d\xd6\xb1\x78\xbb\x2d\xd8\xa7\xb6\x7e\xcc\x0f\x49\x88\x4d\xa6\x79\x6d\xd3\xee\x96\xae\x14\x6d\x04\xdb\xb0\x8f\x5a\x69\x6b\x20\x19\xdc\xd4\x94\x58\x82\x21\x6f\x64\x66\xb9\x92\x70\xff\x30\x58\x73\x8f\x66\xb6\xd1\x72\x62\x74\x4f\x14\x41\xa6\x64\xce\x0b\x28\x84\xda\x11\xe1\xa7\x25\x08\x6e\xec\xcc\xd5\xad\xe0\x97\x39\x84\x7b\xdc\xd1\xc1\x10\x70\x65\xc2\x9a\xa9\x5a\xb0\xe0\x71\xd1\xcf\xeb\x0c\x43\xf0\x27\x93\xcd\x8a\xcb\xf1\x14\xe0\x97\x55\x9d\x44\x11\x84\x61\x18\x3a\x10\x13\x7e\xa7\xd4\xbd\x84\x97\xbc\xff\x50\x20\x95\x75\x04\xf2\xfc\xd3\x5d\x47\xee\x95\x19\x08\xe6\x30\xc1\x22\xce\xeb\xcc\x7a\x78\x7d\xbc\xbb\xce\xa6\x17\x8b\x99\xf9\x75\x66\x0c\x2b\x6c\xd6\xc4\x7d\xf0\x05\xbf\xae\x30\xa4\x19\xe5\x9a\x65\x16\xc3\xde\x9d\x67\x0c\x41\x1c\x53\x96\x93\x46\xd8\x1f\x1e\x39\x4d\x83\xf9\xe4\x3a\xcc\xc1\x7a\x1e\xfd\x88\xb8\x40\xe4\x35\x02\x27\xf1\x73\x06\xc7\xec\x9d\x4b\x1b\x94\x94\xa9\xaa\x6e\x2c\xa3\x78\xa2\xd1\xd1\x17\xc1\x59\xe1\x33\x81\x9f\xb9\xf1\x42\xb7\x25\x37\x9b\x5f\x3c\x19\x7e\xe6\xcd\xd9\x58\x2a\xa2\x62\xb6\x54\xd4\x2c\xd4\x70\x9a\xa2\x83\x12\xfc\x2c\x5d\x28\xa3\x25\xba\x6f\x30\x24\x5d\x21\x2b\x2a\xc8\x95\x86\x7b\xe7\xcd\xdd\x15\xd0\x39\xad\xed\x8b\xe7\x3e\x9f\xfb\xfe\xe8\x1c\x5f\xf8\xeb\x66\xad\x82\x09\x19\xe7\x00\x27\xac\x45\xef\x05\xb9\xcc\x45\xdb\xa1\x05\xc1\x5a\x37\xcf\xff\x06\xf4\x53\xeb\xff\x00\x00\x00\xff\xff\x9f\x18\x62\x8e\xe3\x0c\x00\x00")

func stubLayoutDefaultStubBytes() ([]byte, error) {
	return bindataRead(
		_stubLayoutDefaultStub,
		"stub/layout/default.stub",
	)
}

func stubLayoutDefaultStub() (*asset, error) {
	bytes, err := stubLayoutDefaultStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/layout/default.stub", size: 3299, mode: os.FileMode(420), modTime: time.Unix(1587735805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubMainStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x41\xca\xc3\x20\x14\x04\xe0\xf5\x9b\x53\xbc\xff\xc1\x0f\x0a\x25\x07\x28\x49\x76\xed\x01\x7a\x81\x22\xc1\x88\xd4\x3c\x83\x24\xdd\x88\x77\x2f\xb6\xcb\xf9\x66\x66\x77\xcb\xcb\x05\xcf\x9b\x8b\x0a\xc4\x6d\xcf\xe5\x60\x03\x92\x71\xfc\x85\xe7\x92\x8b\x9f\x67\x01\x49\xca\x41\x60\x81\xf5\xd4\xe5\x7b\x30\x96\x2b\x40\x9e\xaf\x13\xf7\xd9\x70\xd3\x10\xd5\xd7\xd6\xb1\x94\xce\x7e\x78\x9c\x6a\x2c\x28\xae\xdc\xe9\x6f\x62\x8d\x89\x2b\x88\x52\x0e\xc3\xdd\x1d\x2e\xad\x46\xfe\xdf\x72\xe9\xbd\x05\x35\x34\x7c\x02\x00\x00\xff\xff\x64\x63\xff\x1f\x96\x00\x00\x00")

func stubMainStubBytes() ([]byte, error) {
	return bindataRead(
		_stubMainStub,
		"stub/main.stub",
	)
}

func stubMainStub() (*asset, error) {
	bytes, err := stubMainStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/main.stub", size: 150, mode: os.FileMode(420), modTime: time.Unix(1587732993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubModelModelStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stubModelModelStubBytes() ([]byte, error) {
	return bindataRead(
		_stubModelModelStub,
		"stub/model/model.stub",
	)
}

func stubModelModelStub() (*asset, error) {
	bytes, err := stubModelModelStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/model/model.stub", size: 0, mode: os.FileMode(420), modTime: time.Unix(1587716320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stubRouteRouteStub = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xd1\x53\x10\x3e\xd9\x85\x13\xbd\xc3\x10\x14\xeb\x6d\x48\x80\xed\xd8\xc8\x12\x6d\x73\xb5\x25\x8f\xa2\x96\x64\xc3\xde\x7d\x90\x9c\x0d\x4d\x31\xec\xd2\x8b\x21\xf2\x27\xf9\xd1\xbf\xa4\x35\x1c\xcf\x81\x1d\x9c\x69\x9a\xc0\x8e\x68\x5f\x80\x7a\xe0\x90\x04\xa1\xa7\x09\x81\x22\x58\x46\x23\xe8\xda\xac\xe0\x85\x62\x39\xbf\x6a\x9b\x83\xa3\xfe\x0a\x24\x4a\x6b\x78\xea\xe1\x1a\x12\x9c\x8d\x17\x90\x00\x8c\xb7\x6e\x90\x11\xd7\xb9\x6d\xd6\xe3\x18\xd2\xe4\xc0\xe1\x84\x82\x45\xcb\xb4\xd6\xf8\x52\xe8\x21\x45\xbc\x21\x06\xf4\xc8\x46\x10\xcc\x60\xc8\xb7\x10\xb8\x00\xac\xf1\x60\xc3\x72\x85\x9e\xc3\x5c\x06\x9c\xa2\xa4\x4e\x17\xc4\xfa\xdd\xe5\xc4\xa9\x0c\x56\x2a\xef\xb6\x0f\xe0\x83\xfc\xd9\x37\xf7\xf8\x20\x18\xe1\xb4\xdd\x6e\xb7\x87\xdc\xb2\xed\x70\x20\x9f\xc3\x53\x06\xbd\x12\xd0\xbb\xfb\xf4\xd3\xbc\x04\x96\x92\x53\x6a\x31\xf6\xc5\x0c\xb7\x1f\x54\x8a\x8a\x06\xb5\xda\x54\x1e\x45\x8f\x22\x4b\xa5\xd4\xa6\x1a\x48\xc6\xd4\xed\x6c\x98\xf5\x57\xf2\x3f\xc6\xa4\x87\xc0\x73\xa5\x36\x5a\xc3\xfd\x4c\xd5\x28\xd5\x27\x6f\xe1\x80\x43\x76\x9c\x6b\xd7\xc1\x43\xae\xde\xed\x3f\xb4\x8c\xde\x21\x43\x2e\xa8\xcf\x4c\x82\x0c\x99\xb1\x3b\x60\x5c\x82\x8f\xf8\xa5\xe4\x5a\x60\xfc\x96\x30\x0a\x3c\xdc\xd4\x12\x35\x0d\xfc\x2c\xc4\xa3\x18\x21\xbb\xfa\xb3\x29\x15\x1f\x8d\x77\x13\xd6\x95\x1e\xc2\x73\xcc\xee\x3f\x2f\xa9\x9b\xc8\xea\xaa\x5d\x01\x47\x61\x5a\x3e\x31\xf6\x74\xf9\x4f\xd5\x23\x4d\x78\x44\xfe\x8e\x5c\x97\x78\x4f\x5c\x57\x8c\x31\x24\xb6\xa8\xcf\xd8\xe9\xce\x44\xd4\x8e\xa2\x54\x4d\xd3\x34\xaa\xac\xb3\xc7\xde\xa4\x49\x80\xbc\xc3\xcb\x6e\x94\x79\x7a\xbb\xd5\xbf\xb7\x78\x1f\xf5\xb0\x5a\xf9\x39\x21\x64\x24\xd8\x30\x2f\xc1\xa3\x97\x3b\xf8\x63\x76\xba\xd2\xab\xef\x55\x36\x36\x1f\x1a\xa5\x14\x00\xc0\xed\xf6\xde\xbc\x20\xf5\xf7\x5a\xef\x5e\x90\xfa\xa5\x7e\x07\x00\x00\xff\xff\xbc\x0d\x9d\x23\x76\x03\x00\x00")

func stubRouteRouteStubBytes() ([]byte, error) {
	return bindataRead(
		_stubRouteRouteStub,
		"stub/route/route.stub",
	)
}

func stubRouteRouteStub() (*asset, error) {
	bytes, err := stubRouteRouteStubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stub/route/route.stub", size: 886, mode: os.FileMode(420), modTime: time.Unix(1587833739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stub/controller/controller.stub": stubControllerControllerStub,
	"stub/core/core.stub":             stubCoreCoreStub,
	"stub/html/create.stub":           stubHtmlCreateStub,
	"stub/html/detail.stub":           stubHtmlDetailStub,
	"stub/html/edit.stub":             stubHtmlEditStub,
	"stub/html/list.stub":             stubHtmlListStub,
	"stub/layout/default.stub":        stubLayoutDefaultStub,
	"stub/main.stub":                  stubMainStub,
	"stub/model/model.stub":           stubModelModelStub,
	"stub/route/route.stub":           stubRouteRouteStub,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stub": &bintree{nil, map[string]*bintree{
		"controller": &bintree{nil, map[string]*bintree{
			"controller.stub": &bintree{stubControllerControllerStub, map[string]*bintree{}},
		}},
		"core": &bintree{nil, map[string]*bintree{
			"core.stub": &bintree{stubCoreCoreStub, map[string]*bintree{}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"create.stub": &bintree{stubHtmlCreateStub, map[string]*bintree{}},
			"detail.stub": &bintree{stubHtmlDetailStub, map[string]*bintree{}},
			"edit.stub":   &bintree{stubHtmlEditStub, map[string]*bintree{}},
			"list.stub":   &bintree{stubHtmlListStub, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"default.stub": &bintree{stubLayoutDefaultStub, map[string]*bintree{}},
		}},
		"main.stub": &bintree{stubMainStub, map[string]*bintree{}},
		"model": &bintree{nil, map[string]*bintree{
			"model.stub": &bintree{stubModelModelStub, map[string]*bintree{}},
		}},
		"route": &bintree{nil, map[string]*bintree{
			"route.stub": &bintree{stubRouteRouteStub, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
