package core

import (
	"io/ioutil"
	"net/http"
	"fmt"
	"log"

	"<<import_route>>"

	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
)

type ResponseRet struct {
	Code int         `json:"code"`
	Msg  string      `json:"msg"`
	Data interface{} `json:"data"`
}

type ResponseRetList struct {
	List interface{} `json:"list"`
}


type Config struct {
	Database *DbSet
	// server port
	ServerPort string
}

type DbSet struct {
	Host     string
	User     string
	Password string
	Port     int
	Database string
}

type Engine struct {
	Db *gorm.DB
	Config *Config
}

func (e *Engine) Load() (err error) {
	// Open db
	e.registerDb()

	// Register route
	route.Register(e.Db,e.Render)

	return nil
}

func (e *Engine) registerDb() {
	// "root:123456@/goadmin?charset=utf8&parseTime=True&loc=Local"
	d := e.Config.Database
	db, err := gorm.Open("mysql", fmt.Sprintf("%s:%s@/%s?charset=utf8&parseTime=True&loc=Local",d.User,d.Password,d.Database))
	if err != nil {
		log.Fatal("%v",err)
	}

	e.Db = db
}


func (e *Engine) Run() (err error) {
	err = e.Load()
	if err != nil {
		return
	}

	err = http.ListenAndServe(":8082", nil)
	return
}


func (e *Engine) Render(writer http.ResponseWriter, request *http.Request) {

	// 解析参数，映射到文件
	err := request.ParseForm()
	if err != nil {
		panic(err.Error())
	}

	path := request.FormValue("path")

	//log.Println("%v", path)
	if path == "" {
		panic("lose path param")
	}

	// 从view目录中寻找文件
	body := e.readFile("view" + path + ".html")

	// body, err := view.Asset("view" + path + ".html")

	_, err = writer.Write(body)

	if err != nil {
		panic(err.Error())
	}
}

func (e *Engine) readFile(path string) []byte {
	body, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err.Error())
	}

	return body
}
